package model

import (
	"time"
)

type Posts struct {
	Id                  int64     `xorm:"index(TYPE_STATUS_DATE) BIGINT(20)"`
	PostAuthor          int64     `xorm:"not null default 0 index BIGINT(20)"`
	PostDate            time.Time `xorm:"not null default '0000-00-00 00:00:00' index(TYPE_STATUS_DATE) DATETIME"`
	PostDateGmt         time.Time `xorm:"not null default '0000-00-00 00:00:00' DATETIME"`
	PostContent         string    `xorm:"not null LONGTEXT"`
	PostTitle           string    `xorm:"not null TEXT"`
	PostExcerpt         string    `xorm:"not null TEXT"`
	PostStatus          string    `xorm:"not null default 'publish' index(TYPE_STATUS_DATE) VARCHAR(20)"`
	CommentStatus       string    `xorm:"not null default 'open' VARCHAR(20)"`
	PingStatus          string    `xorm:"not null default 'open' VARCHAR(20)"`
	PostPassword        string    `xorm:"not null default '' VARCHAR(255)"`
	PostName            string    `xorm:"not null default '' index VARCHAR(200)"`
	ToPing              string    `xorm:"not null TEXT"`
	Pinged              string    `xorm:"not null TEXT"`
	PostModified        time.Time `xorm:"not null default '0000-00-00 00:00:00' DATETIME"`
	PostModifiedGmt     time.Time `xorm:"not null default '0000-00-00 00:00:00' DATETIME"`
	PostContentFiltered string    `xorm:"not null LONGTEXT"`
	PostParent          int64     `xorm:"not null default 0 index BIGINT(20)"`
	Guid                string    `xorm:"not null default '' VARCHAR(255)"`
	MenuOrder           int       `xorm:"not null default 0 INT(11)"`
	PostType            string    `xorm:"not null default 'post' index(TYPE_STATUS_DATE) VARCHAR(20)"`
	PostMimeType        string    `xorm:"not null default '' VARCHAR(100)"`
	CommentCount        int64     `xorm:"not null default 0 BIGINT(20)"`
}

// GetPostsesCount Postss' Count
func GetPostsesCount(offset int, limit int) (int64, error) {
	total, err := Engine.Limit(limit, offset).Count(&Posts{})
	return total, err
}

// GetPostsCountViaId Get Posts via Id
func GetPostsCountViaId(iId int64) int64 {
	n, _ := Engine.Where("ID = ?", iId).Count(&Posts{Id: iId})
	return n
}

// GetPostsCountViaPostAuthor Get Posts via PostAuthor
func GetPostsCountViaPostAuthor(iPostAuthor int64) int64 {
	n, _ := Engine.Where("post_author = ?", iPostAuthor).Count(&Posts{PostAuthor: iPostAuthor})
	return n
}

// GetPostsCountViaPostDate Get Posts via PostDate
func GetPostsCountViaPostDate(iPostDate time.Time) int64 {
	n, _ := Engine.Where("post_date = ?", iPostDate).Count(&Posts{PostDate: iPostDate})
	return n
}

// GetPostsCountViaPostDateGmt Get Posts via PostDateGmt
func GetPostsCountViaPostDateGmt(iPostDateGmt time.Time) int64 {
	n, _ := Engine.Where("post_date_gmt = ?", iPostDateGmt).Count(&Posts{PostDateGmt: iPostDateGmt})
	return n
}

// GetPostsCountViaPostContent Get Posts via PostContent
func GetPostsCountViaPostContent(iPostContent string) int64 {
	n, _ := Engine.Where("post_content = ?", iPostContent).Count(&Posts{PostContent: iPostContent})
	return n
}

// GetPostsCountViaPostTitle Get Posts via PostTitle
func GetPostsCountViaPostTitle(iPostTitle string) int64 {
	n, _ := Engine.Where("post_title = ?", iPostTitle).Count(&Posts{PostTitle: iPostTitle})
	return n
}

// GetPostsCountViaPostExcerpt Get Posts via PostExcerpt
func GetPostsCountViaPostExcerpt(iPostExcerpt string) int64 {
	n, _ := Engine.Where("post_excerpt = ?", iPostExcerpt).Count(&Posts{PostExcerpt: iPostExcerpt})
	return n
}

// GetPostsCountViaPostStatus Get Posts via PostStatus
func GetPostsCountViaPostStatus(iPostStatus string) int64 {
	n, _ := Engine.Where("post_status = ?", iPostStatus).Count(&Posts{PostStatus: iPostStatus})
	return n
}

// GetPostsCountViaCommentStatus Get Posts via CommentStatus
func GetPostsCountViaCommentStatus(iCommentStatus string) int64 {
	n, _ := Engine.Where("comment_status = ?", iCommentStatus).Count(&Posts{CommentStatus: iCommentStatus})
	return n
}

// GetPostsCountViaPingStatus Get Posts via PingStatus
func GetPostsCountViaPingStatus(iPingStatus string) int64 {
	n, _ := Engine.Where("ping_status = ?", iPingStatus).Count(&Posts{PingStatus: iPingStatus})
	return n
}

// GetPostsCountViaPostPassword Get Posts via PostPassword
func GetPostsCountViaPostPassword(iPostPassword string) int64 {
	n, _ := Engine.Where("post_password = ?", iPostPassword).Count(&Posts{PostPassword: iPostPassword})
	return n
}

// GetPostsCountViaPostName Get Posts via PostName
func GetPostsCountViaPostName(iPostName string) int64 {
	n, _ := Engine.Where("post_name = ?", iPostName).Count(&Posts{PostName: iPostName})
	return n
}

// GetPostsCountViaToPing Get Posts via ToPing
func GetPostsCountViaToPing(iToPing string) int64 {
	n, _ := Engine.Where("to_ping = ?", iToPing).Count(&Posts{ToPing: iToPing})
	return n
}

// GetPostsCountViaPinged Get Posts via Pinged
func GetPostsCountViaPinged(iPinged string) int64 {
	n, _ := Engine.Where("pinged = ?", iPinged).Count(&Posts{Pinged: iPinged})
	return n
}

// GetPostsCountViaPostModified Get Posts via PostModified
func GetPostsCountViaPostModified(iPostModified time.Time) int64 {
	n, _ := Engine.Where("post_modified = ?", iPostModified).Count(&Posts{PostModified: iPostModified})
	return n
}

// GetPostsCountViaPostModifiedGmt Get Posts via PostModifiedGmt
func GetPostsCountViaPostModifiedGmt(iPostModifiedGmt time.Time) int64 {
	n, _ := Engine.Where("post_modified_gmt = ?", iPostModifiedGmt).Count(&Posts{PostModifiedGmt: iPostModifiedGmt})
	return n
}

// GetPostsCountViaPostContentFiltered Get Posts via PostContentFiltered
func GetPostsCountViaPostContentFiltered(iPostContentFiltered string) int64 {
	n, _ := Engine.Where("post_content_filtered = ?", iPostContentFiltered).Count(&Posts{PostContentFiltered: iPostContentFiltered})
	return n
}

// GetPostsCountViaPostParent Get Posts via PostParent
func GetPostsCountViaPostParent(iPostParent int64) int64 {
	n, _ := Engine.Where("post_parent = ?", iPostParent).Count(&Posts{PostParent: iPostParent})
	return n
}

// GetPostsCountViaGuid Get Posts via Guid
func GetPostsCountViaGuid(iGuid string) int64 {
	n, _ := Engine.Where("guid = ?", iGuid).Count(&Posts{Guid: iGuid})
	return n
}

// GetPostsCountViaMenuOrder Get Posts via MenuOrder
func GetPostsCountViaMenuOrder(iMenuOrder int) int64 {
	n, _ := Engine.Where("menu_order = ?", iMenuOrder).Count(&Posts{MenuOrder: iMenuOrder})
	return n
}

// GetPostsCountViaPostType Get Posts via PostType
func GetPostsCountViaPostType(iPostType string) int64 {
	n, _ := Engine.Where("post_type = ?", iPostType).Count(&Posts{PostType: iPostType})
	return n
}

// GetPostsCountViaPostMimeType Get Posts via PostMimeType
func GetPostsCountViaPostMimeType(iPostMimeType string) int64 {
	n, _ := Engine.Where("post_mime_type = ?", iPostMimeType).Count(&Posts{PostMimeType: iPostMimeType})
	return n
}

// GetPostsCountViaCommentCount Get Posts via CommentCount
func GetPostsCountViaCommentCount(iCommentCount int64) int64 {
	n, _ := Engine.Where("comment_count = ?", iCommentCount).Count(&Posts{CommentCount: iCommentCount})
	return n
}

// GetPostsesByIdAndPostAuthorAndPostDate Get Postses via IdAndPostAuthorAndPostDate
func GetPostsesByIdAndPostAuthorAndPostDate(offset int, limit int, Id_ int64, PostAuthor_ int64, PostDate_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_date = ?", Id_, PostAuthor_, PostDate_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostDateGmt Get Postses via IdAndPostAuthorAndPostDateGmt
func GetPostsesByIdAndPostAuthorAndPostDateGmt(offset int, limit int, Id_ int64, PostAuthor_ int64, PostDateGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_date_gmt = ?", Id_, PostAuthor_, PostDateGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostContent Get Postses via IdAndPostAuthorAndPostContent
func GetPostsesByIdAndPostAuthorAndPostContent(offset int, limit int, Id_ int64, PostAuthor_ int64, PostContent_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_content = ?", Id_, PostAuthor_, PostContent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostTitle Get Postses via IdAndPostAuthorAndPostTitle
func GetPostsesByIdAndPostAuthorAndPostTitle(offset int, limit int, Id_ int64, PostAuthor_ int64, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_title = ?", Id_, PostAuthor_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostExcerpt Get Postses via IdAndPostAuthorAndPostExcerpt
func GetPostsesByIdAndPostAuthorAndPostExcerpt(offset int, limit int, Id_ int64, PostAuthor_ int64, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_excerpt = ?", Id_, PostAuthor_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostStatus Get Postses via IdAndPostAuthorAndPostStatus
func GetPostsesByIdAndPostAuthorAndPostStatus(offset int, limit int, Id_ int64, PostAuthor_ int64, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_status = ?", Id_, PostAuthor_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndCommentStatus Get Postses via IdAndPostAuthorAndCommentStatus
func GetPostsesByIdAndPostAuthorAndCommentStatus(offset int, limit int, Id_ int64, PostAuthor_ int64, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and comment_status = ?", Id_, PostAuthor_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPingStatus Get Postses via IdAndPostAuthorAndPingStatus
func GetPostsesByIdAndPostAuthorAndPingStatus(offset int, limit int, Id_ int64, PostAuthor_ int64, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and ping_status = ?", Id_, PostAuthor_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostPassword Get Postses via IdAndPostAuthorAndPostPassword
func GetPostsesByIdAndPostAuthorAndPostPassword(offset int, limit int, Id_ int64, PostAuthor_ int64, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_password = ?", Id_, PostAuthor_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostName Get Postses via IdAndPostAuthorAndPostName
func GetPostsesByIdAndPostAuthorAndPostName(offset int, limit int, Id_ int64, PostAuthor_ int64, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_name = ?", Id_, PostAuthor_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndToPing Get Postses via IdAndPostAuthorAndToPing
func GetPostsesByIdAndPostAuthorAndToPing(offset int, limit int, Id_ int64, PostAuthor_ int64, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and to_ping = ?", Id_, PostAuthor_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPinged Get Postses via IdAndPostAuthorAndPinged
func GetPostsesByIdAndPostAuthorAndPinged(offset int, limit int, Id_ int64, PostAuthor_ int64, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and pinged = ?", Id_, PostAuthor_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostModified Get Postses via IdAndPostAuthorAndPostModified
func GetPostsesByIdAndPostAuthorAndPostModified(offset int, limit int, Id_ int64, PostAuthor_ int64, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_modified = ?", Id_, PostAuthor_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostModifiedGmt Get Postses via IdAndPostAuthorAndPostModifiedGmt
func GetPostsesByIdAndPostAuthorAndPostModifiedGmt(offset int, limit int, Id_ int64, PostAuthor_ int64, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_modified_gmt = ?", Id_, PostAuthor_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostContentFiltered Get Postses via IdAndPostAuthorAndPostContentFiltered
func GetPostsesByIdAndPostAuthorAndPostContentFiltered(offset int, limit int, Id_ int64, PostAuthor_ int64, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_content_filtered = ?", Id_, PostAuthor_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostParent Get Postses via IdAndPostAuthorAndPostParent
func GetPostsesByIdAndPostAuthorAndPostParent(offset int, limit int, Id_ int64, PostAuthor_ int64, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_parent = ?", Id_, PostAuthor_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndGuid Get Postses via IdAndPostAuthorAndGuid
func GetPostsesByIdAndPostAuthorAndGuid(offset int, limit int, Id_ int64, PostAuthor_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and guid = ?", Id_, PostAuthor_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndMenuOrder Get Postses via IdAndPostAuthorAndMenuOrder
func GetPostsesByIdAndPostAuthorAndMenuOrder(offset int, limit int, Id_ int64, PostAuthor_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and menu_order = ?", Id_, PostAuthor_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostType Get Postses via IdAndPostAuthorAndPostType
func GetPostsesByIdAndPostAuthorAndPostType(offset int, limit int, Id_ int64, PostAuthor_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_type = ?", Id_, PostAuthor_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndPostMimeType Get Postses via IdAndPostAuthorAndPostMimeType
func GetPostsesByIdAndPostAuthorAndPostMimeType(offset int, limit int, Id_ int64, PostAuthor_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and post_mime_type = ?", Id_, PostAuthor_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthorAndCommentCount Get Postses via IdAndPostAuthorAndCommentCount
func GetPostsesByIdAndPostAuthorAndCommentCount(offset int, limit int, Id_ int64, PostAuthor_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ? and comment_count = ?", Id_, PostAuthor_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostDateGmt Get Postses via IdAndPostDateAndPostDateGmt
func GetPostsesByIdAndPostDateAndPostDateGmt(offset int, limit int, Id_ int64, PostDate_ time.Time, PostDateGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_date_gmt = ?", Id_, PostDate_, PostDateGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostContent Get Postses via IdAndPostDateAndPostContent
func GetPostsesByIdAndPostDateAndPostContent(offset int, limit int, Id_ int64, PostDate_ time.Time, PostContent_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_content = ?", Id_, PostDate_, PostContent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostTitle Get Postses via IdAndPostDateAndPostTitle
func GetPostsesByIdAndPostDateAndPostTitle(offset int, limit int, Id_ int64, PostDate_ time.Time, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_title = ?", Id_, PostDate_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostExcerpt Get Postses via IdAndPostDateAndPostExcerpt
func GetPostsesByIdAndPostDateAndPostExcerpt(offset int, limit int, Id_ int64, PostDate_ time.Time, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_excerpt = ?", Id_, PostDate_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostStatus Get Postses via IdAndPostDateAndPostStatus
func GetPostsesByIdAndPostDateAndPostStatus(offset int, limit int, Id_ int64, PostDate_ time.Time, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_status = ?", Id_, PostDate_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndCommentStatus Get Postses via IdAndPostDateAndCommentStatus
func GetPostsesByIdAndPostDateAndCommentStatus(offset int, limit int, Id_ int64, PostDate_ time.Time, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and comment_status = ?", Id_, PostDate_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPingStatus Get Postses via IdAndPostDateAndPingStatus
func GetPostsesByIdAndPostDateAndPingStatus(offset int, limit int, Id_ int64, PostDate_ time.Time, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and ping_status = ?", Id_, PostDate_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostPassword Get Postses via IdAndPostDateAndPostPassword
func GetPostsesByIdAndPostDateAndPostPassword(offset int, limit int, Id_ int64, PostDate_ time.Time, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_password = ?", Id_, PostDate_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostName Get Postses via IdAndPostDateAndPostName
func GetPostsesByIdAndPostDateAndPostName(offset int, limit int, Id_ int64, PostDate_ time.Time, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_name = ?", Id_, PostDate_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndToPing Get Postses via IdAndPostDateAndToPing
func GetPostsesByIdAndPostDateAndToPing(offset int, limit int, Id_ int64, PostDate_ time.Time, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and to_ping = ?", Id_, PostDate_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPinged Get Postses via IdAndPostDateAndPinged
func GetPostsesByIdAndPostDateAndPinged(offset int, limit int, Id_ int64, PostDate_ time.Time, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and pinged = ?", Id_, PostDate_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostModified Get Postses via IdAndPostDateAndPostModified
func GetPostsesByIdAndPostDateAndPostModified(offset int, limit int, Id_ int64, PostDate_ time.Time, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_modified = ?", Id_, PostDate_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostModifiedGmt Get Postses via IdAndPostDateAndPostModifiedGmt
func GetPostsesByIdAndPostDateAndPostModifiedGmt(offset int, limit int, Id_ int64, PostDate_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_modified_gmt = ?", Id_, PostDate_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostContentFiltered Get Postses via IdAndPostDateAndPostContentFiltered
func GetPostsesByIdAndPostDateAndPostContentFiltered(offset int, limit int, Id_ int64, PostDate_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_content_filtered = ?", Id_, PostDate_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostParent Get Postses via IdAndPostDateAndPostParent
func GetPostsesByIdAndPostDateAndPostParent(offset int, limit int, Id_ int64, PostDate_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_parent = ?", Id_, PostDate_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndGuid Get Postses via IdAndPostDateAndGuid
func GetPostsesByIdAndPostDateAndGuid(offset int, limit int, Id_ int64, PostDate_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and guid = ?", Id_, PostDate_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndMenuOrder Get Postses via IdAndPostDateAndMenuOrder
func GetPostsesByIdAndPostDateAndMenuOrder(offset int, limit int, Id_ int64, PostDate_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and menu_order = ?", Id_, PostDate_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostType Get Postses via IdAndPostDateAndPostType
func GetPostsesByIdAndPostDateAndPostType(offset int, limit int, Id_ int64, PostDate_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_type = ?", Id_, PostDate_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndPostMimeType Get Postses via IdAndPostDateAndPostMimeType
func GetPostsesByIdAndPostDateAndPostMimeType(offset int, limit int, Id_ int64, PostDate_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and post_mime_type = ?", Id_, PostDate_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateAndCommentCount Get Postses via IdAndPostDateAndCommentCount
func GetPostsesByIdAndPostDateAndCommentCount(offset int, limit int, Id_ int64, PostDate_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ? and comment_count = ?", Id_, PostDate_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostContent Get Postses via IdAndPostDateGmtAndPostContent
func GetPostsesByIdAndPostDateGmtAndPostContent(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostContent_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_content = ?", Id_, PostDateGmt_, PostContent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostTitle Get Postses via IdAndPostDateGmtAndPostTitle
func GetPostsesByIdAndPostDateGmtAndPostTitle(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_title = ?", Id_, PostDateGmt_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostExcerpt Get Postses via IdAndPostDateGmtAndPostExcerpt
func GetPostsesByIdAndPostDateGmtAndPostExcerpt(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_excerpt = ?", Id_, PostDateGmt_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostStatus Get Postses via IdAndPostDateGmtAndPostStatus
func GetPostsesByIdAndPostDateGmtAndPostStatus(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_status = ?", Id_, PostDateGmt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndCommentStatus Get Postses via IdAndPostDateGmtAndCommentStatus
func GetPostsesByIdAndPostDateGmtAndCommentStatus(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and comment_status = ?", Id_, PostDateGmt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPingStatus Get Postses via IdAndPostDateGmtAndPingStatus
func GetPostsesByIdAndPostDateGmtAndPingStatus(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and ping_status = ?", Id_, PostDateGmt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostPassword Get Postses via IdAndPostDateGmtAndPostPassword
func GetPostsesByIdAndPostDateGmtAndPostPassword(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_password = ?", Id_, PostDateGmt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostName Get Postses via IdAndPostDateGmtAndPostName
func GetPostsesByIdAndPostDateGmtAndPostName(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_name = ?", Id_, PostDateGmt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndToPing Get Postses via IdAndPostDateGmtAndToPing
func GetPostsesByIdAndPostDateGmtAndToPing(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and to_ping = ?", Id_, PostDateGmt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPinged Get Postses via IdAndPostDateGmtAndPinged
func GetPostsesByIdAndPostDateGmtAndPinged(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and pinged = ?", Id_, PostDateGmt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostModified Get Postses via IdAndPostDateGmtAndPostModified
func GetPostsesByIdAndPostDateGmtAndPostModified(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_modified = ?", Id_, PostDateGmt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostModifiedGmt Get Postses via IdAndPostDateGmtAndPostModifiedGmt
func GetPostsesByIdAndPostDateGmtAndPostModifiedGmt(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_modified_gmt = ?", Id_, PostDateGmt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostContentFiltered Get Postses via IdAndPostDateGmtAndPostContentFiltered
func GetPostsesByIdAndPostDateGmtAndPostContentFiltered(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_content_filtered = ?", Id_, PostDateGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostParent Get Postses via IdAndPostDateGmtAndPostParent
func GetPostsesByIdAndPostDateGmtAndPostParent(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_parent = ?", Id_, PostDateGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndGuid Get Postses via IdAndPostDateGmtAndGuid
func GetPostsesByIdAndPostDateGmtAndGuid(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and guid = ?", Id_, PostDateGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndMenuOrder Get Postses via IdAndPostDateGmtAndMenuOrder
func GetPostsesByIdAndPostDateGmtAndMenuOrder(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and menu_order = ?", Id_, PostDateGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostType Get Postses via IdAndPostDateGmtAndPostType
func GetPostsesByIdAndPostDateGmtAndPostType(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_type = ?", Id_, PostDateGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndPostMimeType Get Postses via IdAndPostDateGmtAndPostMimeType
func GetPostsesByIdAndPostDateGmtAndPostMimeType(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and post_mime_type = ?", Id_, PostDateGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmtAndCommentCount Get Postses via IdAndPostDateGmtAndCommentCount
func GetPostsesByIdAndPostDateGmtAndCommentCount(offset int, limit int, Id_ int64, PostDateGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ? and comment_count = ?", Id_, PostDateGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostTitle Get Postses via IdAndPostContentAndPostTitle
func GetPostsesByIdAndPostContentAndPostTitle(offset int, limit int, Id_ int64, PostContent_ string, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_title = ?", Id_, PostContent_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostExcerpt Get Postses via IdAndPostContentAndPostExcerpt
func GetPostsesByIdAndPostContentAndPostExcerpt(offset int, limit int, Id_ int64, PostContent_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_excerpt = ?", Id_, PostContent_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostStatus Get Postses via IdAndPostContentAndPostStatus
func GetPostsesByIdAndPostContentAndPostStatus(offset int, limit int, Id_ int64, PostContent_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_status = ?", Id_, PostContent_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndCommentStatus Get Postses via IdAndPostContentAndCommentStatus
func GetPostsesByIdAndPostContentAndCommentStatus(offset int, limit int, Id_ int64, PostContent_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and comment_status = ?", Id_, PostContent_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPingStatus Get Postses via IdAndPostContentAndPingStatus
func GetPostsesByIdAndPostContentAndPingStatus(offset int, limit int, Id_ int64, PostContent_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and ping_status = ?", Id_, PostContent_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostPassword Get Postses via IdAndPostContentAndPostPassword
func GetPostsesByIdAndPostContentAndPostPassword(offset int, limit int, Id_ int64, PostContent_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_password = ?", Id_, PostContent_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostName Get Postses via IdAndPostContentAndPostName
func GetPostsesByIdAndPostContentAndPostName(offset int, limit int, Id_ int64, PostContent_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_name = ?", Id_, PostContent_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndToPing Get Postses via IdAndPostContentAndToPing
func GetPostsesByIdAndPostContentAndToPing(offset int, limit int, Id_ int64, PostContent_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and to_ping = ?", Id_, PostContent_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPinged Get Postses via IdAndPostContentAndPinged
func GetPostsesByIdAndPostContentAndPinged(offset int, limit int, Id_ int64, PostContent_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and pinged = ?", Id_, PostContent_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostModified Get Postses via IdAndPostContentAndPostModified
func GetPostsesByIdAndPostContentAndPostModified(offset int, limit int, Id_ int64, PostContent_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_modified = ?", Id_, PostContent_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostModifiedGmt Get Postses via IdAndPostContentAndPostModifiedGmt
func GetPostsesByIdAndPostContentAndPostModifiedGmt(offset int, limit int, Id_ int64, PostContent_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_modified_gmt = ?", Id_, PostContent_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostContentFiltered Get Postses via IdAndPostContentAndPostContentFiltered
func GetPostsesByIdAndPostContentAndPostContentFiltered(offset int, limit int, Id_ int64, PostContent_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_content_filtered = ?", Id_, PostContent_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostParent Get Postses via IdAndPostContentAndPostParent
func GetPostsesByIdAndPostContentAndPostParent(offset int, limit int, Id_ int64, PostContent_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_parent = ?", Id_, PostContent_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndGuid Get Postses via IdAndPostContentAndGuid
func GetPostsesByIdAndPostContentAndGuid(offset int, limit int, Id_ int64, PostContent_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and guid = ?", Id_, PostContent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndMenuOrder Get Postses via IdAndPostContentAndMenuOrder
func GetPostsesByIdAndPostContentAndMenuOrder(offset int, limit int, Id_ int64, PostContent_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and menu_order = ?", Id_, PostContent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostType Get Postses via IdAndPostContentAndPostType
func GetPostsesByIdAndPostContentAndPostType(offset int, limit int, Id_ int64, PostContent_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_type = ?", Id_, PostContent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndPostMimeType Get Postses via IdAndPostContentAndPostMimeType
func GetPostsesByIdAndPostContentAndPostMimeType(offset int, limit int, Id_ int64, PostContent_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and post_mime_type = ?", Id_, PostContent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentAndCommentCount Get Postses via IdAndPostContentAndCommentCount
func GetPostsesByIdAndPostContentAndCommentCount(offset int, limit int, Id_ int64, PostContent_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ? and comment_count = ?", Id_, PostContent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPostExcerpt Get Postses via IdAndPostTitleAndPostExcerpt
func GetPostsesByIdAndPostTitleAndPostExcerpt(offset int, limit int, Id_ int64, PostTitle_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and post_excerpt = ?", Id_, PostTitle_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPostStatus Get Postses via IdAndPostTitleAndPostStatus
func GetPostsesByIdAndPostTitleAndPostStatus(offset int, limit int, Id_ int64, PostTitle_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and post_status = ?", Id_, PostTitle_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndCommentStatus Get Postses via IdAndPostTitleAndCommentStatus
func GetPostsesByIdAndPostTitleAndCommentStatus(offset int, limit int, Id_ int64, PostTitle_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and comment_status = ?", Id_, PostTitle_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPingStatus Get Postses via IdAndPostTitleAndPingStatus
func GetPostsesByIdAndPostTitleAndPingStatus(offset int, limit int, Id_ int64, PostTitle_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and ping_status = ?", Id_, PostTitle_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPostPassword Get Postses via IdAndPostTitleAndPostPassword
func GetPostsesByIdAndPostTitleAndPostPassword(offset int, limit int, Id_ int64, PostTitle_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and post_password = ?", Id_, PostTitle_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPostName Get Postses via IdAndPostTitleAndPostName
func GetPostsesByIdAndPostTitleAndPostName(offset int, limit int, Id_ int64, PostTitle_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and post_name = ?", Id_, PostTitle_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndToPing Get Postses via IdAndPostTitleAndToPing
func GetPostsesByIdAndPostTitleAndToPing(offset int, limit int, Id_ int64, PostTitle_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and to_ping = ?", Id_, PostTitle_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPinged Get Postses via IdAndPostTitleAndPinged
func GetPostsesByIdAndPostTitleAndPinged(offset int, limit int, Id_ int64, PostTitle_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and pinged = ?", Id_, PostTitle_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPostModified Get Postses via IdAndPostTitleAndPostModified
func GetPostsesByIdAndPostTitleAndPostModified(offset int, limit int, Id_ int64, PostTitle_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and post_modified = ?", Id_, PostTitle_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPostModifiedGmt Get Postses via IdAndPostTitleAndPostModifiedGmt
func GetPostsesByIdAndPostTitleAndPostModifiedGmt(offset int, limit int, Id_ int64, PostTitle_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and post_modified_gmt = ?", Id_, PostTitle_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPostContentFiltered Get Postses via IdAndPostTitleAndPostContentFiltered
func GetPostsesByIdAndPostTitleAndPostContentFiltered(offset int, limit int, Id_ int64, PostTitle_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and post_content_filtered = ?", Id_, PostTitle_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPostParent Get Postses via IdAndPostTitleAndPostParent
func GetPostsesByIdAndPostTitleAndPostParent(offset int, limit int, Id_ int64, PostTitle_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and post_parent = ?", Id_, PostTitle_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndGuid Get Postses via IdAndPostTitleAndGuid
func GetPostsesByIdAndPostTitleAndGuid(offset int, limit int, Id_ int64, PostTitle_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and guid = ?", Id_, PostTitle_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndMenuOrder Get Postses via IdAndPostTitleAndMenuOrder
func GetPostsesByIdAndPostTitleAndMenuOrder(offset int, limit int, Id_ int64, PostTitle_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and menu_order = ?", Id_, PostTitle_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPostType Get Postses via IdAndPostTitleAndPostType
func GetPostsesByIdAndPostTitleAndPostType(offset int, limit int, Id_ int64, PostTitle_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and post_type = ?", Id_, PostTitle_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndPostMimeType Get Postses via IdAndPostTitleAndPostMimeType
func GetPostsesByIdAndPostTitleAndPostMimeType(offset int, limit int, Id_ int64, PostTitle_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and post_mime_type = ?", Id_, PostTitle_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitleAndCommentCount Get Postses via IdAndPostTitleAndCommentCount
func GetPostsesByIdAndPostTitleAndCommentCount(offset int, limit int, Id_ int64, PostTitle_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ? and comment_count = ?", Id_, PostTitle_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPostStatus Get Postses via IdAndPostExcerptAndPostStatus
func GetPostsesByIdAndPostExcerptAndPostStatus(offset int, limit int, Id_ int64, PostExcerpt_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and post_status = ?", Id_, PostExcerpt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndCommentStatus Get Postses via IdAndPostExcerptAndCommentStatus
func GetPostsesByIdAndPostExcerptAndCommentStatus(offset int, limit int, Id_ int64, PostExcerpt_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and comment_status = ?", Id_, PostExcerpt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPingStatus Get Postses via IdAndPostExcerptAndPingStatus
func GetPostsesByIdAndPostExcerptAndPingStatus(offset int, limit int, Id_ int64, PostExcerpt_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and ping_status = ?", Id_, PostExcerpt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPostPassword Get Postses via IdAndPostExcerptAndPostPassword
func GetPostsesByIdAndPostExcerptAndPostPassword(offset int, limit int, Id_ int64, PostExcerpt_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and post_password = ?", Id_, PostExcerpt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPostName Get Postses via IdAndPostExcerptAndPostName
func GetPostsesByIdAndPostExcerptAndPostName(offset int, limit int, Id_ int64, PostExcerpt_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and post_name = ?", Id_, PostExcerpt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndToPing Get Postses via IdAndPostExcerptAndToPing
func GetPostsesByIdAndPostExcerptAndToPing(offset int, limit int, Id_ int64, PostExcerpt_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and to_ping = ?", Id_, PostExcerpt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPinged Get Postses via IdAndPostExcerptAndPinged
func GetPostsesByIdAndPostExcerptAndPinged(offset int, limit int, Id_ int64, PostExcerpt_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and pinged = ?", Id_, PostExcerpt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPostModified Get Postses via IdAndPostExcerptAndPostModified
func GetPostsesByIdAndPostExcerptAndPostModified(offset int, limit int, Id_ int64, PostExcerpt_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and post_modified = ?", Id_, PostExcerpt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPostModifiedGmt Get Postses via IdAndPostExcerptAndPostModifiedGmt
func GetPostsesByIdAndPostExcerptAndPostModifiedGmt(offset int, limit int, Id_ int64, PostExcerpt_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and post_modified_gmt = ?", Id_, PostExcerpt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPostContentFiltered Get Postses via IdAndPostExcerptAndPostContentFiltered
func GetPostsesByIdAndPostExcerptAndPostContentFiltered(offset int, limit int, Id_ int64, PostExcerpt_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and post_content_filtered = ?", Id_, PostExcerpt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPostParent Get Postses via IdAndPostExcerptAndPostParent
func GetPostsesByIdAndPostExcerptAndPostParent(offset int, limit int, Id_ int64, PostExcerpt_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and post_parent = ?", Id_, PostExcerpt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndGuid Get Postses via IdAndPostExcerptAndGuid
func GetPostsesByIdAndPostExcerptAndGuid(offset int, limit int, Id_ int64, PostExcerpt_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and guid = ?", Id_, PostExcerpt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndMenuOrder Get Postses via IdAndPostExcerptAndMenuOrder
func GetPostsesByIdAndPostExcerptAndMenuOrder(offset int, limit int, Id_ int64, PostExcerpt_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and menu_order = ?", Id_, PostExcerpt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPostType Get Postses via IdAndPostExcerptAndPostType
func GetPostsesByIdAndPostExcerptAndPostType(offset int, limit int, Id_ int64, PostExcerpt_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and post_type = ?", Id_, PostExcerpt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndPostMimeType Get Postses via IdAndPostExcerptAndPostMimeType
func GetPostsesByIdAndPostExcerptAndPostMimeType(offset int, limit int, Id_ int64, PostExcerpt_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and post_mime_type = ?", Id_, PostExcerpt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerptAndCommentCount Get Postses via IdAndPostExcerptAndCommentCount
func GetPostsesByIdAndPostExcerptAndCommentCount(offset int, limit int, Id_ int64, PostExcerpt_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ? and comment_count = ?", Id_, PostExcerpt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndCommentStatus Get Postses via IdAndPostStatusAndCommentStatus
func GetPostsesByIdAndPostStatusAndCommentStatus(offset int, limit int, Id_ int64, PostStatus_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and comment_status = ?", Id_, PostStatus_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndPingStatus Get Postses via IdAndPostStatusAndPingStatus
func GetPostsesByIdAndPostStatusAndPingStatus(offset int, limit int, Id_ int64, PostStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and ping_status = ?", Id_, PostStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndPostPassword Get Postses via IdAndPostStatusAndPostPassword
func GetPostsesByIdAndPostStatusAndPostPassword(offset int, limit int, Id_ int64, PostStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and post_password = ?", Id_, PostStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndPostName Get Postses via IdAndPostStatusAndPostName
func GetPostsesByIdAndPostStatusAndPostName(offset int, limit int, Id_ int64, PostStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and post_name = ?", Id_, PostStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndToPing Get Postses via IdAndPostStatusAndToPing
func GetPostsesByIdAndPostStatusAndToPing(offset int, limit int, Id_ int64, PostStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and to_ping = ?", Id_, PostStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndPinged Get Postses via IdAndPostStatusAndPinged
func GetPostsesByIdAndPostStatusAndPinged(offset int, limit int, Id_ int64, PostStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and pinged = ?", Id_, PostStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndPostModified Get Postses via IdAndPostStatusAndPostModified
func GetPostsesByIdAndPostStatusAndPostModified(offset int, limit int, Id_ int64, PostStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and post_modified = ?", Id_, PostStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndPostModifiedGmt Get Postses via IdAndPostStatusAndPostModifiedGmt
func GetPostsesByIdAndPostStatusAndPostModifiedGmt(offset int, limit int, Id_ int64, PostStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and post_modified_gmt = ?", Id_, PostStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndPostContentFiltered Get Postses via IdAndPostStatusAndPostContentFiltered
func GetPostsesByIdAndPostStatusAndPostContentFiltered(offset int, limit int, Id_ int64, PostStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and post_content_filtered = ?", Id_, PostStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndPostParent Get Postses via IdAndPostStatusAndPostParent
func GetPostsesByIdAndPostStatusAndPostParent(offset int, limit int, Id_ int64, PostStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and post_parent = ?", Id_, PostStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndGuid Get Postses via IdAndPostStatusAndGuid
func GetPostsesByIdAndPostStatusAndGuid(offset int, limit int, Id_ int64, PostStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and guid = ?", Id_, PostStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndMenuOrder Get Postses via IdAndPostStatusAndMenuOrder
func GetPostsesByIdAndPostStatusAndMenuOrder(offset int, limit int, Id_ int64, PostStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and menu_order = ?", Id_, PostStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndPostType Get Postses via IdAndPostStatusAndPostType
func GetPostsesByIdAndPostStatusAndPostType(offset int, limit int, Id_ int64, PostStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and post_type = ?", Id_, PostStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndPostMimeType Get Postses via IdAndPostStatusAndPostMimeType
func GetPostsesByIdAndPostStatusAndPostMimeType(offset int, limit int, Id_ int64, PostStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and post_mime_type = ?", Id_, PostStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatusAndCommentCount Get Postses via IdAndPostStatusAndCommentCount
func GetPostsesByIdAndPostStatusAndCommentCount(offset int, limit int, Id_ int64, PostStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ? and comment_count = ?", Id_, PostStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndPingStatus Get Postses via IdAndCommentStatusAndPingStatus
func GetPostsesByIdAndCommentStatusAndPingStatus(offset int, limit int, Id_ int64, CommentStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and ping_status = ?", Id_, CommentStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndPostPassword Get Postses via IdAndCommentStatusAndPostPassword
func GetPostsesByIdAndCommentStatusAndPostPassword(offset int, limit int, Id_ int64, CommentStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and post_password = ?", Id_, CommentStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndPostName Get Postses via IdAndCommentStatusAndPostName
func GetPostsesByIdAndCommentStatusAndPostName(offset int, limit int, Id_ int64, CommentStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and post_name = ?", Id_, CommentStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndToPing Get Postses via IdAndCommentStatusAndToPing
func GetPostsesByIdAndCommentStatusAndToPing(offset int, limit int, Id_ int64, CommentStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and to_ping = ?", Id_, CommentStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndPinged Get Postses via IdAndCommentStatusAndPinged
func GetPostsesByIdAndCommentStatusAndPinged(offset int, limit int, Id_ int64, CommentStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and pinged = ?", Id_, CommentStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndPostModified Get Postses via IdAndCommentStatusAndPostModified
func GetPostsesByIdAndCommentStatusAndPostModified(offset int, limit int, Id_ int64, CommentStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and post_modified = ?", Id_, CommentStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndPostModifiedGmt Get Postses via IdAndCommentStatusAndPostModifiedGmt
func GetPostsesByIdAndCommentStatusAndPostModifiedGmt(offset int, limit int, Id_ int64, CommentStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and post_modified_gmt = ?", Id_, CommentStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndPostContentFiltered Get Postses via IdAndCommentStatusAndPostContentFiltered
func GetPostsesByIdAndCommentStatusAndPostContentFiltered(offset int, limit int, Id_ int64, CommentStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and post_content_filtered = ?", Id_, CommentStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndPostParent Get Postses via IdAndCommentStatusAndPostParent
func GetPostsesByIdAndCommentStatusAndPostParent(offset int, limit int, Id_ int64, CommentStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and post_parent = ?", Id_, CommentStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndGuid Get Postses via IdAndCommentStatusAndGuid
func GetPostsesByIdAndCommentStatusAndGuid(offset int, limit int, Id_ int64, CommentStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and guid = ?", Id_, CommentStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndMenuOrder Get Postses via IdAndCommentStatusAndMenuOrder
func GetPostsesByIdAndCommentStatusAndMenuOrder(offset int, limit int, Id_ int64, CommentStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and menu_order = ?", Id_, CommentStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndPostType Get Postses via IdAndCommentStatusAndPostType
func GetPostsesByIdAndCommentStatusAndPostType(offset int, limit int, Id_ int64, CommentStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and post_type = ?", Id_, CommentStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndPostMimeType Get Postses via IdAndCommentStatusAndPostMimeType
func GetPostsesByIdAndCommentStatusAndPostMimeType(offset int, limit int, Id_ int64, CommentStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and post_mime_type = ?", Id_, CommentStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatusAndCommentCount Get Postses via IdAndCommentStatusAndCommentCount
func GetPostsesByIdAndCommentStatusAndCommentCount(offset int, limit int, Id_ int64, CommentStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ? and comment_count = ?", Id_, CommentStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndPostPassword Get Postses via IdAndPingStatusAndPostPassword
func GetPostsesByIdAndPingStatusAndPostPassword(offset int, limit int, Id_ int64, PingStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and post_password = ?", Id_, PingStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndPostName Get Postses via IdAndPingStatusAndPostName
func GetPostsesByIdAndPingStatusAndPostName(offset int, limit int, Id_ int64, PingStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and post_name = ?", Id_, PingStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndToPing Get Postses via IdAndPingStatusAndToPing
func GetPostsesByIdAndPingStatusAndToPing(offset int, limit int, Id_ int64, PingStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and to_ping = ?", Id_, PingStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndPinged Get Postses via IdAndPingStatusAndPinged
func GetPostsesByIdAndPingStatusAndPinged(offset int, limit int, Id_ int64, PingStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and pinged = ?", Id_, PingStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndPostModified Get Postses via IdAndPingStatusAndPostModified
func GetPostsesByIdAndPingStatusAndPostModified(offset int, limit int, Id_ int64, PingStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and post_modified = ?", Id_, PingStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndPostModifiedGmt Get Postses via IdAndPingStatusAndPostModifiedGmt
func GetPostsesByIdAndPingStatusAndPostModifiedGmt(offset int, limit int, Id_ int64, PingStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and post_modified_gmt = ?", Id_, PingStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndPostContentFiltered Get Postses via IdAndPingStatusAndPostContentFiltered
func GetPostsesByIdAndPingStatusAndPostContentFiltered(offset int, limit int, Id_ int64, PingStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and post_content_filtered = ?", Id_, PingStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndPostParent Get Postses via IdAndPingStatusAndPostParent
func GetPostsesByIdAndPingStatusAndPostParent(offset int, limit int, Id_ int64, PingStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and post_parent = ?", Id_, PingStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndGuid Get Postses via IdAndPingStatusAndGuid
func GetPostsesByIdAndPingStatusAndGuid(offset int, limit int, Id_ int64, PingStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and guid = ?", Id_, PingStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndMenuOrder Get Postses via IdAndPingStatusAndMenuOrder
func GetPostsesByIdAndPingStatusAndMenuOrder(offset int, limit int, Id_ int64, PingStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and menu_order = ?", Id_, PingStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndPostType Get Postses via IdAndPingStatusAndPostType
func GetPostsesByIdAndPingStatusAndPostType(offset int, limit int, Id_ int64, PingStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and post_type = ?", Id_, PingStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndPostMimeType Get Postses via IdAndPingStatusAndPostMimeType
func GetPostsesByIdAndPingStatusAndPostMimeType(offset int, limit int, Id_ int64, PingStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and post_mime_type = ?", Id_, PingStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatusAndCommentCount Get Postses via IdAndPingStatusAndCommentCount
func GetPostsesByIdAndPingStatusAndCommentCount(offset int, limit int, Id_ int64, PingStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ? and comment_count = ?", Id_, PingStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndPostName Get Postses via IdAndPostPasswordAndPostName
func GetPostsesByIdAndPostPasswordAndPostName(offset int, limit int, Id_ int64, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and post_name = ?", Id_, PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndToPing Get Postses via IdAndPostPasswordAndToPing
func GetPostsesByIdAndPostPasswordAndToPing(offset int, limit int, Id_ int64, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and to_ping = ?", Id_, PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndPinged Get Postses via IdAndPostPasswordAndPinged
func GetPostsesByIdAndPostPasswordAndPinged(offset int, limit int, Id_ int64, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and pinged = ?", Id_, PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndPostModified Get Postses via IdAndPostPasswordAndPostModified
func GetPostsesByIdAndPostPasswordAndPostModified(offset int, limit int, Id_ int64, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and post_modified = ?", Id_, PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndPostModifiedGmt Get Postses via IdAndPostPasswordAndPostModifiedGmt
func GetPostsesByIdAndPostPasswordAndPostModifiedGmt(offset int, limit int, Id_ int64, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and post_modified_gmt = ?", Id_, PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndPostContentFiltered Get Postses via IdAndPostPasswordAndPostContentFiltered
func GetPostsesByIdAndPostPasswordAndPostContentFiltered(offset int, limit int, Id_ int64, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and post_content_filtered = ?", Id_, PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndPostParent Get Postses via IdAndPostPasswordAndPostParent
func GetPostsesByIdAndPostPasswordAndPostParent(offset int, limit int, Id_ int64, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and post_parent = ?", Id_, PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndGuid Get Postses via IdAndPostPasswordAndGuid
func GetPostsesByIdAndPostPasswordAndGuid(offset int, limit int, Id_ int64, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and guid = ?", Id_, PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndMenuOrder Get Postses via IdAndPostPasswordAndMenuOrder
func GetPostsesByIdAndPostPasswordAndMenuOrder(offset int, limit int, Id_ int64, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and menu_order = ?", Id_, PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndPostType Get Postses via IdAndPostPasswordAndPostType
func GetPostsesByIdAndPostPasswordAndPostType(offset int, limit int, Id_ int64, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and post_type = ?", Id_, PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndPostMimeType Get Postses via IdAndPostPasswordAndPostMimeType
func GetPostsesByIdAndPostPasswordAndPostMimeType(offset int, limit int, Id_ int64, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and post_mime_type = ?", Id_, PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPasswordAndCommentCount Get Postses via IdAndPostPasswordAndCommentCount
func GetPostsesByIdAndPostPasswordAndCommentCount(offset int, limit int, Id_ int64, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ? and comment_count = ?", Id_, PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndToPing Get Postses via IdAndPostNameAndToPing
func GetPostsesByIdAndPostNameAndToPing(offset int, limit int, Id_ int64, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and to_ping = ?", Id_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndPinged Get Postses via IdAndPostNameAndPinged
func GetPostsesByIdAndPostNameAndPinged(offset int, limit int, Id_ int64, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and pinged = ?", Id_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndPostModified Get Postses via IdAndPostNameAndPostModified
func GetPostsesByIdAndPostNameAndPostModified(offset int, limit int, Id_ int64, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and post_modified = ?", Id_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndPostModifiedGmt Get Postses via IdAndPostNameAndPostModifiedGmt
func GetPostsesByIdAndPostNameAndPostModifiedGmt(offset int, limit int, Id_ int64, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and post_modified_gmt = ?", Id_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndPostContentFiltered Get Postses via IdAndPostNameAndPostContentFiltered
func GetPostsesByIdAndPostNameAndPostContentFiltered(offset int, limit int, Id_ int64, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and post_content_filtered = ?", Id_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndPostParent Get Postses via IdAndPostNameAndPostParent
func GetPostsesByIdAndPostNameAndPostParent(offset int, limit int, Id_ int64, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and post_parent = ?", Id_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndGuid Get Postses via IdAndPostNameAndGuid
func GetPostsesByIdAndPostNameAndGuid(offset int, limit int, Id_ int64, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and guid = ?", Id_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndMenuOrder Get Postses via IdAndPostNameAndMenuOrder
func GetPostsesByIdAndPostNameAndMenuOrder(offset int, limit int, Id_ int64, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and menu_order = ?", Id_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndPostType Get Postses via IdAndPostNameAndPostType
func GetPostsesByIdAndPostNameAndPostType(offset int, limit int, Id_ int64, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and post_type = ?", Id_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndPostMimeType Get Postses via IdAndPostNameAndPostMimeType
func GetPostsesByIdAndPostNameAndPostMimeType(offset int, limit int, Id_ int64, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and post_mime_type = ?", Id_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostNameAndCommentCount Get Postses via IdAndPostNameAndCommentCount
func GetPostsesByIdAndPostNameAndCommentCount(offset int, limit int, Id_ int64, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ? and comment_count = ?", Id_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPingAndPinged Get Postses via IdAndToPingAndPinged
func GetPostsesByIdAndToPingAndPinged(offset int, limit int, Id_ int64, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ? and pinged = ?", Id_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPingAndPostModified Get Postses via IdAndToPingAndPostModified
func GetPostsesByIdAndToPingAndPostModified(offset int, limit int, Id_ int64, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ? and post_modified = ?", Id_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPingAndPostModifiedGmt Get Postses via IdAndToPingAndPostModifiedGmt
func GetPostsesByIdAndToPingAndPostModifiedGmt(offset int, limit int, Id_ int64, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ? and post_modified_gmt = ?", Id_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPingAndPostContentFiltered Get Postses via IdAndToPingAndPostContentFiltered
func GetPostsesByIdAndToPingAndPostContentFiltered(offset int, limit int, Id_ int64, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ? and post_content_filtered = ?", Id_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPingAndPostParent Get Postses via IdAndToPingAndPostParent
func GetPostsesByIdAndToPingAndPostParent(offset int, limit int, Id_ int64, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ? and post_parent = ?", Id_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPingAndGuid Get Postses via IdAndToPingAndGuid
func GetPostsesByIdAndToPingAndGuid(offset int, limit int, Id_ int64, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ? and guid = ?", Id_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPingAndMenuOrder Get Postses via IdAndToPingAndMenuOrder
func GetPostsesByIdAndToPingAndMenuOrder(offset int, limit int, Id_ int64, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ? and menu_order = ?", Id_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPingAndPostType Get Postses via IdAndToPingAndPostType
func GetPostsesByIdAndToPingAndPostType(offset int, limit int, Id_ int64, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ? and post_type = ?", Id_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPingAndPostMimeType Get Postses via IdAndToPingAndPostMimeType
func GetPostsesByIdAndToPingAndPostMimeType(offset int, limit int, Id_ int64, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ? and post_mime_type = ?", Id_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPingAndCommentCount Get Postses via IdAndToPingAndCommentCount
func GetPostsesByIdAndToPingAndCommentCount(offset int, limit int, Id_ int64, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ? and comment_count = ?", Id_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingedAndPostModified Get Postses via IdAndPingedAndPostModified
func GetPostsesByIdAndPingedAndPostModified(offset int, limit int, Id_ int64, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and pinged = ? and post_modified = ?", Id_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingedAndPostModifiedGmt Get Postses via IdAndPingedAndPostModifiedGmt
func GetPostsesByIdAndPingedAndPostModifiedGmt(offset int, limit int, Id_ int64, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and pinged = ? and post_modified_gmt = ?", Id_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingedAndPostContentFiltered Get Postses via IdAndPingedAndPostContentFiltered
func GetPostsesByIdAndPingedAndPostContentFiltered(offset int, limit int, Id_ int64, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and pinged = ? and post_content_filtered = ?", Id_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingedAndPostParent Get Postses via IdAndPingedAndPostParent
func GetPostsesByIdAndPingedAndPostParent(offset int, limit int, Id_ int64, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and pinged = ? and post_parent = ?", Id_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingedAndGuid Get Postses via IdAndPingedAndGuid
func GetPostsesByIdAndPingedAndGuid(offset int, limit int, Id_ int64, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and pinged = ? and guid = ?", Id_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingedAndMenuOrder Get Postses via IdAndPingedAndMenuOrder
func GetPostsesByIdAndPingedAndMenuOrder(offset int, limit int, Id_ int64, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and pinged = ? and menu_order = ?", Id_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingedAndPostType Get Postses via IdAndPingedAndPostType
func GetPostsesByIdAndPingedAndPostType(offset int, limit int, Id_ int64, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and pinged = ? and post_type = ?", Id_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingedAndPostMimeType Get Postses via IdAndPingedAndPostMimeType
func GetPostsesByIdAndPingedAndPostMimeType(offset int, limit int, Id_ int64, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and pinged = ? and post_mime_type = ?", Id_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingedAndCommentCount Get Postses via IdAndPingedAndCommentCount
func GetPostsesByIdAndPingedAndCommentCount(offset int, limit int, Id_ int64, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and pinged = ? and comment_count = ?", Id_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedAndPostModifiedGmt Get Postses via IdAndPostModifiedAndPostModifiedGmt
func GetPostsesByIdAndPostModifiedAndPostModifiedGmt(offset int, limit int, Id_ int64, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified = ? and post_modified_gmt = ?", Id_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedAndPostContentFiltered Get Postses via IdAndPostModifiedAndPostContentFiltered
func GetPostsesByIdAndPostModifiedAndPostContentFiltered(offset int, limit int, Id_ int64, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified = ? and post_content_filtered = ?", Id_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedAndPostParent Get Postses via IdAndPostModifiedAndPostParent
func GetPostsesByIdAndPostModifiedAndPostParent(offset int, limit int, Id_ int64, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified = ? and post_parent = ?", Id_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedAndGuid Get Postses via IdAndPostModifiedAndGuid
func GetPostsesByIdAndPostModifiedAndGuid(offset int, limit int, Id_ int64, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified = ? and guid = ?", Id_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedAndMenuOrder Get Postses via IdAndPostModifiedAndMenuOrder
func GetPostsesByIdAndPostModifiedAndMenuOrder(offset int, limit int, Id_ int64, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified = ? and menu_order = ?", Id_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedAndPostType Get Postses via IdAndPostModifiedAndPostType
func GetPostsesByIdAndPostModifiedAndPostType(offset int, limit int, Id_ int64, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified = ? and post_type = ?", Id_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedAndPostMimeType Get Postses via IdAndPostModifiedAndPostMimeType
func GetPostsesByIdAndPostModifiedAndPostMimeType(offset int, limit int, Id_ int64, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified = ? and post_mime_type = ?", Id_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedAndCommentCount Get Postses via IdAndPostModifiedAndCommentCount
func GetPostsesByIdAndPostModifiedAndCommentCount(offset int, limit int, Id_ int64, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified = ? and comment_count = ?", Id_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedGmtAndPostContentFiltered Get Postses via IdAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByIdAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, Id_ int64, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified_gmt = ? and post_content_filtered = ?", Id_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedGmtAndPostParent Get Postses via IdAndPostModifiedGmtAndPostParent
func GetPostsesByIdAndPostModifiedGmtAndPostParent(offset int, limit int, Id_ int64, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified_gmt = ? and post_parent = ?", Id_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedGmtAndGuid Get Postses via IdAndPostModifiedGmtAndGuid
func GetPostsesByIdAndPostModifiedGmtAndGuid(offset int, limit int, Id_ int64, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified_gmt = ? and guid = ?", Id_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedGmtAndMenuOrder Get Postses via IdAndPostModifiedGmtAndMenuOrder
func GetPostsesByIdAndPostModifiedGmtAndMenuOrder(offset int, limit int, Id_ int64, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified_gmt = ? and menu_order = ?", Id_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedGmtAndPostType Get Postses via IdAndPostModifiedGmtAndPostType
func GetPostsesByIdAndPostModifiedGmtAndPostType(offset int, limit int, Id_ int64, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified_gmt = ? and post_type = ?", Id_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedGmtAndPostMimeType Get Postses via IdAndPostModifiedGmtAndPostMimeType
func GetPostsesByIdAndPostModifiedGmtAndPostMimeType(offset int, limit int, Id_ int64, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified_gmt = ? and post_mime_type = ?", Id_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedGmtAndCommentCount Get Postses via IdAndPostModifiedGmtAndCommentCount
func GetPostsesByIdAndPostModifiedGmtAndCommentCount(offset int, limit int, Id_ int64, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified_gmt = ? and comment_count = ?", Id_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentFilteredAndPostParent Get Postses via IdAndPostContentFilteredAndPostParent
func GetPostsesByIdAndPostContentFilteredAndPostParent(offset int, limit int, Id_ int64, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content_filtered = ? and post_parent = ?", Id_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentFilteredAndGuid Get Postses via IdAndPostContentFilteredAndGuid
func GetPostsesByIdAndPostContentFilteredAndGuid(offset int, limit int, Id_ int64, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content_filtered = ? and guid = ?", Id_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentFilteredAndMenuOrder Get Postses via IdAndPostContentFilteredAndMenuOrder
func GetPostsesByIdAndPostContentFilteredAndMenuOrder(offset int, limit int, Id_ int64, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content_filtered = ? and menu_order = ?", Id_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentFilteredAndPostType Get Postses via IdAndPostContentFilteredAndPostType
func GetPostsesByIdAndPostContentFilteredAndPostType(offset int, limit int, Id_ int64, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content_filtered = ? and post_type = ?", Id_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentFilteredAndPostMimeType Get Postses via IdAndPostContentFilteredAndPostMimeType
func GetPostsesByIdAndPostContentFilteredAndPostMimeType(offset int, limit int, Id_ int64, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content_filtered = ? and post_mime_type = ?", Id_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentFilteredAndCommentCount Get Postses via IdAndPostContentFilteredAndCommentCount
func GetPostsesByIdAndPostContentFilteredAndCommentCount(offset int, limit int, Id_ int64, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content_filtered = ? and comment_count = ?", Id_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostParentAndGuid Get Postses via IdAndPostParentAndGuid
func GetPostsesByIdAndPostParentAndGuid(offset int, limit int, Id_ int64, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_parent = ? and guid = ?", Id_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostParentAndMenuOrder Get Postses via IdAndPostParentAndMenuOrder
func GetPostsesByIdAndPostParentAndMenuOrder(offset int, limit int, Id_ int64, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_parent = ? and menu_order = ?", Id_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostParentAndPostType Get Postses via IdAndPostParentAndPostType
func GetPostsesByIdAndPostParentAndPostType(offset int, limit int, Id_ int64, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_parent = ? and post_type = ?", Id_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostParentAndPostMimeType Get Postses via IdAndPostParentAndPostMimeType
func GetPostsesByIdAndPostParentAndPostMimeType(offset int, limit int, Id_ int64, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_parent = ? and post_mime_type = ?", Id_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostParentAndCommentCount Get Postses via IdAndPostParentAndCommentCount
func GetPostsesByIdAndPostParentAndCommentCount(offset int, limit int, Id_ int64, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_parent = ? and comment_count = ?", Id_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndGuidAndMenuOrder Get Postses via IdAndGuidAndMenuOrder
func GetPostsesByIdAndGuidAndMenuOrder(offset int, limit int, Id_ int64, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and guid = ? and menu_order = ?", Id_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndGuidAndPostType Get Postses via IdAndGuidAndPostType
func GetPostsesByIdAndGuidAndPostType(offset int, limit int, Id_ int64, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and guid = ? and post_type = ?", Id_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndGuidAndPostMimeType Get Postses via IdAndGuidAndPostMimeType
func GetPostsesByIdAndGuidAndPostMimeType(offset int, limit int, Id_ int64, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and guid = ? and post_mime_type = ?", Id_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndGuidAndCommentCount Get Postses via IdAndGuidAndCommentCount
func GetPostsesByIdAndGuidAndCommentCount(offset int, limit int, Id_ int64, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and guid = ? and comment_count = ?", Id_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndMenuOrderAndPostType Get Postses via IdAndMenuOrderAndPostType
func GetPostsesByIdAndMenuOrderAndPostType(offset int, limit int, Id_ int64, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and menu_order = ? and post_type = ?", Id_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndMenuOrderAndPostMimeType Get Postses via IdAndMenuOrderAndPostMimeType
func GetPostsesByIdAndMenuOrderAndPostMimeType(offset int, limit int, Id_ int64, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and menu_order = ? and post_mime_type = ?", Id_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndMenuOrderAndCommentCount Get Postses via IdAndMenuOrderAndCommentCount
func GetPostsesByIdAndMenuOrderAndCommentCount(offset int, limit int, Id_ int64, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and menu_order = ? and comment_count = ?", Id_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTypeAndPostMimeType Get Postses via IdAndPostTypeAndPostMimeType
func GetPostsesByIdAndPostTypeAndPostMimeType(offset int, limit int, Id_ int64, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_type = ? and post_mime_type = ?", Id_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTypeAndCommentCount Get Postses via IdAndPostTypeAndCommentCount
func GetPostsesByIdAndPostTypeAndCommentCount(offset int, limit int, Id_ int64, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_type = ? and comment_count = ?", Id_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostMimeTypeAndCommentCount Get Postses via IdAndPostMimeTypeAndCommentCount
func GetPostsesByIdAndPostMimeTypeAndCommentCount(offset int, limit int, Id_ int64, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_mime_type = ? and comment_count = ?", Id_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostDateGmt Get Postses via PostAuthorAndPostDateAndPostDateGmt
func GetPostsesByPostAuthorAndPostDateAndPostDateGmt(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostDateGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_date_gmt = ?", PostAuthor_, PostDate_, PostDateGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostContent Get Postses via PostAuthorAndPostDateAndPostContent
func GetPostsesByPostAuthorAndPostDateAndPostContent(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostContent_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_content = ?", PostAuthor_, PostDate_, PostContent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostTitle Get Postses via PostAuthorAndPostDateAndPostTitle
func GetPostsesByPostAuthorAndPostDateAndPostTitle(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_title = ?", PostAuthor_, PostDate_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostExcerpt Get Postses via PostAuthorAndPostDateAndPostExcerpt
func GetPostsesByPostAuthorAndPostDateAndPostExcerpt(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_excerpt = ?", PostAuthor_, PostDate_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostStatus Get Postses via PostAuthorAndPostDateAndPostStatus
func GetPostsesByPostAuthorAndPostDateAndPostStatus(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_status = ?", PostAuthor_, PostDate_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndCommentStatus Get Postses via PostAuthorAndPostDateAndCommentStatus
func GetPostsesByPostAuthorAndPostDateAndCommentStatus(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and comment_status = ?", PostAuthor_, PostDate_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPingStatus Get Postses via PostAuthorAndPostDateAndPingStatus
func GetPostsesByPostAuthorAndPostDateAndPingStatus(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and ping_status = ?", PostAuthor_, PostDate_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostPassword Get Postses via PostAuthorAndPostDateAndPostPassword
func GetPostsesByPostAuthorAndPostDateAndPostPassword(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_password = ?", PostAuthor_, PostDate_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostName Get Postses via PostAuthorAndPostDateAndPostName
func GetPostsesByPostAuthorAndPostDateAndPostName(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_name = ?", PostAuthor_, PostDate_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndToPing Get Postses via PostAuthorAndPostDateAndToPing
func GetPostsesByPostAuthorAndPostDateAndToPing(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and to_ping = ?", PostAuthor_, PostDate_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPinged Get Postses via PostAuthorAndPostDateAndPinged
func GetPostsesByPostAuthorAndPostDateAndPinged(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and pinged = ?", PostAuthor_, PostDate_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostModified Get Postses via PostAuthorAndPostDateAndPostModified
func GetPostsesByPostAuthorAndPostDateAndPostModified(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_modified = ?", PostAuthor_, PostDate_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostModifiedGmt Get Postses via PostAuthorAndPostDateAndPostModifiedGmt
func GetPostsesByPostAuthorAndPostDateAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_modified_gmt = ?", PostAuthor_, PostDate_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostContentFiltered Get Postses via PostAuthorAndPostDateAndPostContentFiltered
func GetPostsesByPostAuthorAndPostDateAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_content_filtered = ?", PostAuthor_, PostDate_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostParent Get Postses via PostAuthorAndPostDateAndPostParent
func GetPostsesByPostAuthorAndPostDateAndPostParent(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_parent = ?", PostAuthor_, PostDate_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndGuid Get Postses via PostAuthorAndPostDateAndGuid
func GetPostsesByPostAuthorAndPostDateAndGuid(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and guid = ?", PostAuthor_, PostDate_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndMenuOrder Get Postses via PostAuthorAndPostDateAndMenuOrder
func GetPostsesByPostAuthorAndPostDateAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and menu_order = ?", PostAuthor_, PostDate_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostType Get Postses via PostAuthorAndPostDateAndPostType
func GetPostsesByPostAuthorAndPostDateAndPostType(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_type = ?", PostAuthor_, PostDate_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndPostMimeType Get Postses via PostAuthorAndPostDateAndPostMimeType
func GetPostsesByPostAuthorAndPostDateAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and post_mime_type = ?", PostAuthor_, PostDate_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateAndCommentCount Get Postses via PostAuthorAndPostDateAndCommentCount
func GetPostsesByPostAuthorAndPostDateAndCommentCount(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ? and comment_count = ?", PostAuthor_, PostDate_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostContent Get Postses via PostAuthorAndPostDateGmtAndPostContent
func GetPostsesByPostAuthorAndPostDateGmtAndPostContent(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostContent_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_content = ?", PostAuthor_, PostDateGmt_, PostContent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostTitle Get Postses via PostAuthorAndPostDateGmtAndPostTitle
func GetPostsesByPostAuthorAndPostDateGmtAndPostTitle(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_title = ?", PostAuthor_, PostDateGmt_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostExcerpt Get Postses via PostAuthorAndPostDateGmtAndPostExcerpt
func GetPostsesByPostAuthorAndPostDateGmtAndPostExcerpt(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_excerpt = ?", PostAuthor_, PostDateGmt_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostStatus Get Postses via PostAuthorAndPostDateGmtAndPostStatus
func GetPostsesByPostAuthorAndPostDateGmtAndPostStatus(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_status = ?", PostAuthor_, PostDateGmt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndCommentStatus Get Postses via PostAuthorAndPostDateGmtAndCommentStatus
func GetPostsesByPostAuthorAndPostDateGmtAndCommentStatus(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and comment_status = ?", PostAuthor_, PostDateGmt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPingStatus Get Postses via PostAuthorAndPostDateGmtAndPingStatus
func GetPostsesByPostAuthorAndPostDateGmtAndPingStatus(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and ping_status = ?", PostAuthor_, PostDateGmt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostPassword Get Postses via PostAuthorAndPostDateGmtAndPostPassword
func GetPostsesByPostAuthorAndPostDateGmtAndPostPassword(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_password = ?", PostAuthor_, PostDateGmt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostName Get Postses via PostAuthorAndPostDateGmtAndPostName
func GetPostsesByPostAuthorAndPostDateGmtAndPostName(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_name = ?", PostAuthor_, PostDateGmt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndToPing Get Postses via PostAuthorAndPostDateGmtAndToPing
func GetPostsesByPostAuthorAndPostDateGmtAndToPing(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and to_ping = ?", PostAuthor_, PostDateGmt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPinged Get Postses via PostAuthorAndPostDateGmtAndPinged
func GetPostsesByPostAuthorAndPostDateGmtAndPinged(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and pinged = ?", PostAuthor_, PostDateGmt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostModified Get Postses via PostAuthorAndPostDateGmtAndPostModified
func GetPostsesByPostAuthorAndPostDateGmtAndPostModified(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_modified = ?", PostAuthor_, PostDateGmt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostModifiedGmt Get Postses via PostAuthorAndPostDateGmtAndPostModifiedGmt
func GetPostsesByPostAuthorAndPostDateGmtAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_modified_gmt = ?", PostAuthor_, PostDateGmt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostContentFiltered Get Postses via PostAuthorAndPostDateGmtAndPostContentFiltered
func GetPostsesByPostAuthorAndPostDateGmtAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_content_filtered = ?", PostAuthor_, PostDateGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostParent Get Postses via PostAuthorAndPostDateGmtAndPostParent
func GetPostsesByPostAuthorAndPostDateGmtAndPostParent(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_parent = ?", PostAuthor_, PostDateGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndGuid Get Postses via PostAuthorAndPostDateGmtAndGuid
func GetPostsesByPostAuthorAndPostDateGmtAndGuid(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and guid = ?", PostAuthor_, PostDateGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndMenuOrder Get Postses via PostAuthorAndPostDateGmtAndMenuOrder
func GetPostsesByPostAuthorAndPostDateGmtAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and menu_order = ?", PostAuthor_, PostDateGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostType Get Postses via PostAuthorAndPostDateGmtAndPostType
func GetPostsesByPostAuthorAndPostDateGmtAndPostType(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_type = ?", PostAuthor_, PostDateGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndPostMimeType Get Postses via PostAuthorAndPostDateGmtAndPostMimeType
func GetPostsesByPostAuthorAndPostDateGmtAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and post_mime_type = ?", PostAuthor_, PostDateGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmtAndCommentCount Get Postses via PostAuthorAndPostDateGmtAndCommentCount
func GetPostsesByPostAuthorAndPostDateGmtAndCommentCount(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ? and comment_count = ?", PostAuthor_, PostDateGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostTitle Get Postses via PostAuthorAndPostContentAndPostTitle
func GetPostsesByPostAuthorAndPostContentAndPostTitle(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_title = ?", PostAuthor_, PostContent_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostExcerpt Get Postses via PostAuthorAndPostContentAndPostExcerpt
func GetPostsesByPostAuthorAndPostContentAndPostExcerpt(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_excerpt = ?", PostAuthor_, PostContent_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostStatus Get Postses via PostAuthorAndPostContentAndPostStatus
func GetPostsesByPostAuthorAndPostContentAndPostStatus(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_status = ?", PostAuthor_, PostContent_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndCommentStatus Get Postses via PostAuthorAndPostContentAndCommentStatus
func GetPostsesByPostAuthorAndPostContentAndCommentStatus(offset int, limit int, PostAuthor_ int64, PostContent_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and comment_status = ?", PostAuthor_, PostContent_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPingStatus Get Postses via PostAuthorAndPostContentAndPingStatus
func GetPostsesByPostAuthorAndPostContentAndPingStatus(offset int, limit int, PostAuthor_ int64, PostContent_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and ping_status = ?", PostAuthor_, PostContent_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostPassword Get Postses via PostAuthorAndPostContentAndPostPassword
func GetPostsesByPostAuthorAndPostContentAndPostPassword(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_password = ?", PostAuthor_, PostContent_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostName Get Postses via PostAuthorAndPostContentAndPostName
func GetPostsesByPostAuthorAndPostContentAndPostName(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_name = ?", PostAuthor_, PostContent_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndToPing Get Postses via PostAuthorAndPostContentAndToPing
func GetPostsesByPostAuthorAndPostContentAndToPing(offset int, limit int, PostAuthor_ int64, PostContent_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and to_ping = ?", PostAuthor_, PostContent_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPinged Get Postses via PostAuthorAndPostContentAndPinged
func GetPostsesByPostAuthorAndPostContentAndPinged(offset int, limit int, PostAuthor_ int64, PostContent_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and pinged = ?", PostAuthor_, PostContent_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostModified Get Postses via PostAuthorAndPostContentAndPostModified
func GetPostsesByPostAuthorAndPostContentAndPostModified(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_modified = ?", PostAuthor_, PostContent_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostModifiedGmt Get Postses via PostAuthorAndPostContentAndPostModifiedGmt
func GetPostsesByPostAuthorAndPostContentAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_modified_gmt = ?", PostAuthor_, PostContent_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostContentFiltered Get Postses via PostAuthorAndPostContentAndPostContentFiltered
func GetPostsesByPostAuthorAndPostContentAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_content_filtered = ?", PostAuthor_, PostContent_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostParent Get Postses via PostAuthorAndPostContentAndPostParent
func GetPostsesByPostAuthorAndPostContentAndPostParent(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_parent = ?", PostAuthor_, PostContent_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndGuid Get Postses via PostAuthorAndPostContentAndGuid
func GetPostsesByPostAuthorAndPostContentAndGuid(offset int, limit int, PostAuthor_ int64, PostContent_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and guid = ?", PostAuthor_, PostContent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndMenuOrder Get Postses via PostAuthorAndPostContentAndMenuOrder
func GetPostsesByPostAuthorAndPostContentAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostContent_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and menu_order = ?", PostAuthor_, PostContent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostType Get Postses via PostAuthorAndPostContentAndPostType
func GetPostsesByPostAuthorAndPostContentAndPostType(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_type = ?", PostAuthor_, PostContent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndPostMimeType Get Postses via PostAuthorAndPostContentAndPostMimeType
func GetPostsesByPostAuthorAndPostContentAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostContent_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and post_mime_type = ?", PostAuthor_, PostContent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentAndCommentCount Get Postses via PostAuthorAndPostContentAndCommentCount
func GetPostsesByPostAuthorAndPostContentAndCommentCount(offset int, limit int, PostAuthor_ int64, PostContent_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ? and comment_count = ?", PostAuthor_, PostContent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPostExcerpt Get Postses via PostAuthorAndPostTitleAndPostExcerpt
func GetPostsesByPostAuthorAndPostTitleAndPostExcerpt(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and post_excerpt = ?", PostAuthor_, PostTitle_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPostStatus Get Postses via PostAuthorAndPostTitleAndPostStatus
func GetPostsesByPostAuthorAndPostTitleAndPostStatus(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and post_status = ?", PostAuthor_, PostTitle_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndCommentStatus Get Postses via PostAuthorAndPostTitleAndCommentStatus
func GetPostsesByPostAuthorAndPostTitleAndCommentStatus(offset int, limit int, PostAuthor_ int64, PostTitle_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and comment_status = ?", PostAuthor_, PostTitle_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPingStatus Get Postses via PostAuthorAndPostTitleAndPingStatus
func GetPostsesByPostAuthorAndPostTitleAndPingStatus(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and ping_status = ?", PostAuthor_, PostTitle_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPostPassword Get Postses via PostAuthorAndPostTitleAndPostPassword
func GetPostsesByPostAuthorAndPostTitleAndPostPassword(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and post_password = ?", PostAuthor_, PostTitle_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPostName Get Postses via PostAuthorAndPostTitleAndPostName
func GetPostsesByPostAuthorAndPostTitleAndPostName(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and post_name = ?", PostAuthor_, PostTitle_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndToPing Get Postses via PostAuthorAndPostTitleAndToPing
func GetPostsesByPostAuthorAndPostTitleAndToPing(offset int, limit int, PostAuthor_ int64, PostTitle_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and to_ping = ?", PostAuthor_, PostTitle_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPinged Get Postses via PostAuthorAndPostTitleAndPinged
func GetPostsesByPostAuthorAndPostTitleAndPinged(offset int, limit int, PostAuthor_ int64, PostTitle_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and pinged = ?", PostAuthor_, PostTitle_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPostModified Get Postses via PostAuthorAndPostTitleAndPostModified
func GetPostsesByPostAuthorAndPostTitleAndPostModified(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and post_modified = ?", PostAuthor_, PostTitle_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPostModifiedGmt Get Postses via PostAuthorAndPostTitleAndPostModifiedGmt
func GetPostsesByPostAuthorAndPostTitleAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and post_modified_gmt = ?", PostAuthor_, PostTitle_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPostContentFiltered Get Postses via PostAuthorAndPostTitleAndPostContentFiltered
func GetPostsesByPostAuthorAndPostTitleAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and post_content_filtered = ?", PostAuthor_, PostTitle_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPostParent Get Postses via PostAuthorAndPostTitleAndPostParent
func GetPostsesByPostAuthorAndPostTitleAndPostParent(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and post_parent = ?", PostAuthor_, PostTitle_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndGuid Get Postses via PostAuthorAndPostTitleAndGuid
func GetPostsesByPostAuthorAndPostTitleAndGuid(offset int, limit int, PostAuthor_ int64, PostTitle_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and guid = ?", PostAuthor_, PostTitle_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndMenuOrder Get Postses via PostAuthorAndPostTitleAndMenuOrder
func GetPostsesByPostAuthorAndPostTitleAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostTitle_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and menu_order = ?", PostAuthor_, PostTitle_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPostType Get Postses via PostAuthorAndPostTitleAndPostType
func GetPostsesByPostAuthorAndPostTitleAndPostType(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and post_type = ?", PostAuthor_, PostTitle_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndPostMimeType Get Postses via PostAuthorAndPostTitleAndPostMimeType
func GetPostsesByPostAuthorAndPostTitleAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostTitle_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and post_mime_type = ?", PostAuthor_, PostTitle_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitleAndCommentCount Get Postses via PostAuthorAndPostTitleAndCommentCount
func GetPostsesByPostAuthorAndPostTitleAndCommentCount(offset int, limit int, PostAuthor_ int64, PostTitle_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ? and comment_count = ?", PostAuthor_, PostTitle_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPostStatus Get Postses via PostAuthorAndPostExcerptAndPostStatus
func GetPostsesByPostAuthorAndPostExcerptAndPostStatus(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and post_status = ?", PostAuthor_, PostExcerpt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndCommentStatus Get Postses via PostAuthorAndPostExcerptAndCommentStatus
func GetPostsesByPostAuthorAndPostExcerptAndCommentStatus(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and comment_status = ?", PostAuthor_, PostExcerpt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPingStatus Get Postses via PostAuthorAndPostExcerptAndPingStatus
func GetPostsesByPostAuthorAndPostExcerptAndPingStatus(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and ping_status = ?", PostAuthor_, PostExcerpt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPostPassword Get Postses via PostAuthorAndPostExcerptAndPostPassword
func GetPostsesByPostAuthorAndPostExcerptAndPostPassword(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and post_password = ?", PostAuthor_, PostExcerpt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPostName Get Postses via PostAuthorAndPostExcerptAndPostName
func GetPostsesByPostAuthorAndPostExcerptAndPostName(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and post_name = ?", PostAuthor_, PostExcerpt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndToPing Get Postses via PostAuthorAndPostExcerptAndToPing
func GetPostsesByPostAuthorAndPostExcerptAndToPing(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and to_ping = ?", PostAuthor_, PostExcerpt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPinged Get Postses via PostAuthorAndPostExcerptAndPinged
func GetPostsesByPostAuthorAndPostExcerptAndPinged(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and pinged = ?", PostAuthor_, PostExcerpt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPostModified Get Postses via PostAuthorAndPostExcerptAndPostModified
func GetPostsesByPostAuthorAndPostExcerptAndPostModified(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and post_modified = ?", PostAuthor_, PostExcerpt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPostModifiedGmt Get Postses via PostAuthorAndPostExcerptAndPostModifiedGmt
func GetPostsesByPostAuthorAndPostExcerptAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and post_modified_gmt = ?", PostAuthor_, PostExcerpt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPostContentFiltered Get Postses via PostAuthorAndPostExcerptAndPostContentFiltered
func GetPostsesByPostAuthorAndPostExcerptAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and post_content_filtered = ?", PostAuthor_, PostExcerpt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPostParent Get Postses via PostAuthorAndPostExcerptAndPostParent
func GetPostsesByPostAuthorAndPostExcerptAndPostParent(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and post_parent = ?", PostAuthor_, PostExcerpt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndGuid Get Postses via PostAuthorAndPostExcerptAndGuid
func GetPostsesByPostAuthorAndPostExcerptAndGuid(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and guid = ?", PostAuthor_, PostExcerpt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndMenuOrder Get Postses via PostAuthorAndPostExcerptAndMenuOrder
func GetPostsesByPostAuthorAndPostExcerptAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and menu_order = ?", PostAuthor_, PostExcerpt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPostType Get Postses via PostAuthorAndPostExcerptAndPostType
func GetPostsesByPostAuthorAndPostExcerptAndPostType(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and post_type = ?", PostAuthor_, PostExcerpt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndPostMimeType Get Postses via PostAuthorAndPostExcerptAndPostMimeType
func GetPostsesByPostAuthorAndPostExcerptAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and post_mime_type = ?", PostAuthor_, PostExcerpt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerptAndCommentCount Get Postses via PostAuthorAndPostExcerptAndCommentCount
func GetPostsesByPostAuthorAndPostExcerptAndCommentCount(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ? and comment_count = ?", PostAuthor_, PostExcerpt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndCommentStatus Get Postses via PostAuthorAndPostStatusAndCommentStatus
func GetPostsesByPostAuthorAndPostStatusAndCommentStatus(offset int, limit int, PostAuthor_ int64, PostStatus_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and comment_status = ?", PostAuthor_, PostStatus_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndPingStatus Get Postses via PostAuthorAndPostStatusAndPingStatus
func GetPostsesByPostAuthorAndPostStatusAndPingStatus(offset int, limit int, PostAuthor_ int64, PostStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and ping_status = ?", PostAuthor_, PostStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndPostPassword Get Postses via PostAuthorAndPostStatusAndPostPassword
func GetPostsesByPostAuthorAndPostStatusAndPostPassword(offset int, limit int, PostAuthor_ int64, PostStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and post_password = ?", PostAuthor_, PostStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndPostName Get Postses via PostAuthorAndPostStatusAndPostName
func GetPostsesByPostAuthorAndPostStatusAndPostName(offset int, limit int, PostAuthor_ int64, PostStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and post_name = ?", PostAuthor_, PostStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndToPing Get Postses via PostAuthorAndPostStatusAndToPing
func GetPostsesByPostAuthorAndPostStatusAndToPing(offset int, limit int, PostAuthor_ int64, PostStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and to_ping = ?", PostAuthor_, PostStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndPinged Get Postses via PostAuthorAndPostStatusAndPinged
func GetPostsesByPostAuthorAndPostStatusAndPinged(offset int, limit int, PostAuthor_ int64, PostStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and pinged = ?", PostAuthor_, PostStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndPostModified Get Postses via PostAuthorAndPostStatusAndPostModified
func GetPostsesByPostAuthorAndPostStatusAndPostModified(offset int, limit int, PostAuthor_ int64, PostStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and post_modified = ?", PostAuthor_, PostStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndPostModifiedGmt Get Postses via PostAuthorAndPostStatusAndPostModifiedGmt
func GetPostsesByPostAuthorAndPostStatusAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PostStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and post_modified_gmt = ?", PostAuthor_, PostStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndPostContentFiltered Get Postses via PostAuthorAndPostStatusAndPostContentFiltered
func GetPostsesByPostAuthorAndPostStatusAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and post_content_filtered = ?", PostAuthor_, PostStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndPostParent Get Postses via PostAuthorAndPostStatusAndPostParent
func GetPostsesByPostAuthorAndPostStatusAndPostParent(offset int, limit int, PostAuthor_ int64, PostStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and post_parent = ?", PostAuthor_, PostStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndGuid Get Postses via PostAuthorAndPostStatusAndGuid
func GetPostsesByPostAuthorAndPostStatusAndGuid(offset int, limit int, PostAuthor_ int64, PostStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and guid = ?", PostAuthor_, PostStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndMenuOrder Get Postses via PostAuthorAndPostStatusAndMenuOrder
func GetPostsesByPostAuthorAndPostStatusAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and menu_order = ?", PostAuthor_, PostStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndPostType Get Postses via PostAuthorAndPostStatusAndPostType
func GetPostsesByPostAuthorAndPostStatusAndPostType(offset int, limit int, PostAuthor_ int64, PostStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and post_type = ?", PostAuthor_, PostStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndPostMimeType Get Postses via PostAuthorAndPostStatusAndPostMimeType
func GetPostsesByPostAuthorAndPostStatusAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and post_mime_type = ?", PostAuthor_, PostStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatusAndCommentCount Get Postses via PostAuthorAndPostStatusAndCommentCount
func GetPostsesByPostAuthorAndPostStatusAndCommentCount(offset int, limit int, PostAuthor_ int64, PostStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ? and comment_count = ?", PostAuthor_, PostStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndPingStatus Get Postses via PostAuthorAndCommentStatusAndPingStatus
func GetPostsesByPostAuthorAndCommentStatusAndPingStatus(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and ping_status = ?", PostAuthor_, CommentStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndPostPassword Get Postses via PostAuthorAndCommentStatusAndPostPassword
func GetPostsesByPostAuthorAndCommentStatusAndPostPassword(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and post_password = ?", PostAuthor_, CommentStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndPostName Get Postses via PostAuthorAndCommentStatusAndPostName
func GetPostsesByPostAuthorAndCommentStatusAndPostName(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and post_name = ?", PostAuthor_, CommentStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndToPing Get Postses via PostAuthorAndCommentStatusAndToPing
func GetPostsesByPostAuthorAndCommentStatusAndToPing(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and to_ping = ?", PostAuthor_, CommentStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndPinged Get Postses via PostAuthorAndCommentStatusAndPinged
func GetPostsesByPostAuthorAndCommentStatusAndPinged(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and pinged = ?", PostAuthor_, CommentStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndPostModified Get Postses via PostAuthorAndCommentStatusAndPostModified
func GetPostsesByPostAuthorAndCommentStatusAndPostModified(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and post_modified = ?", PostAuthor_, CommentStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndPostModifiedGmt Get Postses via PostAuthorAndCommentStatusAndPostModifiedGmt
func GetPostsesByPostAuthorAndCommentStatusAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and post_modified_gmt = ?", PostAuthor_, CommentStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndPostContentFiltered Get Postses via PostAuthorAndCommentStatusAndPostContentFiltered
func GetPostsesByPostAuthorAndCommentStatusAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and post_content_filtered = ?", PostAuthor_, CommentStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndPostParent Get Postses via PostAuthorAndCommentStatusAndPostParent
func GetPostsesByPostAuthorAndCommentStatusAndPostParent(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and post_parent = ?", PostAuthor_, CommentStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndGuid Get Postses via PostAuthorAndCommentStatusAndGuid
func GetPostsesByPostAuthorAndCommentStatusAndGuid(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and guid = ?", PostAuthor_, CommentStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndMenuOrder Get Postses via PostAuthorAndCommentStatusAndMenuOrder
func GetPostsesByPostAuthorAndCommentStatusAndMenuOrder(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and menu_order = ?", PostAuthor_, CommentStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndPostType Get Postses via PostAuthorAndCommentStatusAndPostType
func GetPostsesByPostAuthorAndCommentStatusAndPostType(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and post_type = ?", PostAuthor_, CommentStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndPostMimeType Get Postses via PostAuthorAndCommentStatusAndPostMimeType
func GetPostsesByPostAuthorAndCommentStatusAndPostMimeType(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and post_mime_type = ?", PostAuthor_, CommentStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatusAndCommentCount Get Postses via PostAuthorAndCommentStatusAndCommentCount
func GetPostsesByPostAuthorAndCommentStatusAndCommentCount(offset int, limit int, PostAuthor_ int64, CommentStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ? and comment_count = ?", PostAuthor_, CommentStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndPostPassword Get Postses via PostAuthorAndPingStatusAndPostPassword
func GetPostsesByPostAuthorAndPingStatusAndPostPassword(offset int, limit int, PostAuthor_ int64, PingStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and post_password = ?", PostAuthor_, PingStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndPostName Get Postses via PostAuthorAndPingStatusAndPostName
func GetPostsesByPostAuthorAndPingStatusAndPostName(offset int, limit int, PostAuthor_ int64, PingStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and post_name = ?", PostAuthor_, PingStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndToPing Get Postses via PostAuthorAndPingStatusAndToPing
func GetPostsesByPostAuthorAndPingStatusAndToPing(offset int, limit int, PostAuthor_ int64, PingStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and to_ping = ?", PostAuthor_, PingStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndPinged Get Postses via PostAuthorAndPingStatusAndPinged
func GetPostsesByPostAuthorAndPingStatusAndPinged(offset int, limit int, PostAuthor_ int64, PingStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and pinged = ?", PostAuthor_, PingStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndPostModified Get Postses via PostAuthorAndPingStatusAndPostModified
func GetPostsesByPostAuthorAndPingStatusAndPostModified(offset int, limit int, PostAuthor_ int64, PingStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and post_modified = ?", PostAuthor_, PingStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndPostModifiedGmt Get Postses via PostAuthorAndPingStatusAndPostModifiedGmt
func GetPostsesByPostAuthorAndPingStatusAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PingStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and post_modified_gmt = ?", PostAuthor_, PingStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndPostContentFiltered Get Postses via PostAuthorAndPingStatusAndPostContentFiltered
func GetPostsesByPostAuthorAndPingStatusAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PingStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and post_content_filtered = ?", PostAuthor_, PingStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndPostParent Get Postses via PostAuthorAndPingStatusAndPostParent
func GetPostsesByPostAuthorAndPingStatusAndPostParent(offset int, limit int, PostAuthor_ int64, PingStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and post_parent = ?", PostAuthor_, PingStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndGuid Get Postses via PostAuthorAndPingStatusAndGuid
func GetPostsesByPostAuthorAndPingStatusAndGuid(offset int, limit int, PostAuthor_ int64, PingStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and guid = ?", PostAuthor_, PingStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndMenuOrder Get Postses via PostAuthorAndPingStatusAndMenuOrder
func GetPostsesByPostAuthorAndPingStatusAndMenuOrder(offset int, limit int, PostAuthor_ int64, PingStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and menu_order = ?", PostAuthor_, PingStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndPostType Get Postses via PostAuthorAndPingStatusAndPostType
func GetPostsesByPostAuthorAndPingStatusAndPostType(offset int, limit int, PostAuthor_ int64, PingStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and post_type = ?", PostAuthor_, PingStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndPostMimeType Get Postses via PostAuthorAndPingStatusAndPostMimeType
func GetPostsesByPostAuthorAndPingStatusAndPostMimeType(offset int, limit int, PostAuthor_ int64, PingStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and post_mime_type = ?", PostAuthor_, PingStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatusAndCommentCount Get Postses via PostAuthorAndPingStatusAndCommentCount
func GetPostsesByPostAuthorAndPingStatusAndCommentCount(offset int, limit int, PostAuthor_ int64, PingStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ? and comment_count = ?", PostAuthor_, PingStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndPostName Get Postses via PostAuthorAndPostPasswordAndPostName
func GetPostsesByPostAuthorAndPostPasswordAndPostName(offset int, limit int, PostAuthor_ int64, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and post_name = ?", PostAuthor_, PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndToPing Get Postses via PostAuthorAndPostPasswordAndToPing
func GetPostsesByPostAuthorAndPostPasswordAndToPing(offset int, limit int, PostAuthor_ int64, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and to_ping = ?", PostAuthor_, PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndPinged Get Postses via PostAuthorAndPostPasswordAndPinged
func GetPostsesByPostAuthorAndPostPasswordAndPinged(offset int, limit int, PostAuthor_ int64, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and pinged = ?", PostAuthor_, PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndPostModified Get Postses via PostAuthorAndPostPasswordAndPostModified
func GetPostsesByPostAuthorAndPostPasswordAndPostModified(offset int, limit int, PostAuthor_ int64, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and post_modified = ?", PostAuthor_, PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndPostModifiedGmt Get Postses via PostAuthorAndPostPasswordAndPostModifiedGmt
func GetPostsesByPostAuthorAndPostPasswordAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and post_modified_gmt = ?", PostAuthor_, PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndPostContentFiltered Get Postses via PostAuthorAndPostPasswordAndPostContentFiltered
func GetPostsesByPostAuthorAndPostPasswordAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and post_content_filtered = ?", PostAuthor_, PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndPostParent Get Postses via PostAuthorAndPostPasswordAndPostParent
func GetPostsesByPostAuthorAndPostPasswordAndPostParent(offset int, limit int, PostAuthor_ int64, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and post_parent = ?", PostAuthor_, PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndGuid Get Postses via PostAuthorAndPostPasswordAndGuid
func GetPostsesByPostAuthorAndPostPasswordAndGuid(offset int, limit int, PostAuthor_ int64, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and guid = ?", PostAuthor_, PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndMenuOrder Get Postses via PostAuthorAndPostPasswordAndMenuOrder
func GetPostsesByPostAuthorAndPostPasswordAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and menu_order = ?", PostAuthor_, PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndPostType Get Postses via PostAuthorAndPostPasswordAndPostType
func GetPostsesByPostAuthorAndPostPasswordAndPostType(offset int, limit int, PostAuthor_ int64, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and post_type = ?", PostAuthor_, PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndPostMimeType Get Postses via PostAuthorAndPostPasswordAndPostMimeType
func GetPostsesByPostAuthorAndPostPasswordAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and post_mime_type = ?", PostAuthor_, PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPasswordAndCommentCount Get Postses via PostAuthorAndPostPasswordAndCommentCount
func GetPostsesByPostAuthorAndPostPasswordAndCommentCount(offset int, limit int, PostAuthor_ int64, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ? and comment_count = ?", PostAuthor_, PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndToPing Get Postses via PostAuthorAndPostNameAndToPing
func GetPostsesByPostAuthorAndPostNameAndToPing(offset int, limit int, PostAuthor_ int64, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and to_ping = ?", PostAuthor_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndPinged Get Postses via PostAuthorAndPostNameAndPinged
func GetPostsesByPostAuthorAndPostNameAndPinged(offset int, limit int, PostAuthor_ int64, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and pinged = ?", PostAuthor_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndPostModified Get Postses via PostAuthorAndPostNameAndPostModified
func GetPostsesByPostAuthorAndPostNameAndPostModified(offset int, limit int, PostAuthor_ int64, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and post_modified = ?", PostAuthor_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndPostModifiedGmt Get Postses via PostAuthorAndPostNameAndPostModifiedGmt
func GetPostsesByPostAuthorAndPostNameAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and post_modified_gmt = ?", PostAuthor_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndPostContentFiltered Get Postses via PostAuthorAndPostNameAndPostContentFiltered
func GetPostsesByPostAuthorAndPostNameAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and post_content_filtered = ?", PostAuthor_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndPostParent Get Postses via PostAuthorAndPostNameAndPostParent
func GetPostsesByPostAuthorAndPostNameAndPostParent(offset int, limit int, PostAuthor_ int64, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and post_parent = ?", PostAuthor_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndGuid Get Postses via PostAuthorAndPostNameAndGuid
func GetPostsesByPostAuthorAndPostNameAndGuid(offset int, limit int, PostAuthor_ int64, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and guid = ?", PostAuthor_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndMenuOrder Get Postses via PostAuthorAndPostNameAndMenuOrder
func GetPostsesByPostAuthorAndPostNameAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and menu_order = ?", PostAuthor_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndPostType Get Postses via PostAuthorAndPostNameAndPostType
func GetPostsesByPostAuthorAndPostNameAndPostType(offset int, limit int, PostAuthor_ int64, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and post_type = ?", PostAuthor_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndPostMimeType Get Postses via PostAuthorAndPostNameAndPostMimeType
func GetPostsesByPostAuthorAndPostNameAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and post_mime_type = ?", PostAuthor_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostNameAndCommentCount Get Postses via PostAuthorAndPostNameAndCommentCount
func GetPostsesByPostAuthorAndPostNameAndCommentCount(offset int, limit int, PostAuthor_ int64, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ? and comment_count = ?", PostAuthor_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPingAndPinged Get Postses via PostAuthorAndToPingAndPinged
func GetPostsesByPostAuthorAndToPingAndPinged(offset int, limit int, PostAuthor_ int64, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ? and pinged = ?", PostAuthor_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPingAndPostModified Get Postses via PostAuthorAndToPingAndPostModified
func GetPostsesByPostAuthorAndToPingAndPostModified(offset int, limit int, PostAuthor_ int64, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ? and post_modified = ?", PostAuthor_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPingAndPostModifiedGmt Get Postses via PostAuthorAndToPingAndPostModifiedGmt
func GetPostsesByPostAuthorAndToPingAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ? and post_modified_gmt = ?", PostAuthor_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPingAndPostContentFiltered Get Postses via PostAuthorAndToPingAndPostContentFiltered
func GetPostsesByPostAuthorAndToPingAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ? and post_content_filtered = ?", PostAuthor_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPingAndPostParent Get Postses via PostAuthorAndToPingAndPostParent
func GetPostsesByPostAuthorAndToPingAndPostParent(offset int, limit int, PostAuthor_ int64, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ? and post_parent = ?", PostAuthor_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPingAndGuid Get Postses via PostAuthorAndToPingAndGuid
func GetPostsesByPostAuthorAndToPingAndGuid(offset int, limit int, PostAuthor_ int64, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ? and guid = ?", PostAuthor_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPingAndMenuOrder Get Postses via PostAuthorAndToPingAndMenuOrder
func GetPostsesByPostAuthorAndToPingAndMenuOrder(offset int, limit int, PostAuthor_ int64, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ? and menu_order = ?", PostAuthor_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPingAndPostType Get Postses via PostAuthorAndToPingAndPostType
func GetPostsesByPostAuthorAndToPingAndPostType(offset int, limit int, PostAuthor_ int64, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ? and post_type = ?", PostAuthor_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPingAndPostMimeType Get Postses via PostAuthorAndToPingAndPostMimeType
func GetPostsesByPostAuthorAndToPingAndPostMimeType(offset int, limit int, PostAuthor_ int64, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ? and post_mime_type = ?", PostAuthor_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPingAndCommentCount Get Postses via PostAuthorAndToPingAndCommentCount
func GetPostsesByPostAuthorAndToPingAndCommentCount(offset int, limit int, PostAuthor_ int64, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ? and comment_count = ?", PostAuthor_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingedAndPostModified Get Postses via PostAuthorAndPingedAndPostModified
func GetPostsesByPostAuthorAndPingedAndPostModified(offset int, limit int, PostAuthor_ int64, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and pinged = ? and post_modified = ?", PostAuthor_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingedAndPostModifiedGmt Get Postses via PostAuthorAndPingedAndPostModifiedGmt
func GetPostsesByPostAuthorAndPingedAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and pinged = ? and post_modified_gmt = ?", PostAuthor_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingedAndPostContentFiltered Get Postses via PostAuthorAndPingedAndPostContentFiltered
func GetPostsesByPostAuthorAndPingedAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and pinged = ? and post_content_filtered = ?", PostAuthor_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingedAndPostParent Get Postses via PostAuthorAndPingedAndPostParent
func GetPostsesByPostAuthorAndPingedAndPostParent(offset int, limit int, PostAuthor_ int64, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and pinged = ? and post_parent = ?", PostAuthor_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingedAndGuid Get Postses via PostAuthorAndPingedAndGuid
func GetPostsesByPostAuthorAndPingedAndGuid(offset int, limit int, PostAuthor_ int64, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and pinged = ? and guid = ?", PostAuthor_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingedAndMenuOrder Get Postses via PostAuthorAndPingedAndMenuOrder
func GetPostsesByPostAuthorAndPingedAndMenuOrder(offset int, limit int, PostAuthor_ int64, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and pinged = ? and menu_order = ?", PostAuthor_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingedAndPostType Get Postses via PostAuthorAndPingedAndPostType
func GetPostsesByPostAuthorAndPingedAndPostType(offset int, limit int, PostAuthor_ int64, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and pinged = ? and post_type = ?", PostAuthor_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingedAndPostMimeType Get Postses via PostAuthorAndPingedAndPostMimeType
func GetPostsesByPostAuthorAndPingedAndPostMimeType(offset int, limit int, PostAuthor_ int64, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and pinged = ? and post_mime_type = ?", PostAuthor_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingedAndCommentCount Get Postses via PostAuthorAndPingedAndCommentCount
func GetPostsesByPostAuthorAndPingedAndCommentCount(offset int, limit int, PostAuthor_ int64, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and pinged = ? and comment_count = ?", PostAuthor_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedAndPostModifiedGmt Get Postses via PostAuthorAndPostModifiedAndPostModifiedGmt
func GetPostsesByPostAuthorAndPostModifiedAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified = ? and post_modified_gmt = ?", PostAuthor_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedAndPostContentFiltered Get Postses via PostAuthorAndPostModifiedAndPostContentFiltered
func GetPostsesByPostAuthorAndPostModifiedAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified = ? and post_content_filtered = ?", PostAuthor_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedAndPostParent Get Postses via PostAuthorAndPostModifiedAndPostParent
func GetPostsesByPostAuthorAndPostModifiedAndPostParent(offset int, limit int, PostAuthor_ int64, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified = ? and post_parent = ?", PostAuthor_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedAndGuid Get Postses via PostAuthorAndPostModifiedAndGuid
func GetPostsesByPostAuthorAndPostModifiedAndGuid(offset int, limit int, PostAuthor_ int64, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified = ? and guid = ?", PostAuthor_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedAndMenuOrder Get Postses via PostAuthorAndPostModifiedAndMenuOrder
func GetPostsesByPostAuthorAndPostModifiedAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified = ? and menu_order = ?", PostAuthor_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedAndPostType Get Postses via PostAuthorAndPostModifiedAndPostType
func GetPostsesByPostAuthorAndPostModifiedAndPostType(offset int, limit int, PostAuthor_ int64, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified = ? and post_type = ?", PostAuthor_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedAndPostMimeType Get Postses via PostAuthorAndPostModifiedAndPostMimeType
func GetPostsesByPostAuthorAndPostModifiedAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified = ? and post_mime_type = ?", PostAuthor_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedAndCommentCount Get Postses via PostAuthorAndPostModifiedAndCommentCount
func GetPostsesByPostAuthorAndPostModifiedAndCommentCount(offset int, limit int, PostAuthor_ int64, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified = ? and comment_count = ?", PostAuthor_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedGmtAndPostContentFiltered Get Postses via PostAuthorAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPostAuthorAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified_gmt = ? and post_content_filtered = ?", PostAuthor_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedGmtAndPostParent Get Postses via PostAuthorAndPostModifiedGmtAndPostParent
func GetPostsesByPostAuthorAndPostModifiedGmtAndPostParent(offset int, limit int, PostAuthor_ int64, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified_gmt = ? and post_parent = ?", PostAuthor_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedGmtAndGuid Get Postses via PostAuthorAndPostModifiedGmtAndGuid
func GetPostsesByPostAuthorAndPostModifiedGmtAndGuid(offset int, limit int, PostAuthor_ int64, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified_gmt = ? and guid = ?", PostAuthor_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedGmtAndMenuOrder Get Postses via PostAuthorAndPostModifiedGmtAndMenuOrder
func GetPostsesByPostAuthorAndPostModifiedGmtAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified_gmt = ? and menu_order = ?", PostAuthor_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedGmtAndPostType Get Postses via PostAuthorAndPostModifiedGmtAndPostType
func GetPostsesByPostAuthorAndPostModifiedGmtAndPostType(offset int, limit int, PostAuthor_ int64, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified_gmt = ? and post_type = ?", PostAuthor_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedGmtAndPostMimeType Get Postses via PostAuthorAndPostModifiedGmtAndPostMimeType
func GetPostsesByPostAuthorAndPostModifiedGmtAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified_gmt = ? and post_mime_type = ?", PostAuthor_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedGmtAndCommentCount Get Postses via PostAuthorAndPostModifiedGmtAndCommentCount
func GetPostsesByPostAuthorAndPostModifiedGmtAndCommentCount(offset int, limit int, PostAuthor_ int64, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified_gmt = ? and comment_count = ?", PostAuthor_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentFilteredAndPostParent Get Postses via PostAuthorAndPostContentFilteredAndPostParent
func GetPostsesByPostAuthorAndPostContentFilteredAndPostParent(offset int, limit int, PostAuthor_ int64, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content_filtered = ? and post_parent = ?", PostAuthor_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentFilteredAndGuid Get Postses via PostAuthorAndPostContentFilteredAndGuid
func GetPostsesByPostAuthorAndPostContentFilteredAndGuid(offset int, limit int, PostAuthor_ int64, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content_filtered = ? and guid = ?", PostAuthor_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentFilteredAndMenuOrder Get Postses via PostAuthorAndPostContentFilteredAndMenuOrder
func GetPostsesByPostAuthorAndPostContentFilteredAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content_filtered = ? and menu_order = ?", PostAuthor_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentFilteredAndPostType Get Postses via PostAuthorAndPostContentFilteredAndPostType
func GetPostsesByPostAuthorAndPostContentFilteredAndPostType(offset int, limit int, PostAuthor_ int64, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content_filtered = ? and post_type = ?", PostAuthor_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentFilteredAndPostMimeType Get Postses via PostAuthorAndPostContentFilteredAndPostMimeType
func GetPostsesByPostAuthorAndPostContentFilteredAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content_filtered = ? and post_mime_type = ?", PostAuthor_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentFilteredAndCommentCount Get Postses via PostAuthorAndPostContentFilteredAndCommentCount
func GetPostsesByPostAuthorAndPostContentFilteredAndCommentCount(offset int, limit int, PostAuthor_ int64, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content_filtered = ? and comment_count = ?", PostAuthor_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostParentAndGuid Get Postses via PostAuthorAndPostParentAndGuid
func GetPostsesByPostAuthorAndPostParentAndGuid(offset int, limit int, PostAuthor_ int64, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_parent = ? and guid = ?", PostAuthor_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostParentAndMenuOrder Get Postses via PostAuthorAndPostParentAndMenuOrder
func GetPostsesByPostAuthorAndPostParentAndMenuOrder(offset int, limit int, PostAuthor_ int64, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_parent = ? and menu_order = ?", PostAuthor_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostParentAndPostType Get Postses via PostAuthorAndPostParentAndPostType
func GetPostsesByPostAuthorAndPostParentAndPostType(offset int, limit int, PostAuthor_ int64, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_parent = ? and post_type = ?", PostAuthor_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostParentAndPostMimeType Get Postses via PostAuthorAndPostParentAndPostMimeType
func GetPostsesByPostAuthorAndPostParentAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_parent = ? and post_mime_type = ?", PostAuthor_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostParentAndCommentCount Get Postses via PostAuthorAndPostParentAndCommentCount
func GetPostsesByPostAuthorAndPostParentAndCommentCount(offset int, limit int, PostAuthor_ int64, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_parent = ? and comment_count = ?", PostAuthor_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndGuidAndMenuOrder Get Postses via PostAuthorAndGuidAndMenuOrder
func GetPostsesByPostAuthorAndGuidAndMenuOrder(offset int, limit int, PostAuthor_ int64, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and guid = ? and menu_order = ?", PostAuthor_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndGuidAndPostType Get Postses via PostAuthorAndGuidAndPostType
func GetPostsesByPostAuthorAndGuidAndPostType(offset int, limit int, PostAuthor_ int64, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and guid = ? and post_type = ?", PostAuthor_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndGuidAndPostMimeType Get Postses via PostAuthorAndGuidAndPostMimeType
func GetPostsesByPostAuthorAndGuidAndPostMimeType(offset int, limit int, PostAuthor_ int64, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and guid = ? and post_mime_type = ?", PostAuthor_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndGuidAndCommentCount Get Postses via PostAuthorAndGuidAndCommentCount
func GetPostsesByPostAuthorAndGuidAndCommentCount(offset int, limit int, PostAuthor_ int64, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and guid = ? and comment_count = ?", PostAuthor_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndMenuOrderAndPostType Get Postses via PostAuthorAndMenuOrderAndPostType
func GetPostsesByPostAuthorAndMenuOrderAndPostType(offset int, limit int, PostAuthor_ int64, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and menu_order = ? and post_type = ?", PostAuthor_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndMenuOrderAndPostMimeType Get Postses via PostAuthorAndMenuOrderAndPostMimeType
func GetPostsesByPostAuthorAndMenuOrderAndPostMimeType(offset int, limit int, PostAuthor_ int64, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and menu_order = ? and post_mime_type = ?", PostAuthor_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndMenuOrderAndCommentCount Get Postses via PostAuthorAndMenuOrderAndCommentCount
func GetPostsesByPostAuthorAndMenuOrderAndCommentCount(offset int, limit int, PostAuthor_ int64, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and menu_order = ? and comment_count = ?", PostAuthor_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTypeAndPostMimeType Get Postses via PostAuthorAndPostTypeAndPostMimeType
func GetPostsesByPostAuthorAndPostTypeAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_type = ? and post_mime_type = ?", PostAuthor_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTypeAndCommentCount Get Postses via PostAuthorAndPostTypeAndCommentCount
func GetPostsesByPostAuthorAndPostTypeAndCommentCount(offset int, limit int, PostAuthor_ int64, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_type = ? and comment_count = ?", PostAuthor_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostMimeTypeAndCommentCount Get Postses via PostAuthorAndPostMimeTypeAndCommentCount
func GetPostsesByPostAuthorAndPostMimeTypeAndCommentCount(offset int, limit int, PostAuthor_ int64, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_mime_type = ? and comment_count = ?", PostAuthor_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostContent Get Postses via PostDateAndPostDateGmtAndPostContent
func GetPostsesByPostDateAndPostDateGmtAndPostContent(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostContent_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_content = ?", PostDate_, PostDateGmt_, PostContent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostTitle Get Postses via PostDateAndPostDateGmtAndPostTitle
func GetPostsesByPostDateAndPostDateGmtAndPostTitle(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_title = ?", PostDate_, PostDateGmt_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostExcerpt Get Postses via PostDateAndPostDateGmtAndPostExcerpt
func GetPostsesByPostDateAndPostDateGmtAndPostExcerpt(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_excerpt = ?", PostDate_, PostDateGmt_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostStatus Get Postses via PostDateAndPostDateGmtAndPostStatus
func GetPostsesByPostDateAndPostDateGmtAndPostStatus(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_status = ?", PostDate_, PostDateGmt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndCommentStatus Get Postses via PostDateAndPostDateGmtAndCommentStatus
func GetPostsesByPostDateAndPostDateGmtAndCommentStatus(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and comment_status = ?", PostDate_, PostDateGmt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPingStatus Get Postses via PostDateAndPostDateGmtAndPingStatus
func GetPostsesByPostDateAndPostDateGmtAndPingStatus(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and ping_status = ?", PostDate_, PostDateGmt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostPassword Get Postses via PostDateAndPostDateGmtAndPostPassword
func GetPostsesByPostDateAndPostDateGmtAndPostPassword(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_password = ?", PostDate_, PostDateGmt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostName Get Postses via PostDateAndPostDateGmtAndPostName
func GetPostsesByPostDateAndPostDateGmtAndPostName(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_name = ?", PostDate_, PostDateGmt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndToPing Get Postses via PostDateAndPostDateGmtAndToPing
func GetPostsesByPostDateAndPostDateGmtAndToPing(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and to_ping = ?", PostDate_, PostDateGmt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPinged Get Postses via PostDateAndPostDateGmtAndPinged
func GetPostsesByPostDateAndPostDateGmtAndPinged(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and pinged = ?", PostDate_, PostDateGmt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostModified Get Postses via PostDateAndPostDateGmtAndPostModified
func GetPostsesByPostDateAndPostDateGmtAndPostModified(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_modified = ?", PostDate_, PostDateGmt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostModifiedGmt Get Postses via PostDateAndPostDateGmtAndPostModifiedGmt
func GetPostsesByPostDateAndPostDateGmtAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_modified_gmt = ?", PostDate_, PostDateGmt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostContentFiltered Get Postses via PostDateAndPostDateGmtAndPostContentFiltered
func GetPostsesByPostDateAndPostDateGmtAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_content_filtered = ?", PostDate_, PostDateGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostParent Get Postses via PostDateAndPostDateGmtAndPostParent
func GetPostsesByPostDateAndPostDateGmtAndPostParent(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_parent = ?", PostDate_, PostDateGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndGuid Get Postses via PostDateAndPostDateGmtAndGuid
func GetPostsesByPostDateAndPostDateGmtAndGuid(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and guid = ?", PostDate_, PostDateGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndMenuOrder Get Postses via PostDateAndPostDateGmtAndMenuOrder
func GetPostsesByPostDateAndPostDateGmtAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and menu_order = ?", PostDate_, PostDateGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostType Get Postses via PostDateAndPostDateGmtAndPostType
func GetPostsesByPostDateAndPostDateGmtAndPostType(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_type = ?", PostDate_, PostDateGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndPostMimeType Get Postses via PostDateAndPostDateGmtAndPostMimeType
func GetPostsesByPostDateAndPostDateGmtAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and post_mime_type = ?", PostDate_, PostDateGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmtAndCommentCount Get Postses via PostDateAndPostDateGmtAndCommentCount
func GetPostsesByPostDateAndPostDateGmtAndCommentCount(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ? and comment_count = ?", PostDate_, PostDateGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostTitle Get Postses via PostDateAndPostContentAndPostTitle
func GetPostsesByPostDateAndPostContentAndPostTitle(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_title = ?", PostDate_, PostContent_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostExcerpt Get Postses via PostDateAndPostContentAndPostExcerpt
func GetPostsesByPostDateAndPostContentAndPostExcerpt(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_excerpt = ?", PostDate_, PostContent_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostStatus Get Postses via PostDateAndPostContentAndPostStatus
func GetPostsesByPostDateAndPostContentAndPostStatus(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_status = ?", PostDate_, PostContent_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndCommentStatus Get Postses via PostDateAndPostContentAndCommentStatus
func GetPostsesByPostDateAndPostContentAndCommentStatus(offset int, limit int, PostDate_ time.Time, PostContent_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and comment_status = ?", PostDate_, PostContent_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPingStatus Get Postses via PostDateAndPostContentAndPingStatus
func GetPostsesByPostDateAndPostContentAndPingStatus(offset int, limit int, PostDate_ time.Time, PostContent_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and ping_status = ?", PostDate_, PostContent_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostPassword Get Postses via PostDateAndPostContentAndPostPassword
func GetPostsesByPostDateAndPostContentAndPostPassword(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_password = ?", PostDate_, PostContent_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostName Get Postses via PostDateAndPostContentAndPostName
func GetPostsesByPostDateAndPostContentAndPostName(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_name = ?", PostDate_, PostContent_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndToPing Get Postses via PostDateAndPostContentAndToPing
func GetPostsesByPostDateAndPostContentAndToPing(offset int, limit int, PostDate_ time.Time, PostContent_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and to_ping = ?", PostDate_, PostContent_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPinged Get Postses via PostDateAndPostContentAndPinged
func GetPostsesByPostDateAndPostContentAndPinged(offset int, limit int, PostDate_ time.Time, PostContent_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and pinged = ?", PostDate_, PostContent_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostModified Get Postses via PostDateAndPostContentAndPostModified
func GetPostsesByPostDateAndPostContentAndPostModified(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_modified = ?", PostDate_, PostContent_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostModifiedGmt Get Postses via PostDateAndPostContentAndPostModifiedGmt
func GetPostsesByPostDateAndPostContentAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_modified_gmt = ?", PostDate_, PostContent_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostContentFiltered Get Postses via PostDateAndPostContentAndPostContentFiltered
func GetPostsesByPostDateAndPostContentAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_content_filtered = ?", PostDate_, PostContent_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostParent Get Postses via PostDateAndPostContentAndPostParent
func GetPostsesByPostDateAndPostContentAndPostParent(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_parent = ?", PostDate_, PostContent_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndGuid Get Postses via PostDateAndPostContentAndGuid
func GetPostsesByPostDateAndPostContentAndGuid(offset int, limit int, PostDate_ time.Time, PostContent_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and guid = ?", PostDate_, PostContent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndMenuOrder Get Postses via PostDateAndPostContentAndMenuOrder
func GetPostsesByPostDateAndPostContentAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostContent_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and menu_order = ?", PostDate_, PostContent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostType Get Postses via PostDateAndPostContentAndPostType
func GetPostsesByPostDateAndPostContentAndPostType(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_type = ?", PostDate_, PostContent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndPostMimeType Get Postses via PostDateAndPostContentAndPostMimeType
func GetPostsesByPostDateAndPostContentAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostContent_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and post_mime_type = ?", PostDate_, PostContent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentAndCommentCount Get Postses via PostDateAndPostContentAndCommentCount
func GetPostsesByPostDateAndPostContentAndCommentCount(offset int, limit int, PostDate_ time.Time, PostContent_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ? and comment_count = ?", PostDate_, PostContent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPostExcerpt Get Postses via PostDateAndPostTitleAndPostExcerpt
func GetPostsesByPostDateAndPostTitleAndPostExcerpt(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and post_excerpt = ?", PostDate_, PostTitle_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPostStatus Get Postses via PostDateAndPostTitleAndPostStatus
func GetPostsesByPostDateAndPostTitleAndPostStatus(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and post_status = ?", PostDate_, PostTitle_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndCommentStatus Get Postses via PostDateAndPostTitleAndCommentStatus
func GetPostsesByPostDateAndPostTitleAndCommentStatus(offset int, limit int, PostDate_ time.Time, PostTitle_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and comment_status = ?", PostDate_, PostTitle_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPingStatus Get Postses via PostDateAndPostTitleAndPingStatus
func GetPostsesByPostDateAndPostTitleAndPingStatus(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and ping_status = ?", PostDate_, PostTitle_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPostPassword Get Postses via PostDateAndPostTitleAndPostPassword
func GetPostsesByPostDateAndPostTitleAndPostPassword(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and post_password = ?", PostDate_, PostTitle_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPostName Get Postses via PostDateAndPostTitleAndPostName
func GetPostsesByPostDateAndPostTitleAndPostName(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and post_name = ?", PostDate_, PostTitle_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndToPing Get Postses via PostDateAndPostTitleAndToPing
func GetPostsesByPostDateAndPostTitleAndToPing(offset int, limit int, PostDate_ time.Time, PostTitle_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and to_ping = ?", PostDate_, PostTitle_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPinged Get Postses via PostDateAndPostTitleAndPinged
func GetPostsesByPostDateAndPostTitleAndPinged(offset int, limit int, PostDate_ time.Time, PostTitle_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and pinged = ?", PostDate_, PostTitle_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPostModified Get Postses via PostDateAndPostTitleAndPostModified
func GetPostsesByPostDateAndPostTitleAndPostModified(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and post_modified = ?", PostDate_, PostTitle_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPostModifiedGmt Get Postses via PostDateAndPostTitleAndPostModifiedGmt
func GetPostsesByPostDateAndPostTitleAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and post_modified_gmt = ?", PostDate_, PostTitle_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPostContentFiltered Get Postses via PostDateAndPostTitleAndPostContentFiltered
func GetPostsesByPostDateAndPostTitleAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and post_content_filtered = ?", PostDate_, PostTitle_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPostParent Get Postses via PostDateAndPostTitleAndPostParent
func GetPostsesByPostDateAndPostTitleAndPostParent(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and post_parent = ?", PostDate_, PostTitle_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndGuid Get Postses via PostDateAndPostTitleAndGuid
func GetPostsesByPostDateAndPostTitleAndGuid(offset int, limit int, PostDate_ time.Time, PostTitle_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and guid = ?", PostDate_, PostTitle_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndMenuOrder Get Postses via PostDateAndPostTitleAndMenuOrder
func GetPostsesByPostDateAndPostTitleAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostTitle_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and menu_order = ?", PostDate_, PostTitle_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPostType Get Postses via PostDateAndPostTitleAndPostType
func GetPostsesByPostDateAndPostTitleAndPostType(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and post_type = ?", PostDate_, PostTitle_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndPostMimeType Get Postses via PostDateAndPostTitleAndPostMimeType
func GetPostsesByPostDateAndPostTitleAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostTitle_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and post_mime_type = ?", PostDate_, PostTitle_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitleAndCommentCount Get Postses via PostDateAndPostTitleAndCommentCount
func GetPostsesByPostDateAndPostTitleAndCommentCount(offset int, limit int, PostDate_ time.Time, PostTitle_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ? and comment_count = ?", PostDate_, PostTitle_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPostStatus Get Postses via PostDateAndPostExcerptAndPostStatus
func GetPostsesByPostDateAndPostExcerptAndPostStatus(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and post_status = ?", PostDate_, PostExcerpt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndCommentStatus Get Postses via PostDateAndPostExcerptAndCommentStatus
func GetPostsesByPostDateAndPostExcerptAndCommentStatus(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and comment_status = ?", PostDate_, PostExcerpt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPingStatus Get Postses via PostDateAndPostExcerptAndPingStatus
func GetPostsesByPostDateAndPostExcerptAndPingStatus(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and ping_status = ?", PostDate_, PostExcerpt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPostPassword Get Postses via PostDateAndPostExcerptAndPostPassword
func GetPostsesByPostDateAndPostExcerptAndPostPassword(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and post_password = ?", PostDate_, PostExcerpt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPostName Get Postses via PostDateAndPostExcerptAndPostName
func GetPostsesByPostDateAndPostExcerptAndPostName(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and post_name = ?", PostDate_, PostExcerpt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndToPing Get Postses via PostDateAndPostExcerptAndToPing
func GetPostsesByPostDateAndPostExcerptAndToPing(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and to_ping = ?", PostDate_, PostExcerpt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPinged Get Postses via PostDateAndPostExcerptAndPinged
func GetPostsesByPostDateAndPostExcerptAndPinged(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and pinged = ?", PostDate_, PostExcerpt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPostModified Get Postses via PostDateAndPostExcerptAndPostModified
func GetPostsesByPostDateAndPostExcerptAndPostModified(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and post_modified = ?", PostDate_, PostExcerpt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPostModifiedGmt Get Postses via PostDateAndPostExcerptAndPostModifiedGmt
func GetPostsesByPostDateAndPostExcerptAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and post_modified_gmt = ?", PostDate_, PostExcerpt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPostContentFiltered Get Postses via PostDateAndPostExcerptAndPostContentFiltered
func GetPostsesByPostDateAndPostExcerptAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and post_content_filtered = ?", PostDate_, PostExcerpt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPostParent Get Postses via PostDateAndPostExcerptAndPostParent
func GetPostsesByPostDateAndPostExcerptAndPostParent(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and post_parent = ?", PostDate_, PostExcerpt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndGuid Get Postses via PostDateAndPostExcerptAndGuid
func GetPostsesByPostDateAndPostExcerptAndGuid(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and guid = ?", PostDate_, PostExcerpt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndMenuOrder Get Postses via PostDateAndPostExcerptAndMenuOrder
func GetPostsesByPostDateAndPostExcerptAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and menu_order = ?", PostDate_, PostExcerpt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPostType Get Postses via PostDateAndPostExcerptAndPostType
func GetPostsesByPostDateAndPostExcerptAndPostType(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and post_type = ?", PostDate_, PostExcerpt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndPostMimeType Get Postses via PostDateAndPostExcerptAndPostMimeType
func GetPostsesByPostDateAndPostExcerptAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and post_mime_type = ?", PostDate_, PostExcerpt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerptAndCommentCount Get Postses via PostDateAndPostExcerptAndCommentCount
func GetPostsesByPostDateAndPostExcerptAndCommentCount(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ? and comment_count = ?", PostDate_, PostExcerpt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndCommentStatus Get Postses via PostDateAndPostStatusAndCommentStatus
func GetPostsesByPostDateAndPostStatusAndCommentStatus(offset int, limit int, PostDate_ time.Time, PostStatus_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and comment_status = ?", PostDate_, PostStatus_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndPingStatus Get Postses via PostDateAndPostStatusAndPingStatus
func GetPostsesByPostDateAndPostStatusAndPingStatus(offset int, limit int, PostDate_ time.Time, PostStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and ping_status = ?", PostDate_, PostStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndPostPassword Get Postses via PostDateAndPostStatusAndPostPassword
func GetPostsesByPostDateAndPostStatusAndPostPassword(offset int, limit int, PostDate_ time.Time, PostStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and post_password = ?", PostDate_, PostStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndPostName Get Postses via PostDateAndPostStatusAndPostName
func GetPostsesByPostDateAndPostStatusAndPostName(offset int, limit int, PostDate_ time.Time, PostStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and post_name = ?", PostDate_, PostStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndToPing Get Postses via PostDateAndPostStatusAndToPing
func GetPostsesByPostDateAndPostStatusAndToPing(offset int, limit int, PostDate_ time.Time, PostStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and to_ping = ?", PostDate_, PostStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndPinged Get Postses via PostDateAndPostStatusAndPinged
func GetPostsesByPostDateAndPostStatusAndPinged(offset int, limit int, PostDate_ time.Time, PostStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and pinged = ?", PostDate_, PostStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndPostModified Get Postses via PostDateAndPostStatusAndPostModified
func GetPostsesByPostDateAndPostStatusAndPostModified(offset int, limit int, PostDate_ time.Time, PostStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and post_modified = ?", PostDate_, PostStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndPostModifiedGmt Get Postses via PostDateAndPostStatusAndPostModifiedGmt
func GetPostsesByPostDateAndPostStatusAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, PostStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and post_modified_gmt = ?", PostDate_, PostStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndPostContentFiltered Get Postses via PostDateAndPostStatusAndPostContentFiltered
func GetPostsesByPostDateAndPostStatusAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PostStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and post_content_filtered = ?", PostDate_, PostStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndPostParent Get Postses via PostDateAndPostStatusAndPostParent
func GetPostsesByPostDateAndPostStatusAndPostParent(offset int, limit int, PostDate_ time.Time, PostStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and post_parent = ?", PostDate_, PostStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndGuid Get Postses via PostDateAndPostStatusAndGuid
func GetPostsesByPostDateAndPostStatusAndGuid(offset int, limit int, PostDate_ time.Time, PostStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and guid = ?", PostDate_, PostStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndMenuOrder Get Postses via PostDateAndPostStatusAndMenuOrder
func GetPostsesByPostDateAndPostStatusAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and menu_order = ?", PostDate_, PostStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndPostType Get Postses via PostDateAndPostStatusAndPostType
func GetPostsesByPostDateAndPostStatusAndPostType(offset int, limit int, PostDate_ time.Time, PostStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and post_type = ?", PostDate_, PostStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndPostMimeType Get Postses via PostDateAndPostStatusAndPostMimeType
func GetPostsesByPostDateAndPostStatusAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and post_mime_type = ?", PostDate_, PostStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatusAndCommentCount Get Postses via PostDateAndPostStatusAndCommentCount
func GetPostsesByPostDateAndPostStatusAndCommentCount(offset int, limit int, PostDate_ time.Time, PostStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ? and comment_count = ?", PostDate_, PostStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndPingStatus Get Postses via PostDateAndCommentStatusAndPingStatus
func GetPostsesByPostDateAndCommentStatusAndPingStatus(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and ping_status = ?", PostDate_, CommentStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndPostPassword Get Postses via PostDateAndCommentStatusAndPostPassword
func GetPostsesByPostDateAndCommentStatusAndPostPassword(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and post_password = ?", PostDate_, CommentStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndPostName Get Postses via PostDateAndCommentStatusAndPostName
func GetPostsesByPostDateAndCommentStatusAndPostName(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and post_name = ?", PostDate_, CommentStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndToPing Get Postses via PostDateAndCommentStatusAndToPing
func GetPostsesByPostDateAndCommentStatusAndToPing(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and to_ping = ?", PostDate_, CommentStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndPinged Get Postses via PostDateAndCommentStatusAndPinged
func GetPostsesByPostDateAndCommentStatusAndPinged(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and pinged = ?", PostDate_, CommentStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndPostModified Get Postses via PostDateAndCommentStatusAndPostModified
func GetPostsesByPostDateAndCommentStatusAndPostModified(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and post_modified = ?", PostDate_, CommentStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndPostModifiedGmt Get Postses via PostDateAndCommentStatusAndPostModifiedGmt
func GetPostsesByPostDateAndCommentStatusAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and post_modified_gmt = ?", PostDate_, CommentStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndPostContentFiltered Get Postses via PostDateAndCommentStatusAndPostContentFiltered
func GetPostsesByPostDateAndCommentStatusAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and post_content_filtered = ?", PostDate_, CommentStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndPostParent Get Postses via PostDateAndCommentStatusAndPostParent
func GetPostsesByPostDateAndCommentStatusAndPostParent(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and post_parent = ?", PostDate_, CommentStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndGuid Get Postses via PostDateAndCommentStatusAndGuid
func GetPostsesByPostDateAndCommentStatusAndGuid(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and guid = ?", PostDate_, CommentStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndMenuOrder Get Postses via PostDateAndCommentStatusAndMenuOrder
func GetPostsesByPostDateAndCommentStatusAndMenuOrder(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and menu_order = ?", PostDate_, CommentStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndPostType Get Postses via PostDateAndCommentStatusAndPostType
func GetPostsesByPostDateAndCommentStatusAndPostType(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and post_type = ?", PostDate_, CommentStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndPostMimeType Get Postses via PostDateAndCommentStatusAndPostMimeType
func GetPostsesByPostDateAndCommentStatusAndPostMimeType(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and post_mime_type = ?", PostDate_, CommentStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatusAndCommentCount Get Postses via PostDateAndCommentStatusAndCommentCount
func GetPostsesByPostDateAndCommentStatusAndCommentCount(offset int, limit int, PostDate_ time.Time, CommentStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ? and comment_count = ?", PostDate_, CommentStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndPostPassword Get Postses via PostDateAndPingStatusAndPostPassword
func GetPostsesByPostDateAndPingStatusAndPostPassword(offset int, limit int, PostDate_ time.Time, PingStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and post_password = ?", PostDate_, PingStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndPostName Get Postses via PostDateAndPingStatusAndPostName
func GetPostsesByPostDateAndPingStatusAndPostName(offset int, limit int, PostDate_ time.Time, PingStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and post_name = ?", PostDate_, PingStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndToPing Get Postses via PostDateAndPingStatusAndToPing
func GetPostsesByPostDateAndPingStatusAndToPing(offset int, limit int, PostDate_ time.Time, PingStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and to_ping = ?", PostDate_, PingStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndPinged Get Postses via PostDateAndPingStatusAndPinged
func GetPostsesByPostDateAndPingStatusAndPinged(offset int, limit int, PostDate_ time.Time, PingStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and pinged = ?", PostDate_, PingStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndPostModified Get Postses via PostDateAndPingStatusAndPostModified
func GetPostsesByPostDateAndPingStatusAndPostModified(offset int, limit int, PostDate_ time.Time, PingStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and post_modified = ?", PostDate_, PingStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndPostModifiedGmt Get Postses via PostDateAndPingStatusAndPostModifiedGmt
func GetPostsesByPostDateAndPingStatusAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, PingStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and post_modified_gmt = ?", PostDate_, PingStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndPostContentFiltered Get Postses via PostDateAndPingStatusAndPostContentFiltered
func GetPostsesByPostDateAndPingStatusAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PingStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and post_content_filtered = ?", PostDate_, PingStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndPostParent Get Postses via PostDateAndPingStatusAndPostParent
func GetPostsesByPostDateAndPingStatusAndPostParent(offset int, limit int, PostDate_ time.Time, PingStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and post_parent = ?", PostDate_, PingStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndGuid Get Postses via PostDateAndPingStatusAndGuid
func GetPostsesByPostDateAndPingStatusAndGuid(offset int, limit int, PostDate_ time.Time, PingStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and guid = ?", PostDate_, PingStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndMenuOrder Get Postses via PostDateAndPingStatusAndMenuOrder
func GetPostsesByPostDateAndPingStatusAndMenuOrder(offset int, limit int, PostDate_ time.Time, PingStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and menu_order = ?", PostDate_, PingStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndPostType Get Postses via PostDateAndPingStatusAndPostType
func GetPostsesByPostDateAndPingStatusAndPostType(offset int, limit int, PostDate_ time.Time, PingStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and post_type = ?", PostDate_, PingStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndPostMimeType Get Postses via PostDateAndPingStatusAndPostMimeType
func GetPostsesByPostDateAndPingStatusAndPostMimeType(offset int, limit int, PostDate_ time.Time, PingStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and post_mime_type = ?", PostDate_, PingStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatusAndCommentCount Get Postses via PostDateAndPingStatusAndCommentCount
func GetPostsesByPostDateAndPingStatusAndCommentCount(offset int, limit int, PostDate_ time.Time, PingStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ? and comment_count = ?", PostDate_, PingStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndPostName Get Postses via PostDateAndPostPasswordAndPostName
func GetPostsesByPostDateAndPostPasswordAndPostName(offset int, limit int, PostDate_ time.Time, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and post_name = ?", PostDate_, PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndToPing Get Postses via PostDateAndPostPasswordAndToPing
func GetPostsesByPostDateAndPostPasswordAndToPing(offset int, limit int, PostDate_ time.Time, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and to_ping = ?", PostDate_, PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndPinged Get Postses via PostDateAndPostPasswordAndPinged
func GetPostsesByPostDateAndPostPasswordAndPinged(offset int, limit int, PostDate_ time.Time, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and pinged = ?", PostDate_, PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndPostModified Get Postses via PostDateAndPostPasswordAndPostModified
func GetPostsesByPostDateAndPostPasswordAndPostModified(offset int, limit int, PostDate_ time.Time, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and post_modified = ?", PostDate_, PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndPostModifiedGmt Get Postses via PostDateAndPostPasswordAndPostModifiedGmt
func GetPostsesByPostDateAndPostPasswordAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and post_modified_gmt = ?", PostDate_, PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndPostContentFiltered Get Postses via PostDateAndPostPasswordAndPostContentFiltered
func GetPostsesByPostDateAndPostPasswordAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and post_content_filtered = ?", PostDate_, PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndPostParent Get Postses via PostDateAndPostPasswordAndPostParent
func GetPostsesByPostDateAndPostPasswordAndPostParent(offset int, limit int, PostDate_ time.Time, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and post_parent = ?", PostDate_, PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndGuid Get Postses via PostDateAndPostPasswordAndGuid
func GetPostsesByPostDateAndPostPasswordAndGuid(offset int, limit int, PostDate_ time.Time, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and guid = ?", PostDate_, PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndMenuOrder Get Postses via PostDateAndPostPasswordAndMenuOrder
func GetPostsesByPostDateAndPostPasswordAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and menu_order = ?", PostDate_, PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndPostType Get Postses via PostDateAndPostPasswordAndPostType
func GetPostsesByPostDateAndPostPasswordAndPostType(offset int, limit int, PostDate_ time.Time, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and post_type = ?", PostDate_, PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndPostMimeType Get Postses via PostDateAndPostPasswordAndPostMimeType
func GetPostsesByPostDateAndPostPasswordAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and post_mime_type = ?", PostDate_, PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPasswordAndCommentCount Get Postses via PostDateAndPostPasswordAndCommentCount
func GetPostsesByPostDateAndPostPasswordAndCommentCount(offset int, limit int, PostDate_ time.Time, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ? and comment_count = ?", PostDate_, PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndToPing Get Postses via PostDateAndPostNameAndToPing
func GetPostsesByPostDateAndPostNameAndToPing(offset int, limit int, PostDate_ time.Time, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and to_ping = ?", PostDate_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndPinged Get Postses via PostDateAndPostNameAndPinged
func GetPostsesByPostDateAndPostNameAndPinged(offset int, limit int, PostDate_ time.Time, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and pinged = ?", PostDate_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndPostModified Get Postses via PostDateAndPostNameAndPostModified
func GetPostsesByPostDateAndPostNameAndPostModified(offset int, limit int, PostDate_ time.Time, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and post_modified = ?", PostDate_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndPostModifiedGmt Get Postses via PostDateAndPostNameAndPostModifiedGmt
func GetPostsesByPostDateAndPostNameAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and post_modified_gmt = ?", PostDate_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndPostContentFiltered Get Postses via PostDateAndPostNameAndPostContentFiltered
func GetPostsesByPostDateAndPostNameAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and post_content_filtered = ?", PostDate_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndPostParent Get Postses via PostDateAndPostNameAndPostParent
func GetPostsesByPostDateAndPostNameAndPostParent(offset int, limit int, PostDate_ time.Time, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and post_parent = ?", PostDate_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndGuid Get Postses via PostDateAndPostNameAndGuid
func GetPostsesByPostDateAndPostNameAndGuid(offset int, limit int, PostDate_ time.Time, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and guid = ?", PostDate_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndMenuOrder Get Postses via PostDateAndPostNameAndMenuOrder
func GetPostsesByPostDateAndPostNameAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and menu_order = ?", PostDate_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndPostType Get Postses via PostDateAndPostNameAndPostType
func GetPostsesByPostDateAndPostNameAndPostType(offset int, limit int, PostDate_ time.Time, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and post_type = ?", PostDate_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndPostMimeType Get Postses via PostDateAndPostNameAndPostMimeType
func GetPostsesByPostDateAndPostNameAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and post_mime_type = ?", PostDate_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostNameAndCommentCount Get Postses via PostDateAndPostNameAndCommentCount
func GetPostsesByPostDateAndPostNameAndCommentCount(offset int, limit int, PostDate_ time.Time, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ? and comment_count = ?", PostDate_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPingAndPinged Get Postses via PostDateAndToPingAndPinged
func GetPostsesByPostDateAndToPingAndPinged(offset int, limit int, PostDate_ time.Time, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ? and pinged = ?", PostDate_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPingAndPostModified Get Postses via PostDateAndToPingAndPostModified
func GetPostsesByPostDateAndToPingAndPostModified(offset int, limit int, PostDate_ time.Time, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ? and post_modified = ?", PostDate_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPingAndPostModifiedGmt Get Postses via PostDateAndToPingAndPostModifiedGmt
func GetPostsesByPostDateAndToPingAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ? and post_modified_gmt = ?", PostDate_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPingAndPostContentFiltered Get Postses via PostDateAndToPingAndPostContentFiltered
func GetPostsesByPostDateAndToPingAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ? and post_content_filtered = ?", PostDate_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPingAndPostParent Get Postses via PostDateAndToPingAndPostParent
func GetPostsesByPostDateAndToPingAndPostParent(offset int, limit int, PostDate_ time.Time, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ? and post_parent = ?", PostDate_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPingAndGuid Get Postses via PostDateAndToPingAndGuid
func GetPostsesByPostDateAndToPingAndGuid(offset int, limit int, PostDate_ time.Time, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ? and guid = ?", PostDate_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPingAndMenuOrder Get Postses via PostDateAndToPingAndMenuOrder
func GetPostsesByPostDateAndToPingAndMenuOrder(offset int, limit int, PostDate_ time.Time, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ? and menu_order = ?", PostDate_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPingAndPostType Get Postses via PostDateAndToPingAndPostType
func GetPostsesByPostDateAndToPingAndPostType(offset int, limit int, PostDate_ time.Time, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ? and post_type = ?", PostDate_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPingAndPostMimeType Get Postses via PostDateAndToPingAndPostMimeType
func GetPostsesByPostDateAndToPingAndPostMimeType(offset int, limit int, PostDate_ time.Time, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ? and post_mime_type = ?", PostDate_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPingAndCommentCount Get Postses via PostDateAndToPingAndCommentCount
func GetPostsesByPostDateAndToPingAndCommentCount(offset int, limit int, PostDate_ time.Time, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ? and comment_count = ?", PostDate_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingedAndPostModified Get Postses via PostDateAndPingedAndPostModified
func GetPostsesByPostDateAndPingedAndPostModified(offset int, limit int, PostDate_ time.Time, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and pinged = ? and post_modified = ?", PostDate_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingedAndPostModifiedGmt Get Postses via PostDateAndPingedAndPostModifiedGmt
func GetPostsesByPostDateAndPingedAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and pinged = ? and post_modified_gmt = ?", PostDate_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingedAndPostContentFiltered Get Postses via PostDateAndPingedAndPostContentFiltered
func GetPostsesByPostDateAndPingedAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and pinged = ? and post_content_filtered = ?", PostDate_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingedAndPostParent Get Postses via PostDateAndPingedAndPostParent
func GetPostsesByPostDateAndPingedAndPostParent(offset int, limit int, PostDate_ time.Time, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and pinged = ? and post_parent = ?", PostDate_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingedAndGuid Get Postses via PostDateAndPingedAndGuid
func GetPostsesByPostDateAndPingedAndGuid(offset int, limit int, PostDate_ time.Time, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and pinged = ? and guid = ?", PostDate_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingedAndMenuOrder Get Postses via PostDateAndPingedAndMenuOrder
func GetPostsesByPostDateAndPingedAndMenuOrder(offset int, limit int, PostDate_ time.Time, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and pinged = ? and menu_order = ?", PostDate_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingedAndPostType Get Postses via PostDateAndPingedAndPostType
func GetPostsesByPostDateAndPingedAndPostType(offset int, limit int, PostDate_ time.Time, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and pinged = ? and post_type = ?", PostDate_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingedAndPostMimeType Get Postses via PostDateAndPingedAndPostMimeType
func GetPostsesByPostDateAndPingedAndPostMimeType(offset int, limit int, PostDate_ time.Time, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and pinged = ? and post_mime_type = ?", PostDate_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingedAndCommentCount Get Postses via PostDateAndPingedAndCommentCount
func GetPostsesByPostDateAndPingedAndCommentCount(offset int, limit int, PostDate_ time.Time, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and pinged = ? and comment_count = ?", PostDate_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedAndPostModifiedGmt Get Postses via PostDateAndPostModifiedAndPostModifiedGmt
func GetPostsesByPostDateAndPostModifiedAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified = ? and post_modified_gmt = ?", PostDate_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedAndPostContentFiltered Get Postses via PostDateAndPostModifiedAndPostContentFiltered
func GetPostsesByPostDateAndPostModifiedAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified = ? and post_content_filtered = ?", PostDate_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedAndPostParent Get Postses via PostDateAndPostModifiedAndPostParent
func GetPostsesByPostDateAndPostModifiedAndPostParent(offset int, limit int, PostDate_ time.Time, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified = ? and post_parent = ?", PostDate_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedAndGuid Get Postses via PostDateAndPostModifiedAndGuid
func GetPostsesByPostDateAndPostModifiedAndGuid(offset int, limit int, PostDate_ time.Time, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified = ? and guid = ?", PostDate_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedAndMenuOrder Get Postses via PostDateAndPostModifiedAndMenuOrder
func GetPostsesByPostDateAndPostModifiedAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified = ? and menu_order = ?", PostDate_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedAndPostType Get Postses via PostDateAndPostModifiedAndPostType
func GetPostsesByPostDateAndPostModifiedAndPostType(offset int, limit int, PostDate_ time.Time, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified = ? and post_type = ?", PostDate_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedAndPostMimeType Get Postses via PostDateAndPostModifiedAndPostMimeType
func GetPostsesByPostDateAndPostModifiedAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified = ? and post_mime_type = ?", PostDate_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedAndCommentCount Get Postses via PostDateAndPostModifiedAndCommentCount
func GetPostsesByPostDateAndPostModifiedAndCommentCount(offset int, limit int, PostDate_ time.Time, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified = ? and comment_count = ?", PostDate_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedGmtAndPostContentFiltered Get Postses via PostDateAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPostDateAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified_gmt = ? and post_content_filtered = ?", PostDate_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedGmtAndPostParent Get Postses via PostDateAndPostModifiedGmtAndPostParent
func GetPostsesByPostDateAndPostModifiedGmtAndPostParent(offset int, limit int, PostDate_ time.Time, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified_gmt = ? and post_parent = ?", PostDate_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedGmtAndGuid Get Postses via PostDateAndPostModifiedGmtAndGuid
func GetPostsesByPostDateAndPostModifiedGmtAndGuid(offset int, limit int, PostDate_ time.Time, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified_gmt = ? and guid = ?", PostDate_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedGmtAndMenuOrder Get Postses via PostDateAndPostModifiedGmtAndMenuOrder
func GetPostsesByPostDateAndPostModifiedGmtAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified_gmt = ? and menu_order = ?", PostDate_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedGmtAndPostType Get Postses via PostDateAndPostModifiedGmtAndPostType
func GetPostsesByPostDateAndPostModifiedGmtAndPostType(offset int, limit int, PostDate_ time.Time, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified_gmt = ? and post_type = ?", PostDate_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedGmtAndPostMimeType Get Postses via PostDateAndPostModifiedGmtAndPostMimeType
func GetPostsesByPostDateAndPostModifiedGmtAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified_gmt = ? and post_mime_type = ?", PostDate_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedGmtAndCommentCount Get Postses via PostDateAndPostModifiedGmtAndCommentCount
func GetPostsesByPostDateAndPostModifiedGmtAndCommentCount(offset int, limit int, PostDate_ time.Time, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified_gmt = ? and comment_count = ?", PostDate_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentFilteredAndPostParent Get Postses via PostDateAndPostContentFilteredAndPostParent
func GetPostsesByPostDateAndPostContentFilteredAndPostParent(offset int, limit int, PostDate_ time.Time, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content_filtered = ? and post_parent = ?", PostDate_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentFilteredAndGuid Get Postses via PostDateAndPostContentFilteredAndGuid
func GetPostsesByPostDateAndPostContentFilteredAndGuid(offset int, limit int, PostDate_ time.Time, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content_filtered = ? and guid = ?", PostDate_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentFilteredAndMenuOrder Get Postses via PostDateAndPostContentFilteredAndMenuOrder
func GetPostsesByPostDateAndPostContentFilteredAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content_filtered = ? and menu_order = ?", PostDate_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentFilteredAndPostType Get Postses via PostDateAndPostContentFilteredAndPostType
func GetPostsesByPostDateAndPostContentFilteredAndPostType(offset int, limit int, PostDate_ time.Time, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content_filtered = ? and post_type = ?", PostDate_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentFilteredAndPostMimeType Get Postses via PostDateAndPostContentFilteredAndPostMimeType
func GetPostsesByPostDateAndPostContentFilteredAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content_filtered = ? and post_mime_type = ?", PostDate_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentFilteredAndCommentCount Get Postses via PostDateAndPostContentFilteredAndCommentCount
func GetPostsesByPostDateAndPostContentFilteredAndCommentCount(offset int, limit int, PostDate_ time.Time, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content_filtered = ? and comment_count = ?", PostDate_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostParentAndGuid Get Postses via PostDateAndPostParentAndGuid
func GetPostsesByPostDateAndPostParentAndGuid(offset int, limit int, PostDate_ time.Time, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_parent = ? and guid = ?", PostDate_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostParentAndMenuOrder Get Postses via PostDateAndPostParentAndMenuOrder
func GetPostsesByPostDateAndPostParentAndMenuOrder(offset int, limit int, PostDate_ time.Time, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_parent = ? and menu_order = ?", PostDate_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostParentAndPostType Get Postses via PostDateAndPostParentAndPostType
func GetPostsesByPostDateAndPostParentAndPostType(offset int, limit int, PostDate_ time.Time, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_parent = ? and post_type = ?", PostDate_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostParentAndPostMimeType Get Postses via PostDateAndPostParentAndPostMimeType
func GetPostsesByPostDateAndPostParentAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_parent = ? and post_mime_type = ?", PostDate_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostParentAndCommentCount Get Postses via PostDateAndPostParentAndCommentCount
func GetPostsesByPostDateAndPostParentAndCommentCount(offset int, limit int, PostDate_ time.Time, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_parent = ? and comment_count = ?", PostDate_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndGuidAndMenuOrder Get Postses via PostDateAndGuidAndMenuOrder
func GetPostsesByPostDateAndGuidAndMenuOrder(offset int, limit int, PostDate_ time.Time, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and guid = ? and menu_order = ?", PostDate_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndGuidAndPostType Get Postses via PostDateAndGuidAndPostType
func GetPostsesByPostDateAndGuidAndPostType(offset int, limit int, PostDate_ time.Time, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and guid = ? and post_type = ?", PostDate_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndGuidAndPostMimeType Get Postses via PostDateAndGuidAndPostMimeType
func GetPostsesByPostDateAndGuidAndPostMimeType(offset int, limit int, PostDate_ time.Time, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and guid = ? and post_mime_type = ?", PostDate_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndGuidAndCommentCount Get Postses via PostDateAndGuidAndCommentCount
func GetPostsesByPostDateAndGuidAndCommentCount(offset int, limit int, PostDate_ time.Time, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and guid = ? and comment_count = ?", PostDate_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndMenuOrderAndPostType Get Postses via PostDateAndMenuOrderAndPostType
func GetPostsesByPostDateAndMenuOrderAndPostType(offset int, limit int, PostDate_ time.Time, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and menu_order = ? and post_type = ?", PostDate_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndMenuOrderAndPostMimeType Get Postses via PostDateAndMenuOrderAndPostMimeType
func GetPostsesByPostDateAndMenuOrderAndPostMimeType(offset int, limit int, PostDate_ time.Time, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and menu_order = ? and post_mime_type = ?", PostDate_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndMenuOrderAndCommentCount Get Postses via PostDateAndMenuOrderAndCommentCount
func GetPostsesByPostDateAndMenuOrderAndCommentCount(offset int, limit int, PostDate_ time.Time, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and menu_order = ? and comment_count = ?", PostDate_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTypeAndPostMimeType Get Postses via PostDateAndPostTypeAndPostMimeType
func GetPostsesByPostDateAndPostTypeAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_type = ? and post_mime_type = ?", PostDate_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTypeAndCommentCount Get Postses via PostDateAndPostTypeAndCommentCount
func GetPostsesByPostDateAndPostTypeAndCommentCount(offset int, limit int, PostDate_ time.Time, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_type = ? and comment_count = ?", PostDate_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostMimeTypeAndCommentCount Get Postses via PostDateAndPostMimeTypeAndCommentCount
func GetPostsesByPostDateAndPostMimeTypeAndCommentCount(offset int, limit int, PostDate_ time.Time, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_mime_type = ? and comment_count = ?", PostDate_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostTitle Get Postses via PostDateGmtAndPostContentAndPostTitle
func GetPostsesByPostDateGmtAndPostContentAndPostTitle(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_title = ?", PostDateGmt_, PostContent_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostExcerpt Get Postses via PostDateGmtAndPostContentAndPostExcerpt
func GetPostsesByPostDateGmtAndPostContentAndPostExcerpt(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_excerpt = ?", PostDateGmt_, PostContent_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostStatus Get Postses via PostDateGmtAndPostContentAndPostStatus
func GetPostsesByPostDateGmtAndPostContentAndPostStatus(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_status = ?", PostDateGmt_, PostContent_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndCommentStatus Get Postses via PostDateGmtAndPostContentAndCommentStatus
func GetPostsesByPostDateGmtAndPostContentAndCommentStatus(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and comment_status = ?", PostDateGmt_, PostContent_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPingStatus Get Postses via PostDateGmtAndPostContentAndPingStatus
func GetPostsesByPostDateGmtAndPostContentAndPingStatus(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and ping_status = ?", PostDateGmt_, PostContent_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostPassword Get Postses via PostDateGmtAndPostContentAndPostPassword
func GetPostsesByPostDateGmtAndPostContentAndPostPassword(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_password = ?", PostDateGmt_, PostContent_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostName Get Postses via PostDateGmtAndPostContentAndPostName
func GetPostsesByPostDateGmtAndPostContentAndPostName(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_name = ?", PostDateGmt_, PostContent_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndToPing Get Postses via PostDateGmtAndPostContentAndToPing
func GetPostsesByPostDateGmtAndPostContentAndToPing(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and to_ping = ?", PostDateGmt_, PostContent_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPinged Get Postses via PostDateGmtAndPostContentAndPinged
func GetPostsesByPostDateGmtAndPostContentAndPinged(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and pinged = ?", PostDateGmt_, PostContent_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostModified Get Postses via PostDateGmtAndPostContentAndPostModified
func GetPostsesByPostDateGmtAndPostContentAndPostModified(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_modified = ?", PostDateGmt_, PostContent_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostModifiedGmt Get Postses via PostDateGmtAndPostContentAndPostModifiedGmt
func GetPostsesByPostDateGmtAndPostContentAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_modified_gmt = ?", PostDateGmt_, PostContent_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostContentFiltered Get Postses via PostDateGmtAndPostContentAndPostContentFiltered
func GetPostsesByPostDateGmtAndPostContentAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_content_filtered = ?", PostDateGmt_, PostContent_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostParent Get Postses via PostDateGmtAndPostContentAndPostParent
func GetPostsesByPostDateGmtAndPostContentAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_parent = ?", PostDateGmt_, PostContent_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndGuid Get Postses via PostDateGmtAndPostContentAndGuid
func GetPostsesByPostDateGmtAndPostContentAndGuid(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and guid = ?", PostDateGmt_, PostContent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndMenuOrder Get Postses via PostDateGmtAndPostContentAndMenuOrder
func GetPostsesByPostDateGmtAndPostContentAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and menu_order = ?", PostDateGmt_, PostContent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostType Get Postses via PostDateGmtAndPostContentAndPostType
func GetPostsesByPostDateGmtAndPostContentAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_type = ?", PostDateGmt_, PostContent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndPostMimeType Get Postses via PostDateGmtAndPostContentAndPostMimeType
func GetPostsesByPostDateGmtAndPostContentAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and post_mime_type = ?", PostDateGmt_, PostContent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentAndCommentCount Get Postses via PostDateGmtAndPostContentAndCommentCount
func GetPostsesByPostDateGmtAndPostContentAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ? and comment_count = ?", PostDateGmt_, PostContent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPostExcerpt Get Postses via PostDateGmtAndPostTitleAndPostExcerpt
func GetPostsesByPostDateGmtAndPostTitleAndPostExcerpt(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and post_excerpt = ?", PostDateGmt_, PostTitle_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPostStatus Get Postses via PostDateGmtAndPostTitleAndPostStatus
func GetPostsesByPostDateGmtAndPostTitleAndPostStatus(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and post_status = ?", PostDateGmt_, PostTitle_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndCommentStatus Get Postses via PostDateGmtAndPostTitleAndCommentStatus
func GetPostsesByPostDateGmtAndPostTitleAndCommentStatus(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and comment_status = ?", PostDateGmt_, PostTitle_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPingStatus Get Postses via PostDateGmtAndPostTitleAndPingStatus
func GetPostsesByPostDateGmtAndPostTitleAndPingStatus(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and ping_status = ?", PostDateGmt_, PostTitle_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPostPassword Get Postses via PostDateGmtAndPostTitleAndPostPassword
func GetPostsesByPostDateGmtAndPostTitleAndPostPassword(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and post_password = ?", PostDateGmt_, PostTitle_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPostName Get Postses via PostDateGmtAndPostTitleAndPostName
func GetPostsesByPostDateGmtAndPostTitleAndPostName(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and post_name = ?", PostDateGmt_, PostTitle_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndToPing Get Postses via PostDateGmtAndPostTitleAndToPing
func GetPostsesByPostDateGmtAndPostTitleAndToPing(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and to_ping = ?", PostDateGmt_, PostTitle_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPinged Get Postses via PostDateGmtAndPostTitleAndPinged
func GetPostsesByPostDateGmtAndPostTitleAndPinged(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and pinged = ?", PostDateGmt_, PostTitle_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPostModified Get Postses via PostDateGmtAndPostTitleAndPostModified
func GetPostsesByPostDateGmtAndPostTitleAndPostModified(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and post_modified = ?", PostDateGmt_, PostTitle_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPostModifiedGmt Get Postses via PostDateGmtAndPostTitleAndPostModifiedGmt
func GetPostsesByPostDateGmtAndPostTitleAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and post_modified_gmt = ?", PostDateGmt_, PostTitle_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPostContentFiltered Get Postses via PostDateGmtAndPostTitleAndPostContentFiltered
func GetPostsesByPostDateGmtAndPostTitleAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and post_content_filtered = ?", PostDateGmt_, PostTitle_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPostParent Get Postses via PostDateGmtAndPostTitleAndPostParent
func GetPostsesByPostDateGmtAndPostTitleAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and post_parent = ?", PostDateGmt_, PostTitle_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndGuid Get Postses via PostDateGmtAndPostTitleAndGuid
func GetPostsesByPostDateGmtAndPostTitleAndGuid(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and guid = ?", PostDateGmt_, PostTitle_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndMenuOrder Get Postses via PostDateGmtAndPostTitleAndMenuOrder
func GetPostsesByPostDateGmtAndPostTitleAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and menu_order = ?", PostDateGmt_, PostTitle_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPostType Get Postses via PostDateGmtAndPostTitleAndPostType
func GetPostsesByPostDateGmtAndPostTitleAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and post_type = ?", PostDateGmt_, PostTitle_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndPostMimeType Get Postses via PostDateGmtAndPostTitleAndPostMimeType
func GetPostsesByPostDateGmtAndPostTitleAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and post_mime_type = ?", PostDateGmt_, PostTitle_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitleAndCommentCount Get Postses via PostDateGmtAndPostTitleAndCommentCount
func GetPostsesByPostDateGmtAndPostTitleAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ? and comment_count = ?", PostDateGmt_, PostTitle_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPostStatus Get Postses via PostDateGmtAndPostExcerptAndPostStatus
func GetPostsesByPostDateGmtAndPostExcerptAndPostStatus(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and post_status = ?", PostDateGmt_, PostExcerpt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndCommentStatus Get Postses via PostDateGmtAndPostExcerptAndCommentStatus
func GetPostsesByPostDateGmtAndPostExcerptAndCommentStatus(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and comment_status = ?", PostDateGmt_, PostExcerpt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPingStatus Get Postses via PostDateGmtAndPostExcerptAndPingStatus
func GetPostsesByPostDateGmtAndPostExcerptAndPingStatus(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and ping_status = ?", PostDateGmt_, PostExcerpt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPostPassword Get Postses via PostDateGmtAndPostExcerptAndPostPassword
func GetPostsesByPostDateGmtAndPostExcerptAndPostPassword(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and post_password = ?", PostDateGmt_, PostExcerpt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPostName Get Postses via PostDateGmtAndPostExcerptAndPostName
func GetPostsesByPostDateGmtAndPostExcerptAndPostName(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and post_name = ?", PostDateGmt_, PostExcerpt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndToPing Get Postses via PostDateGmtAndPostExcerptAndToPing
func GetPostsesByPostDateGmtAndPostExcerptAndToPing(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and to_ping = ?", PostDateGmt_, PostExcerpt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPinged Get Postses via PostDateGmtAndPostExcerptAndPinged
func GetPostsesByPostDateGmtAndPostExcerptAndPinged(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and pinged = ?", PostDateGmt_, PostExcerpt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPostModified Get Postses via PostDateGmtAndPostExcerptAndPostModified
func GetPostsesByPostDateGmtAndPostExcerptAndPostModified(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and post_modified = ?", PostDateGmt_, PostExcerpt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPostModifiedGmt Get Postses via PostDateGmtAndPostExcerptAndPostModifiedGmt
func GetPostsesByPostDateGmtAndPostExcerptAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and post_modified_gmt = ?", PostDateGmt_, PostExcerpt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPostContentFiltered Get Postses via PostDateGmtAndPostExcerptAndPostContentFiltered
func GetPostsesByPostDateGmtAndPostExcerptAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and post_content_filtered = ?", PostDateGmt_, PostExcerpt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPostParent Get Postses via PostDateGmtAndPostExcerptAndPostParent
func GetPostsesByPostDateGmtAndPostExcerptAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and post_parent = ?", PostDateGmt_, PostExcerpt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndGuid Get Postses via PostDateGmtAndPostExcerptAndGuid
func GetPostsesByPostDateGmtAndPostExcerptAndGuid(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and guid = ?", PostDateGmt_, PostExcerpt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndMenuOrder Get Postses via PostDateGmtAndPostExcerptAndMenuOrder
func GetPostsesByPostDateGmtAndPostExcerptAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and menu_order = ?", PostDateGmt_, PostExcerpt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPostType Get Postses via PostDateGmtAndPostExcerptAndPostType
func GetPostsesByPostDateGmtAndPostExcerptAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and post_type = ?", PostDateGmt_, PostExcerpt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndPostMimeType Get Postses via PostDateGmtAndPostExcerptAndPostMimeType
func GetPostsesByPostDateGmtAndPostExcerptAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and post_mime_type = ?", PostDateGmt_, PostExcerpt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerptAndCommentCount Get Postses via PostDateGmtAndPostExcerptAndCommentCount
func GetPostsesByPostDateGmtAndPostExcerptAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ? and comment_count = ?", PostDateGmt_, PostExcerpt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndCommentStatus Get Postses via PostDateGmtAndPostStatusAndCommentStatus
func GetPostsesByPostDateGmtAndPostStatusAndCommentStatus(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and comment_status = ?", PostDateGmt_, PostStatus_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndPingStatus Get Postses via PostDateGmtAndPostStatusAndPingStatus
func GetPostsesByPostDateGmtAndPostStatusAndPingStatus(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and ping_status = ?", PostDateGmt_, PostStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndPostPassword Get Postses via PostDateGmtAndPostStatusAndPostPassword
func GetPostsesByPostDateGmtAndPostStatusAndPostPassword(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and post_password = ?", PostDateGmt_, PostStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndPostName Get Postses via PostDateGmtAndPostStatusAndPostName
func GetPostsesByPostDateGmtAndPostStatusAndPostName(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and post_name = ?", PostDateGmt_, PostStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndToPing Get Postses via PostDateGmtAndPostStatusAndToPing
func GetPostsesByPostDateGmtAndPostStatusAndToPing(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and to_ping = ?", PostDateGmt_, PostStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndPinged Get Postses via PostDateGmtAndPostStatusAndPinged
func GetPostsesByPostDateGmtAndPostStatusAndPinged(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and pinged = ?", PostDateGmt_, PostStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndPostModified Get Postses via PostDateGmtAndPostStatusAndPostModified
func GetPostsesByPostDateGmtAndPostStatusAndPostModified(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and post_modified = ?", PostDateGmt_, PostStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndPostModifiedGmt Get Postses via PostDateGmtAndPostStatusAndPostModifiedGmt
func GetPostsesByPostDateGmtAndPostStatusAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and post_modified_gmt = ?", PostDateGmt_, PostStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndPostContentFiltered Get Postses via PostDateGmtAndPostStatusAndPostContentFiltered
func GetPostsesByPostDateGmtAndPostStatusAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and post_content_filtered = ?", PostDateGmt_, PostStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndPostParent Get Postses via PostDateGmtAndPostStatusAndPostParent
func GetPostsesByPostDateGmtAndPostStatusAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and post_parent = ?", PostDateGmt_, PostStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndGuid Get Postses via PostDateGmtAndPostStatusAndGuid
func GetPostsesByPostDateGmtAndPostStatusAndGuid(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and guid = ?", PostDateGmt_, PostStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndMenuOrder Get Postses via PostDateGmtAndPostStatusAndMenuOrder
func GetPostsesByPostDateGmtAndPostStatusAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and menu_order = ?", PostDateGmt_, PostStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndPostType Get Postses via PostDateGmtAndPostStatusAndPostType
func GetPostsesByPostDateGmtAndPostStatusAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and post_type = ?", PostDateGmt_, PostStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndPostMimeType Get Postses via PostDateGmtAndPostStatusAndPostMimeType
func GetPostsesByPostDateGmtAndPostStatusAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and post_mime_type = ?", PostDateGmt_, PostStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatusAndCommentCount Get Postses via PostDateGmtAndPostStatusAndCommentCount
func GetPostsesByPostDateGmtAndPostStatusAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ? and comment_count = ?", PostDateGmt_, PostStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndPingStatus Get Postses via PostDateGmtAndCommentStatusAndPingStatus
func GetPostsesByPostDateGmtAndCommentStatusAndPingStatus(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and ping_status = ?", PostDateGmt_, CommentStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndPostPassword Get Postses via PostDateGmtAndCommentStatusAndPostPassword
func GetPostsesByPostDateGmtAndCommentStatusAndPostPassword(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and post_password = ?", PostDateGmt_, CommentStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndPostName Get Postses via PostDateGmtAndCommentStatusAndPostName
func GetPostsesByPostDateGmtAndCommentStatusAndPostName(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and post_name = ?", PostDateGmt_, CommentStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndToPing Get Postses via PostDateGmtAndCommentStatusAndToPing
func GetPostsesByPostDateGmtAndCommentStatusAndToPing(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and to_ping = ?", PostDateGmt_, CommentStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndPinged Get Postses via PostDateGmtAndCommentStatusAndPinged
func GetPostsesByPostDateGmtAndCommentStatusAndPinged(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and pinged = ?", PostDateGmt_, CommentStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndPostModified Get Postses via PostDateGmtAndCommentStatusAndPostModified
func GetPostsesByPostDateGmtAndCommentStatusAndPostModified(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and post_modified = ?", PostDateGmt_, CommentStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndPostModifiedGmt Get Postses via PostDateGmtAndCommentStatusAndPostModifiedGmt
func GetPostsesByPostDateGmtAndCommentStatusAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and post_modified_gmt = ?", PostDateGmt_, CommentStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndPostContentFiltered Get Postses via PostDateGmtAndCommentStatusAndPostContentFiltered
func GetPostsesByPostDateGmtAndCommentStatusAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and post_content_filtered = ?", PostDateGmt_, CommentStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndPostParent Get Postses via PostDateGmtAndCommentStatusAndPostParent
func GetPostsesByPostDateGmtAndCommentStatusAndPostParent(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and post_parent = ?", PostDateGmt_, CommentStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndGuid Get Postses via PostDateGmtAndCommentStatusAndGuid
func GetPostsesByPostDateGmtAndCommentStatusAndGuid(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and guid = ?", PostDateGmt_, CommentStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndMenuOrder Get Postses via PostDateGmtAndCommentStatusAndMenuOrder
func GetPostsesByPostDateGmtAndCommentStatusAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and menu_order = ?", PostDateGmt_, CommentStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndPostType Get Postses via PostDateGmtAndCommentStatusAndPostType
func GetPostsesByPostDateGmtAndCommentStatusAndPostType(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and post_type = ?", PostDateGmt_, CommentStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndPostMimeType Get Postses via PostDateGmtAndCommentStatusAndPostMimeType
func GetPostsesByPostDateGmtAndCommentStatusAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and post_mime_type = ?", PostDateGmt_, CommentStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatusAndCommentCount Get Postses via PostDateGmtAndCommentStatusAndCommentCount
func GetPostsesByPostDateGmtAndCommentStatusAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ? and comment_count = ?", PostDateGmt_, CommentStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndPostPassword Get Postses via PostDateGmtAndPingStatusAndPostPassword
func GetPostsesByPostDateGmtAndPingStatusAndPostPassword(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and post_password = ?", PostDateGmt_, PingStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndPostName Get Postses via PostDateGmtAndPingStatusAndPostName
func GetPostsesByPostDateGmtAndPingStatusAndPostName(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and post_name = ?", PostDateGmt_, PingStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndToPing Get Postses via PostDateGmtAndPingStatusAndToPing
func GetPostsesByPostDateGmtAndPingStatusAndToPing(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and to_ping = ?", PostDateGmt_, PingStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndPinged Get Postses via PostDateGmtAndPingStatusAndPinged
func GetPostsesByPostDateGmtAndPingStatusAndPinged(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and pinged = ?", PostDateGmt_, PingStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndPostModified Get Postses via PostDateGmtAndPingStatusAndPostModified
func GetPostsesByPostDateGmtAndPingStatusAndPostModified(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and post_modified = ?", PostDateGmt_, PingStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndPostModifiedGmt Get Postses via PostDateGmtAndPingStatusAndPostModifiedGmt
func GetPostsesByPostDateGmtAndPingStatusAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and post_modified_gmt = ?", PostDateGmt_, PingStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndPostContentFiltered Get Postses via PostDateGmtAndPingStatusAndPostContentFiltered
func GetPostsesByPostDateGmtAndPingStatusAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and post_content_filtered = ?", PostDateGmt_, PingStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndPostParent Get Postses via PostDateGmtAndPingStatusAndPostParent
func GetPostsesByPostDateGmtAndPingStatusAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and post_parent = ?", PostDateGmt_, PingStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndGuid Get Postses via PostDateGmtAndPingStatusAndGuid
func GetPostsesByPostDateGmtAndPingStatusAndGuid(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and guid = ?", PostDateGmt_, PingStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndMenuOrder Get Postses via PostDateGmtAndPingStatusAndMenuOrder
func GetPostsesByPostDateGmtAndPingStatusAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and menu_order = ?", PostDateGmt_, PingStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndPostType Get Postses via PostDateGmtAndPingStatusAndPostType
func GetPostsesByPostDateGmtAndPingStatusAndPostType(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and post_type = ?", PostDateGmt_, PingStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndPostMimeType Get Postses via PostDateGmtAndPingStatusAndPostMimeType
func GetPostsesByPostDateGmtAndPingStatusAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and post_mime_type = ?", PostDateGmt_, PingStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatusAndCommentCount Get Postses via PostDateGmtAndPingStatusAndCommentCount
func GetPostsesByPostDateGmtAndPingStatusAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ? and comment_count = ?", PostDateGmt_, PingStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndPostName Get Postses via PostDateGmtAndPostPasswordAndPostName
func GetPostsesByPostDateGmtAndPostPasswordAndPostName(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and post_name = ?", PostDateGmt_, PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndToPing Get Postses via PostDateGmtAndPostPasswordAndToPing
func GetPostsesByPostDateGmtAndPostPasswordAndToPing(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and to_ping = ?", PostDateGmt_, PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndPinged Get Postses via PostDateGmtAndPostPasswordAndPinged
func GetPostsesByPostDateGmtAndPostPasswordAndPinged(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and pinged = ?", PostDateGmt_, PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndPostModified Get Postses via PostDateGmtAndPostPasswordAndPostModified
func GetPostsesByPostDateGmtAndPostPasswordAndPostModified(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and post_modified = ?", PostDateGmt_, PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndPostModifiedGmt Get Postses via PostDateGmtAndPostPasswordAndPostModifiedGmt
func GetPostsesByPostDateGmtAndPostPasswordAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and post_modified_gmt = ?", PostDateGmt_, PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndPostContentFiltered Get Postses via PostDateGmtAndPostPasswordAndPostContentFiltered
func GetPostsesByPostDateGmtAndPostPasswordAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and post_content_filtered = ?", PostDateGmt_, PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndPostParent Get Postses via PostDateGmtAndPostPasswordAndPostParent
func GetPostsesByPostDateGmtAndPostPasswordAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and post_parent = ?", PostDateGmt_, PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndGuid Get Postses via PostDateGmtAndPostPasswordAndGuid
func GetPostsesByPostDateGmtAndPostPasswordAndGuid(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and guid = ?", PostDateGmt_, PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndMenuOrder Get Postses via PostDateGmtAndPostPasswordAndMenuOrder
func GetPostsesByPostDateGmtAndPostPasswordAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and menu_order = ?", PostDateGmt_, PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndPostType Get Postses via PostDateGmtAndPostPasswordAndPostType
func GetPostsesByPostDateGmtAndPostPasswordAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and post_type = ?", PostDateGmt_, PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndPostMimeType Get Postses via PostDateGmtAndPostPasswordAndPostMimeType
func GetPostsesByPostDateGmtAndPostPasswordAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and post_mime_type = ?", PostDateGmt_, PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPasswordAndCommentCount Get Postses via PostDateGmtAndPostPasswordAndCommentCount
func GetPostsesByPostDateGmtAndPostPasswordAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ? and comment_count = ?", PostDateGmt_, PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndToPing Get Postses via PostDateGmtAndPostNameAndToPing
func GetPostsesByPostDateGmtAndPostNameAndToPing(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and to_ping = ?", PostDateGmt_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndPinged Get Postses via PostDateGmtAndPostNameAndPinged
func GetPostsesByPostDateGmtAndPostNameAndPinged(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and pinged = ?", PostDateGmt_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndPostModified Get Postses via PostDateGmtAndPostNameAndPostModified
func GetPostsesByPostDateGmtAndPostNameAndPostModified(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and post_modified = ?", PostDateGmt_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndPostModifiedGmt Get Postses via PostDateGmtAndPostNameAndPostModifiedGmt
func GetPostsesByPostDateGmtAndPostNameAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and post_modified_gmt = ?", PostDateGmt_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndPostContentFiltered Get Postses via PostDateGmtAndPostNameAndPostContentFiltered
func GetPostsesByPostDateGmtAndPostNameAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and post_content_filtered = ?", PostDateGmt_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndPostParent Get Postses via PostDateGmtAndPostNameAndPostParent
func GetPostsesByPostDateGmtAndPostNameAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and post_parent = ?", PostDateGmt_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndGuid Get Postses via PostDateGmtAndPostNameAndGuid
func GetPostsesByPostDateGmtAndPostNameAndGuid(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and guid = ?", PostDateGmt_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndMenuOrder Get Postses via PostDateGmtAndPostNameAndMenuOrder
func GetPostsesByPostDateGmtAndPostNameAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and menu_order = ?", PostDateGmt_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndPostType Get Postses via PostDateGmtAndPostNameAndPostType
func GetPostsesByPostDateGmtAndPostNameAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and post_type = ?", PostDateGmt_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndPostMimeType Get Postses via PostDateGmtAndPostNameAndPostMimeType
func GetPostsesByPostDateGmtAndPostNameAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and post_mime_type = ?", PostDateGmt_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostNameAndCommentCount Get Postses via PostDateGmtAndPostNameAndCommentCount
func GetPostsesByPostDateGmtAndPostNameAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ? and comment_count = ?", PostDateGmt_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPingAndPinged Get Postses via PostDateGmtAndToPingAndPinged
func GetPostsesByPostDateGmtAndToPingAndPinged(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ? and pinged = ?", PostDateGmt_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPingAndPostModified Get Postses via PostDateGmtAndToPingAndPostModified
func GetPostsesByPostDateGmtAndToPingAndPostModified(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ? and post_modified = ?", PostDateGmt_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPingAndPostModifiedGmt Get Postses via PostDateGmtAndToPingAndPostModifiedGmt
func GetPostsesByPostDateGmtAndToPingAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ? and post_modified_gmt = ?", PostDateGmt_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPingAndPostContentFiltered Get Postses via PostDateGmtAndToPingAndPostContentFiltered
func GetPostsesByPostDateGmtAndToPingAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ? and post_content_filtered = ?", PostDateGmt_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPingAndPostParent Get Postses via PostDateGmtAndToPingAndPostParent
func GetPostsesByPostDateGmtAndToPingAndPostParent(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ? and post_parent = ?", PostDateGmt_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPingAndGuid Get Postses via PostDateGmtAndToPingAndGuid
func GetPostsesByPostDateGmtAndToPingAndGuid(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ? and guid = ?", PostDateGmt_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPingAndMenuOrder Get Postses via PostDateGmtAndToPingAndMenuOrder
func GetPostsesByPostDateGmtAndToPingAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ? and menu_order = ?", PostDateGmt_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPingAndPostType Get Postses via PostDateGmtAndToPingAndPostType
func GetPostsesByPostDateGmtAndToPingAndPostType(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ? and post_type = ?", PostDateGmt_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPingAndPostMimeType Get Postses via PostDateGmtAndToPingAndPostMimeType
func GetPostsesByPostDateGmtAndToPingAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ? and post_mime_type = ?", PostDateGmt_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPingAndCommentCount Get Postses via PostDateGmtAndToPingAndCommentCount
func GetPostsesByPostDateGmtAndToPingAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ? and comment_count = ?", PostDateGmt_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingedAndPostModified Get Postses via PostDateGmtAndPingedAndPostModified
func GetPostsesByPostDateGmtAndPingedAndPostModified(offset int, limit int, PostDateGmt_ time.Time, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and pinged = ? and post_modified = ?", PostDateGmt_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingedAndPostModifiedGmt Get Postses via PostDateGmtAndPingedAndPostModifiedGmt
func GetPostsesByPostDateGmtAndPingedAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and pinged = ? and post_modified_gmt = ?", PostDateGmt_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingedAndPostContentFiltered Get Postses via PostDateGmtAndPingedAndPostContentFiltered
func GetPostsesByPostDateGmtAndPingedAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and pinged = ? and post_content_filtered = ?", PostDateGmt_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingedAndPostParent Get Postses via PostDateGmtAndPingedAndPostParent
func GetPostsesByPostDateGmtAndPingedAndPostParent(offset int, limit int, PostDateGmt_ time.Time, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and pinged = ? and post_parent = ?", PostDateGmt_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingedAndGuid Get Postses via PostDateGmtAndPingedAndGuid
func GetPostsesByPostDateGmtAndPingedAndGuid(offset int, limit int, PostDateGmt_ time.Time, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and pinged = ? and guid = ?", PostDateGmt_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingedAndMenuOrder Get Postses via PostDateGmtAndPingedAndMenuOrder
func GetPostsesByPostDateGmtAndPingedAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and pinged = ? and menu_order = ?", PostDateGmt_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingedAndPostType Get Postses via PostDateGmtAndPingedAndPostType
func GetPostsesByPostDateGmtAndPingedAndPostType(offset int, limit int, PostDateGmt_ time.Time, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and pinged = ? and post_type = ?", PostDateGmt_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingedAndPostMimeType Get Postses via PostDateGmtAndPingedAndPostMimeType
func GetPostsesByPostDateGmtAndPingedAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and pinged = ? and post_mime_type = ?", PostDateGmt_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingedAndCommentCount Get Postses via PostDateGmtAndPingedAndCommentCount
func GetPostsesByPostDateGmtAndPingedAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and pinged = ? and comment_count = ?", PostDateGmt_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedAndPostModifiedGmt Get Postses via PostDateGmtAndPostModifiedAndPostModifiedGmt
func GetPostsesByPostDateGmtAndPostModifiedAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified = ? and post_modified_gmt = ?", PostDateGmt_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedAndPostContentFiltered Get Postses via PostDateGmtAndPostModifiedAndPostContentFiltered
func GetPostsesByPostDateGmtAndPostModifiedAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified = ? and post_content_filtered = ?", PostDateGmt_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedAndPostParent Get Postses via PostDateGmtAndPostModifiedAndPostParent
func GetPostsesByPostDateGmtAndPostModifiedAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified = ? and post_parent = ?", PostDateGmt_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedAndGuid Get Postses via PostDateGmtAndPostModifiedAndGuid
func GetPostsesByPostDateGmtAndPostModifiedAndGuid(offset int, limit int, PostDateGmt_ time.Time, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified = ? and guid = ?", PostDateGmt_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedAndMenuOrder Get Postses via PostDateGmtAndPostModifiedAndMenuOrder
func GetPostsesByPostDateGmtAndPostModifiedAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified = ? and menu_order = ?", PostDateGmt_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedAndPostType Get Postses via PostDateGmtAndPostModifiedAndPostType
func GetPostsesByPostDateGmtAndPostModifiedAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified = ? and post_type = ?", PostDateGmt_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedAndPostMimeType Get Postses via PostDateGmtAndPostModifiedAndPostMimeType
func GetPostsesByPostDateGmtAndPostModifiedAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified = ? and post_mime_type = ?", PostDateGmt_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedAndCommentCount Get Postses via PostDateGmtAndPostModifiedAndCommentCount
func GetPostsesByPostDateGmtAndPostModifiedAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified = ? and comment_count = ?", PostDateGmt_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedGmtAndPostContentFiltered Get Postses via PostDateGmtAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPostDateGmtAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified_gmt = ? and post_content_filtered = ?", PostDateGmt_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedGmtAndPostParent Get Postses via PostDateGmtAndPostModifiedGmtAndPostParent
func GetPostsesByPostDateGmtAndPostModifiedGmtAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified_gmt = ? and post_parent = ?", PostDateGmt_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedGmtAndGuid Get Postses via PostDateGmtAndPostModifiedGmtAndGuid
func GetPostsesByPostDateGmtAndPostModifiedGmtAndGuid(offset int, limit int, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified_gmt = ? and guid = ?", PostDateGmt_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedGmtAndMenuOrder Get Postses via PostDateGmtAndPostModifiedGmtAndMenuOrder
func GetPostsesByPostDateGmtAndPostModifiedGmtAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified_gmt = ? and menu_order = ?", PostDateGmt_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedGmtAndPostType Get Postses via PostDateGmtAndPostModifiedGmtAndPostType
func GetPostsesByPostDateGmtAndPostModifiedGmtAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified_gmt = ? and post_type = ?", PostDateGmt_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedGmtAndPostMimeType Get Postses via PostDateGmtAndPostModifiedGmtAndPostMimeType
func GetPostsesByPostDateGmtAndPostModifiedGmtAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified_gmt = ? and post_mime_type = ?", PostDateGmt_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedGmtAndCommentCount Get Postses via PostDateGmtAndPostModifiedGmtAndCommentCount
func GetPostsesByPostDateGmtAndPostModifiedGmtAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified_gmt = ? and comment_count = ?", PostDateGmt_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentFilteredAndPostParent Get Postses via PostDateGmtAndPostContentFilteredAndPostParent
func GetPostsesByPostDateGmtAndPostContentFilteredAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content_filtered = ? and post_parent = ?", PostDateGmt_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentFilteredAndGuid Get Postses via PostDateGmtAndPostContentFilteredAndGuid
func GetPostsesByPostDateGmtAndPostContentFilteredAndGuid(offset int, limit int, PostDateGmt_ time.Time, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content_filtered = ? and guid = ?", PostDateGmt_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentFilteredAndMenuOrder Get Postses via PostDateGmtAndPostContentFilteredAndMenuOrder
func GetPostsesByPostDateGmtAndPostContentFilteredAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content_filtered = ? and menu_order = ?", PostDateGmt_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentFilteredAndPostType Get Postses via PostDateGmtAndPostContentFilteredAndPostType
func GetPostsesByPostDateGmtAndPostContentFilteredAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content_filtered = ? and post_type = ?", PostDateGmt_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentFilteredAndPostMimeType Get Postses via PostDateGmtAndPostContentFilteredAndPostMimeType
func GetPostsesByPostDateGmtAndPostContentFilteredAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content_filtered = ? and post_mime_type = ?", PostDateGmt_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentFilteredAndCommentCount Get Postses via PostDateGmtAndPostContentFilteredAndCommentCount
func GetPostsesByPostDateGmtAndPostContentFilteredAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content_filtered = ? and comment_count = ?", PostDateGmt_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostParentAndGuid Get Postses via PostDateGmtAndPostParentAndGuid
func GetPostsesByPostDateGmtAndPostParentAndGuid(offset int, limit int, PostDateGmt_ time.Time, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_parent = ? and guid = ?", PostDateGmt_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostParentAndMenuOrder Get Postses via PostDateGmtAndPostParentAndMenuOrder
func GetPostsesByPostDateGmtAndPostParentAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_parent = ? and menu_order = ?", PostDateGmt_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostParentAndPostType Get Postses via PostDateGmtAndPostParentAndPostType
func GetPostsesByPostDateGmtAndPostParentAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_parent = ? and post_type = ?", PostDateGmt_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostParentAndPostMimeType Get Postses via PostDateGmtAndPostParentAndPostMimeType
func GetPostsesByPostDateGmtAndPostParentAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_parent = ? and post_mime_type = ?", PostDateGmt_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostParentAndCommentCount Get Postses via PostDateGmtAndPostParentAndCommentCount
func GetPostsesByPostDateGmtAndPostParentAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_parent = ? and comment_count = ?", PostDateGmt_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndGuidAndMenuOrder Get Postses via PostDateGmtAndGuidAndMenuOrder
func GetPostsesByPostDateGmtAndGuidAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and guid = ? and menu_order = ?", PostDateGmt_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndGuidAndPostType Get Postses via PostDateGmtAndGuidAndPostType
func GetPostsesByPostDateGmtAndGuidAndPostType(offset int, limit int, PostDateGmt_ time.Time, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and guid = ? and post_type = ?", PostDateGmt_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndGuidAndPostMimeType Get Postses via PostDateGmtAndGuidAndPostMimeType
func GetPostsesByPostDateGmtAndGuidAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and guid = ? and post_mime_type = ?", PostDateGmt_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndGuidAndCommentCount Get Postses via PostDateGmtAndGuidAndCommentCount
func GetPostsesByPostDateGmtAndGuidAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and guid = ? and comment_count = ?", PostDateGmt_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndMenuOrderAndPostType Get Postses via PostDateGmtAndMenuOrderAndPostType
func GetPostsesByPostDateGmtAndMenuOrderAndPostType(offset int, limit int, PostDateGmt_ time.Time, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and menu_order = ? and post_type = ?", PostDateGmt_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndMenuOrderAndPostMimeType Get Postses via PostDateGmtAndMenuOrderAndPostMimeType
func GetPostsesByPostDateGmtAndMenuOrderAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and menu_order = ? and post_mime_type = ?", PostDateGmt_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndMenuOrderAndCommentCount Get Postses via PostDateGmtAndMenuOrderAndCommentCount
func GetPostsesByPostDateGmtAndMenuOrderAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and menu_order = ? and comment_count = ?", PostDateGmt_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTypeAndPostMimeType Get Postses via PostDateGmtAndPostTypeAndPostMimeType
func GetPostsesByPostDateGmtAndPostTypeAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_type = ? and post_mime_type = ?", PostDateGmt_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTypeAndCommentCount Get Postses via PostDateGmtAndPostTypeAndCommentCount
func GetPostsesByPostDateGmtAndPostTypeAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_type = ? and comment_count = ?", PostDateGmt_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostMimeTypeAndCommentCount Get Postses via PostDateGmtAndPostMimeTypeAndCommentCount
func GetPostsesByPostDateGmtAndPostMimeTypeAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_mime_type = ? and comment_count = ?", PostDateGmt_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPostExcerpt Get Postses via PostContentAndPostTitleAndPostExcerpt
func GetPostsesByPostContentAndPostTitleAndPostExcerpt(offset int, limit int, PostContent_ string, PostTitle_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and post_excerpt = ?", PostContent_, PostTitle_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPostStatus Get Postses via PostContentAndPostTitleAndPostStatus
func GetPostsesByPostContentAndPostTitleAndPostStatus(offset int, limit int, PostContent_ string, PostTitle_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and post_status = ?", PostContent_, PostTitle_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndCommentStatus Get Postses via PostContentAndPostTitleAndCommentStatus
func GetPostsesByPostContentAndPostTitleAndCommentStatus(offset int, limit int, PostContent_ string, PostTitle_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and comment_status = ?", PostContent_, PostTitle_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPingStatus Get Postses via PostContentAndPostTitleAndPingStatus
func GetPostsesByPostContentAndPostTitleAndPingStatus(offset int, limit int, PostContent_ string, PostTitle_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and ping_status = ?", PostContent_, PostTitle_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPostPassword Get Postses via PostContentAndPostTitleAndPostPassword
func GetPostsesByPostContentAndPostTitleAndPostPassword(offset int, limit int, PostContent_ string, PostTitle_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and post_password = ?", PostContent_, PostTitle_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPostName Get Postses via PostContentAndPostTitleAndPostName
func GetPostsesByPostContentAndPostTitleAndPostName(offset int, limit int, PostContent_ string, PostTitle_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and post_name = ?", PostContent_, PostTitle_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndToPing Get Postses via PostContentAndPostTitleAndToPing
func GetPostsesByPostContentAndPostTitleAndToPing(offset int, limit int, PostContent_ string, PostTitle_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and to_ping = ?", PostContent_, PostTitle_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPinged Get Postses via PostContentAndPostTitleAndPinged
func GetPostsesByPostContentAndPostTitleAndPinged(offset int, limit int, PostContent_ string, PostTitle_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and pinged = ?", PostContent_, PostTitle_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPostModified Get Postses via PostContentAndPostTitleAndPostModified
func GetPostsesByPostContentAndPostTitleAndPostModified(offset int, limit int, PostContent_ string, PostTitle_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and post_modified = ?", PostContent_, PostTitle_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPostModifiedGmt Get Postses via PostContentAndPostTitleAndPostModifiedGmt
func GetPostsesByPostContentAndPostTitleAndPostModifiedGmt(offset int, limit int, PostContent_ string, PostTitle_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and post_modified_gmt = ?", PostContent_, PostTitle_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPostContentFiltered Get Postses via PostContentAndPostTitleAndPostContentFiltered
func GetPostsesByPostContentAndPostTitleAndPostContentFiltered(offset int, limit int, PostContent_ string, PostTitle_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and post_content_filtered = ?", PostContent_, PostTitle_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPostParent Get Postses via PostContentAndPostTitleAndPostParent
func GetPostsesByPostContentAndPostTitleAndPostParent(offset int, limit int, PostContent_ string, PostTitle_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and post_parent = ?", PostContent_, PostTitle_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndGuid Get Postses via PostContentAndPostTitleAndGuid
func GetPostsesByPostContentAndPostTitleAndGuid(offset int, limit int, PostContent_ string, PostTitle_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and guid = ?", PostContent_, PostTitle_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndMenuOrder Get Postses via PostContentAndPostTitleAndMenuOrder
func GetPostsesByPostContentAndPostTitleAndMenuOrder(offset int, limit int, PostContent_ string, PostTitle_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and menu_order = ?", PostContent_, PostTitle_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPostType Get Postses via PostContentAndPostTitleAndPostType
func GetPostsesByPostContentAndPostTitleAndPostType(offset int, limit int, PostContent_ string, PostTitle_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and post_type = ?", PostContent_, PostTitle_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndPostMimeType Get Postses via PostContentAndPostTitleAndPostMimeType
func GetPostsesByPostContentAndPostTitleAndPostMimeType(offset int, limit int, PostContent_ string, PostTitle_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and post_mime_type = ?", PostContent_, PostTitle_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitleAndCommentCount Get Postses via PostContentAndPostTitleAndCommentCount
func GetPostsesByPostContentAndPostTitleAndCommentCount(offset int, limit int, PostContent_ string, PostTitle_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ? and comment_count = ?", PostContent_, PostTitle_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPostStatus Get Postses via PostContentAndPostExcerptAndPostStatus
func GetPostsesByPostContentAndPostExcerptAndPostStatus(offset int, limit int, PostContent_ string, PostExcerpt_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and post_status = ?", PostContent_, PostExcerpt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndCommentStatus Get Postses via PostContentAndPostExcerptAndCommentStatus
func GetPostsesByPostContentAndPostExcerptAndCommentStatus(offset int, limit int, PostContent_ string, PostExcerpt_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and comment_status = ?", PostContent_, PostExcerpt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPingStatus Get Postses via PostContentAndPostExcerptAndPingStatus
func GetPostsesByPostContentAndPostExcerptAndPingStatus(offset int, limit int, PostContent_ string, PostExcerpt_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and ping_status = ?", PostContent_, PostExcerpt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPostPassword Get Postses via PostContentAndPostExcerptAndPostPassword
func GetPostsesByPostContentAndPostExcerptAndPostPassword(offset int, limit int, PostContent_ string, PostExcerpt_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and post_password = ?", PostContent_, PostExcerpt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPostName Get Postses via PostContentAndPostExcerptAndPostName
func GetPostsesByPostContentAndPostExcerptAndPostName(offset int, limit int, PostContent_ string, PostExcerpt_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and post_name = ?", PostContent_, PostExcerpt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndToPing Get Postses via PostContentAndPostExcerptAndToPing
func GetPostsesByPostContentAndPostExcerptAndToPing(offset int, limit int, PostContent_ string, PostExcerpt_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and to_ping = ?", PostContent_, PostExcerpt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPinged Get Postses via PostContentAndPostExcerptAndPinged
func GetPostsesByPostContentAndPostExcerptAndPinged(offset int, limit int, PostContent_ string, PostExcerpt_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and pinged = ?", PostContent_, PostExcerpt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPostModified Get Postses via PostContentAndPostExcerptAndPostModified
func GetPostsesByPostContentAndPostExcerptAndPostModified(offset int, limit int, PostContent_ string, PostExcerpt_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and post_modified = ?", PostContent_, PostExcerpt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPostModifiedGmt Get Postses via PostContentAndPostExcerptAndPostModifiedGmt
func GetPostsesByPostContentAndPostExcerptAndPostModifiedGmt(offset int, limit int, PostContent_ string, PostExcerpt_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and post_modified_gmt = ?", PostContent_, PostExcerpt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPostContentFiltered Get Postses via PostContentAndPostExcerptAndPostContentFiltered
func GetPostsesByPostContentAndPostExcerptAndPostContentFiltered(offset int, limit int, PostContent_ string, PostExcerpt_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and post_content_filtered = ?", PostContent_, PostExcerpt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPostParent Get Postses via PostContentAndPostExcerptAndPostParent
func GetPostsesByPostContentAndPostExcerptAndPostParent(offset int, limit int, PostContent_ string, PostExcerpt_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and post_parent = ?", PostContent_, PostExcerpt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndGuid Get Postses via PostContentAndPostExcerptAndGuid
func GetPostsesByPostContentAndPostExcerptAndGuid(offset int, limit int, PostContent_ string, PostExcerpt_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and guid = ?", PostContent_, PostExcerpt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndMenuOrder Get Postses via PostContentAndPostExcerptAndMenuOrder
func GetPostsesByPostContentAndPostExcerptAndMenuOrder(offset int, limit int, PostContent_ string, PostExcerpt_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and menu_order = ?", PostContent_, PostExcerpt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPostType Get Postses via PostContentAndPostExcerptAndPostType
func GetPostsesByPostContentAndPostExcerptAndPostType(offset int, limit int, PostContent_ string, PostExcerpt_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and post_type = ?", PostContent_, PostExcerpt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndPostMimeType Get Postses via PostContentAndPostExcerptAndPostMimeType
func GetPostsesByPostContentAndPostExcerptAndPostMimeType(offset int, limit int, PostContent_ string, PostExcerpt_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and post_mime_type = ?", PostContent_, PostExcerpt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerptAndCommentCount Get Postses via PostContentAndPostExcerptAndCommentCount
func GetPostsesByPostContentAndPostExcerptAndCommentCount(offset int, limit int, PostContent_ string, PostExcerpt_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ? and comment_count = ?", PostContent_, PostExcerpt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndCommentStatus Get Postses via PostContentAndPostStatusAndCommentStatus
func GetPostsesByPostContentAndPostStatusAndCommentStatus(offset int, limit int, PostContent_ string, PostStatus_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and comment_status = ?", PostContent_, PostStatus_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndPingStatus Get Postses via PostContentAndPostStatusAndPingStatus
func GetPostsesByPostContentAndPostStatusAndPingStatus(offset int, limit int, PostContent_ string, PostStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and ping_status = ?", PostContent_, PostStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndPostPassword Get Postses via PostContentAndPostStatusAndPostPassword
func GetPostsesByPostContentAndPostStatusAndPostPassword(offset int, limit int, PostContent_ string, PostStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and post_password = ?", PostContent_, PostStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndPostName Get Postses via PostContentAndPostStatusAndPostName
func GetPostsesByPostContentAndPostStatusAndPostName(offset int, limit int, PostContent_ string, PostStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and post_name = ?", PostContent_, PostStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndToPing Get Postses via PostContentAndPostStatusAndToPing
func GetPostsesByPostContentAndPostStatusAndToPing(offset int, limit int, PostContent_ string, PostStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and to_ping = ?", PostContent_, PostStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndPinged Get Postses via PostContentAndPostStatusAndPinged
func GetPostsesByPostContentAndPostStatusAndPinged(offset int, limit int, PostContent_ string, PostStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and pinged = ?", PostContent_, PostStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndPostModified Get Postses via PostContentAndPostStatusAndPostModified
func GetPostsesByPostContentAndPostStatusAndPostModified(offset int, limit int, PostContent_ string, PostStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and post_modified = ?", PostContent_, PostStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndPostModifiedGmt Get Postses via PostContentAndPostStatusAndPostModifiedGmt
func GetPostsesByPostContentAndPostStatusAndPostModifiedGmt(offset int, limit int, PostContent_ string, PostStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and post_modified_gmt = ?", PostContent_, PostStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndPostContentFiltered Get Postses via PostContentAndPostStatusAndPostContentFiltered
func GetPostsesByPostContentAndPostStatusAndPostContentFiltered(offset int, limit int, PostContent_ string, PostStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and post_content_filtered = ?", PostContent_, PostStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndPostParent Get Postses via PostContentAndPostStatusAndPostParent
func GetPostsesByPostContentAndPostStatusAndPostParent(offset int, limit int, PostContent_ string, PostStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and post_parent = ?", PostContent_, PostStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndGuid Get Postses via PostContentAndPostStatusAndGuid
func GetPostsesByPostContentAndPostStatusAndGuid(offset int, limit int, PostContent_ string, PostStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and guid = ?", PostContent_, PostStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndMenuOrder Get Postses via PostContentAndPostStatusAndMenuOrder
func GetPostsesByPostContentAndPostStatusAndMenuOrder(offset int, limit int, PostContent_ string, PostStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and menu_order = ?", PostContent_, PostStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndPostType Get Postses via PostContentAndPostStatusAndPostType
func GetPostsesByPostContentAndPostStatusAndPostType(offset int, limit int, PostContent_ string, PostStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and post_type = ?", PostContent_, PostStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndPostMimeType Get Postses via PostContentAndPostStatusAndPostMimeType
func GetPostsesByPostContentAndPostStatusAndPostMimeType(offset int, limit int, PostContent_ string, PostStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and post_mime_type = ?", PostContent_, PostStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatusAndCommentCount Get Postses via PostContentAndPostStatusAndCommentCount
func GetPostsesByPostContentAndPostStatusAndCommentCount(offset int, limit int, PostContent_ string, PostStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ? and comment_count = ?", PostContent_, PostStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndPingStatus Get Postses via PostContentAndCommentStatusAndPingStatus
func GetPostsesByPostContentAndCommentStatusAndPingStatus(offset int, limit int, PostContent_ string, CommentStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and ping_status = ?", PostContent_, CommentStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndPostPassword Get Postses via PostContentAndCommentStatusAndPostPassword
func GetPostsesByPostContentAndCommentStatusAndPostPassword(offset int, limit int, PostContent_ string, CommentStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and post_password = ?", PostContent_, CommentStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndPostName Get Postses via PostContentAndCommentStatusAndPostName
func GetPostsesByPostContentAndCommentStatusAndPostName(offset int, limit int, PostContent_ string, CommentStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and post_name = ?", PostContent_, CommentStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndToPing Get Postses via PostContentAndCommentStatusAndToPing
func GetPostsesByPostContentAndCommentStatusAndToPing(offset int, limit int, PostContent_ string, CommentStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and to_ping = ?", PostContent_, CommentStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndPinged Get Postses via PostContentAndCommentStatusAndPinged
func GetPostsesByPostContentAndCommentStatusAndPinged(offset int, limit int, PostContent_ string, CommentStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and pinged = ?", PostContent_, CommentStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndPostModified Get Postses via PostContentAndCommentStatusAndPostModified
func GetPostsesByPostContentAndCommentStatusAndPostModified(offset int, limit int, PostContent_ string, CommentStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and post_modified = ?", PostContent_, CommentStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndPostModifiedGmt Get Postses via PostContentAndCommentStatusAndPostModifiedGmt
func GetPostsesByPostContentAndCommentStatusAndPostModifiedGmt(offset int, limit int, PostContent_ string, CommentStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and post_modified_gmt = ?", PostContent_, CommentStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndPostContentFiltered Get Postses via PostContentAndCommentStatusAndPostContentFiltered
func GetPostsesByPostContentAndCommentStatusAndPostContentFiltered(offset int, limit int, PostContent_ string, CommentStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and post_content_filtered = ?", PostContent_, CommentStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndPostParent Get Postses via PostContentAndCommentStatusAndPostParent
func GetPostsesByPostContentAndCommentStatusAndPostParent(offset int, limit int, PostContent_ string, CommentStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and post_parent = ?", PostContent_, CommentStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndGuid Get Postses via PostContentAndCommentStatusAndGuid
func GetPostsesByPostContentAndCommentStatusAndGuid(offset int, limit int, PostContent_ string, CommentStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and guid = ?", PostContent_, CommentStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndMenuOrder Get Postses via PostContentAndCommentStatusAndMenuOrder
func GetPostsesByPostContentAndCommentStatusAndMenuOrder(offset int, limit int, PostContent_ string, CommentStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and menu_order = ?", PostContent_, CommentStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndPostType Get Postses via PostContentAndCommentStatusAndPostType
func GetPostsesByPostContentAndCommentStatusAndPostType(offset int, limit int, PostContent_ string, CommentStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and post_type = ?", PostContent_, CommentStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndPostMimeType Get Postses via PostContentAndCommentStatusAndPostMimeType
func GetPostsesByPostContentAndCommentStatusAndPostMimeType(offset int, limit int, PostContent_ string, CommentStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and post_mime_type = ?", PostContent_, CommentStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatusAndCommentCount Get Postses via PostContentAndCommentStatusAndCommentCount
func GetPostsesByPostContentAndCommentStatusAndCommentCount(offset int, limit int, PostContent_ string, CommentStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ? and comment_count = ?", PostContent_, CommentStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndPostPassword Get Postses via PostContentAndPingStatusAndPostPassword
func GetPostsesByPostContentAndPingStatusAndPostPassword(offset int, limit int, PostContent_ string, PingStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and post_password = ?", PostContent_, PingStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndPostName Get Postses via PostContentAndPingStatusAndPostName
func GetPostsesByPostContentAndPingStatusAndPostName(offset int, limit int, PostContent_ string, PingStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and post_name = ?", PostContent_, PingStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndToPing Get Postses via PostContentAndPingStatusAndToPing
func GetPostsesByPostContentAndPingStatusAndToPing(offset int, limit int, PostContent_ string, PingStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and to_ping = ?", PostContent_, PingStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndPinged Get Postses via PostContentAndPingStatusAndPinged
func GetPostsesByPostContentAndPingStatusAndPinged(offset int, limit int, PostContent_ string, PingStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and pinged = ?", PostContent_, PingStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndPostModified Get Postses via PostContentAndPingStatusAndPostModified
func GetPostsesByPostContentAndPingStatusAndPostModified(offset int, limit int, PostContent_ string, PingStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and post_modified = ?", PostContent_, PingStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndPostModifiedGmt Get Postses via PostContentAndPingStatusAndPostModifiedGmt
func GetPostsesByPostContentAndPingStatusAndPostModifiedGmt(offset int, limit int, PostContent_ string, PingStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and post_modified_gmt = ?", PostContent_, PingStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndPostContentFiltered Get Postses via PostContentAndPingStatusAndPostContentFiltered
func GetPostsesByPostContentAndPingStatusAndPostContentFiltered(offset int, limit int, PostContent_ string, PingStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and post_content_filtered = ?", PostContent_, PingStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndPostParent Get Postses via PostContentAndPingStatusAndPostParent
func GetPostsesByPostContentAndPingStatusAndPostParent(offset int, limit int, PostContent_ string, PingStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and post_parent = ?", PostContent_, PingStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndGuid Get Postses via PostContentAndPingStatusAndGuid
func GetPostsesByPostContentAndPingStatusAndGuid(offset int, limit int, PostContent_ string, PingStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and guid = ?", PostContent_, PingStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndMenuOrder Get Postses via PostContentAndPingStatusAndMenuOrder
func GetPostsesByPostContentAndPingStatusAndMenuOrder(offset int, limit int, PostContent_ string, PingStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and menu_order = ?", PostContent_, PingStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndPostType Get Postses via PostContentAndPingStatusAndPostType
func GetPostsesByPostContentAndPingStatusAndPostType(offset int, limit int, PostContent_ string, PingStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and post_type = ?", PostContent_, PingStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndPostMimeType Get Postses via PostContentAndPingStatusAndPostMimeType
func GetPostsesByPostContentAndPingStatusAndPostMimeType(offset int, limit int, PostContent_ string, PingStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and post_mime_type = ?", PostContent_, PingStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatusAndCommentCount Get Postses via PostContentAndPingStatusAndCommentCount
func GetPostsesByPostContentAndPingStatusAndCommentCount(offset int, limit int, PostContent_ string, PingStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ? and comment_count = ?", PostContent_, PingStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndPostName Get Postses via PostContentAndPostPasswordAndPostName
func GetPostsesByPostContentAndPostPasswordAndPostName(offset int, limit int, PostContent_ string, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and post_name = ?", PostContent_, PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndToPing Get Postses via PostContentAndPostPasswordAndToPing
func GetPostsesByPostContentAndPostPasswordAndToPing(offset int, limit int, PostContent_ string, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and to_ping = ?", PostContent_, PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndPinged Get Postses via PostContentAndPostPasswordAndPinged
func GetPostsesByPostContentAndPostPasswordAndPinged(offset int, limit int, PostContent_ string, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and pinged = ?", PostContent_, PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndPostModified Get Postses via PostContentAndPostPasswordAndPostModified
func GetPostsesByPostContentAndPostPasswordAndPostModified(offset int, limit int, PostContent_ string, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and post_modified = ?", PostContent_, PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndPostModifiedGmt Get Postses via PostContentAndPostPasswordAndPostModifiedGmt
func GetPostsesByPostContentAndPostPasswordAndPostModifiedGmt(offset int, limit int, PostContent_ string, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and post_modified_gmt = ?", PostContent_, PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndPostContentFiltered Get Postses via PostContentAndPostPasswordAndPostContentFiltered
func GetPostsesByPostContentAndPostPasswordAndPostContentFiltered(offset int, limit int, PostContent_ string, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and post_content_filtered = ?", PostContent_, PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndPostParent Get Postses via PostContentAndPostPasswordAndPostParent
func GetPostsesByPostContentAndPostPasswordAndPostParent(offset int, limit int, PostContent_ string, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and post_parent = ?", PostContent_, PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndGuid Get Postses via PostContentAndPostPasswordAndGuid
func GetPostsesByPostContentAndPostPasswordAndGuid(offset int, limit int, PostContent_ string, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and guid = ?", PostContent_, PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndMenuOrder Get Postses via PostContentAndPostPasswordAndMenuOrder
func GetPostsesByPostContentAndPostPasswordAndMenuOrder(offset int, limit int, PostContent_ string, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and menu_order = ?", PostContent_, PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndPostType Get Postses via PostContentAndPostPasswordAndPostType
func GetPostsesByPostContentAndPostPasswordAndPostType(offset int, limit int, PostContent_ string, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and post_type = ?", PostContent_, PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndPostMimeType Get Postses via PostContentAndPostPasswordAndPostMimeType
func GetPostsesByPostContentAndPostPasswordAndPostMimeType(offset int, limit int, PostContent_ string, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and post_mime_type = ?", PostContent_, PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPasswordAndCommentCount Get Postses via PostContentAndPostPasswordAndCommentCount
func GetPostsesByPostContentAndPostPasswordAndCommentCount(offset int, limit int, PostContent_ string, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ? and comment_count = ?", PostContent_, PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndToPing Get Postses via PostContentAndPostNameAndToPing
func GetPostsesByPostContentAndPostNameAndToPing(offset int, limit int, PostContent_ string, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and to_ping = ?", PostContent_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndPinged Get Postses via PostContentAndPostNameAndPinged
func GetPostsesByPostContentAndPostNameAndPinged(offset int, limit int, PostContent_ string, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and pinged = ?", PostContent_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndPostModified Get Postses via PostContentAndPostNameAndPostModified
func GetPostsesByPostContentAndPostNameAndPostModified(offset int, limit int, PostContent_ string, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and post_modified = ?", PostContent_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndPostModifiedGmt Get Postses via PostContentAndPostNameAndPostModifiedGmt
func GetPostsesByPostContentAndPostNameAndPostModifiedGmt(offset int, limit int, PostContent_ string, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and post_modified_gmt = ?", PostContent_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndPostContentFiltered Get Postses via PostContentAndPostNameAndPostContentFiltered
func GetPostsesByPostContentAndPostNameAndPostContentFiltered(offset int, limit int, PostContent_ string, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and post_content_filtered = ?", PostContent_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndPostParent Get Postses via PostContentAndPostNameAndPostParent
func GetPostsesByPostContentAndPostNameAndPostParent(offset int, limit int, PostContent_ string, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and post_parent = ?", PostContent_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndGuid Get Postses via PostContentAndPostNameAndGuid
func GetPostsesByPostContentAndPostNameAndGuid(offset int, limit int, PostContent_ string, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and guid = ?", PostContent_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndMenuOrder Get Postses via PostContentAndPostNameAndMenuOrder
func GetPostsesByPostContentAndPostNameAndMenuOrder(offset int, limit int, PostContent_ string, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and menu_order = ?", PostContent_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndPostType Get Postses via PostContentAndPostNameAndPostType
func GetPostsesByPostContentAndPostNameAndPostType(offset int, limit int, PostContent_ string, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and post_type = ?", PostContent_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndPostMimeType Get Postses via PostContentAndPostNameAndPostMimeType
func GetPostsesByPostContentAndPostNameAndPostMimeType(offset int, limit int, PostContent_ string, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and post_mime_type = ?", PostContent_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostNameAndCommentCount Get Postses via PostContentAndPostNameAndCommentCount
func GetPostsesByPostContentAndPostNameAndCommentCount(offset int, limit int, PostContent_ string, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ? and comment_count = ?", PostContent_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPingAndPinged Get Postses via PostContentAndToPingAndPinged
func GetPostsesByPostContentAndToPingAndPinged(offset int, limit int, PostContent_ string, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ? and pinged = ?", PostContent_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPingAndPostModified Get Postses via PostContentAndToPingAndPostModified
func GetPostsesByPostContentAndToPingAndPostModified(offset int, limit int, PostContent_ string, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ? and post_modified = ?", PostContent_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPingAndPostModifiedGmt Get Postses via PostContentAndToPingAndPostModifiedGmt
func GetPostsesByPostContentAndToPingAndPostModifiedGmt(offset int, limit int, PostContent_ string, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ? and post_modified_gmt = ?", PostContent_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPingAndPostContentFiltered Get Postses via PostContentAndToPingAndPostContentFiltered
func GetPostsesByPostContentAndToPingAndPostContentFiltered(offset int, limit int, PostContent_ string, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ? and post_content_filtered = ?", PostContent_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPingAndPostParent Get Postses via PostContentAndToPingAndPostParent
func GetPostsesByPostContentAndToPingAndPostParent(offset int, limit int, PostContent_ string, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ? and post_parent = ?", PostContent_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPingAndGuid Get Postses via PostContentAndToPingAndGuid
func GetPostsesByPostContentAndToPingAndGuid(offset int, limit int, PostContent_ string, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ? and guid = ?", PostContent_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPingAndMenuOrder Get Postses via PostContentAndToPingAndMenuOrder
func GetPostsesByPostContentAndToPingAndMenuOrder(offset int, limit int, PostContent_ string, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ? and menu_order = ?", PostContent_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPingAndPostType Get Postses via PostContentAndToPingAndPostType
func GetPostsesByPostContentAndToPingAndPostType(offset int, limit int, PostContent_ string, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ? and post_type = ?", PostContent_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPingAndPostMimeType Get Postses via PostContentAndToPingAndPostMimeType
func GetPostsesByPostContentAndToPingAndPostMimeType(offset int, limit int, PostContent_ string, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ? and post_mime_type = ?", PostContent_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPingAndCommentCount Get Postses via PostContentAndToPingAndCommentCount
func GetPostsesByPostContentAndToPingAndCommentCount(offset int, limit int, PostContent_ string, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ? and comment_count = ?", PostContent_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingedAndPostModified Get Postses via PostContentAndPingedAndPostModified
func GetPostsesByPostContentAndPingedAndPostModified(offset int, limit int, PostContent_ string, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and pinged = ? and post_modified = ?", PostContent_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingedAndPostModifiedGmt Get Postses via PostContentAndPingedAndPostModifiedGmt
func GetPostsesByPostContentAndPingedAndPostModifiedGmt(offset int, limit int, PostContent_ string, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and pinged = ? and post_modified_gmt = ?", PostContent_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingedAndPostContentFiltered Get Postses via PostContentAndPingedAndPostContentFiltered
func GetPostsesByPostContentAndPingedAndPostContentFiltered(offset int, limit int, PostContent_ string, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and pinged = ? and post_content_filtered = ?", PostContent_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingedAndPostParent Get Postses via PostContentAndPingedAndPostParent
func GetPostsesByPostContentAndPingedAndPostParent(offset int, limit int, PostContent_ string, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and pinged = ? and post_parent = ?", PostContent_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingedAndGuid Get Postses via PostContentAndPingedAndGuid
func GetPostsesByPostContentAndPingedAndGuid(offset int, limit int, PostContent_ string, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and pinged = ? and guid = ?", PostContent_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingedAndMenuOrder Get Postses via PostContentAndPingedAndMenuOrder
func GetPostsesByPostContentAndPingedAndMenuOrder(offset int, limit int, PostContent_ string, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and pinged = ? and menu_order = ?", PostContent_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingedAndPostType Get Postses via PostContentAndPingedAndPostType
func GetPostsesByPostContentAndPingedAndPostType(offset int, limit int, PostContent_ string, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and pinged = ? and post_type = ?", PostContent_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingedAndPostMimeType Get Postses via PostContentAndPingedAndPostMimeType
func GetPostsesByPostContentAndPingedAndPostMimeType(offset int, limit int, PostContent_ string, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and pinged = ? and post_mime_type = ?", PostContent_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingedAndCommentCount Get Postses via PostContentAndPingedAndCommentCount
func GetPostsesByPostContentAndPingedAndCommentCount(offset int, limit int, PostContent_ string, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and pinged = ? and comment_count = ?", PostContent_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedAndPostModifiedGmt Get Postses via PostContentAndPostModifiedAndPostModifiedGmt
func GetPostsesByPostContentAndPostModifiedAndPostModifiedGmt(offset int, limit int, PostContent_ string, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified = ? and post_modified_gmt = ?", PostContent_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedAndPostContentFiltered Get Postses via PostContentAndPostModifiedAndPostContentFiltered
func GetPostsesByPostContentAndPostModifiedAndPostContentFiltered(offset int, limit int, PostContent_ string, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified = ? and post_content_filtered = ?", PostContent_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedAndPostParent Get Postses via PostContentAndPostModifiedAndPostParent
func GetPostsesByPostContentAndPostModifiedAndPostParent(offset int, limit int, PostContent_ string, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified = ? and post_parent = ?", PostContent_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedAndGuid Get Postses via PostContentAndPostModifiedAndGuid
func GetPostsesByPostContentAndPostModifiedAndGuid(offset int, limit int, PostContent_ string, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified = ? and guid = ?", PostContent_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedAndMenuOrder Get Postses via PostContentAndPostModifiedAndMenuOrder
func GetPostsesByPostContentAndPostModifiedAndMenuOrder(offset int, limit int, PostContent_ string, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified = ? and menu_order = ?", PostContent_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedAndPostType Get Postses via PostContentAndPostModifiedAndPostType
func GetPostsesByPostContentAndPostModifiedAndPostType(offset int, limit int, PostContent_ string, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified = ? and post_type = ?", PostContent_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedAndPostMimeType Get Postses via PostContentAndPostModifiedAndPostMimeType
func GetPostsesByPostContentAndPostModifiedAndPostMimeType(offset int, limit int, PostContent_ string, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified = ? and post_mime_type = ?", PostContent_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedAndCommentCount Get Postses via PostContentAndPostModifiedAndCommentCount
func GetPostsesByPostContentAndPostModifiedAndCommentCount(offset int, limit int, PostContent_ string, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified = ? and comment_count = ?", PostContent_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedGmtAndPostContentFiltered Get Postses via PostContentAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPostContentAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostContent_ string, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified_gmt = ? and post_content_filtered = ?", PostContent_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedGmtAndPostParent Get Postses via PostContentAndPostModifiedGmtAndPostParent
func GetPostsesByPostContentAndPostModifiedGmtAndPostParent(offset int, limit int, PostContent_ string, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified_gmt = ? and post_parent = ?", PostContent_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedGmtAndGuid Get Postses via PostContentAndPostModifiedGmtAndGuid
func GetPostsesByPostContentAndPostModifiedGmtAndGuid(offset int, limit int, PostContent_ string, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified_gmt = ? and guid = ?", PostContent_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedGmtAndMenuOrder Get Postses via PostContentAndPostModifiedGmtAndMenuOrder
func GetPostsesByPostContentAndPostModifiedGmtAndMenuOrder(offset int, limit int, PostContent_ string, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified_gmt = ? and menu_order = ?", PostContent_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedGmtAndPostType Get Postses via PostContentAndPostModifiedGmtAndPostType
func GetPostsesByPostContentAndPostModifiedGmtAndPostType(offset int, limit int, PostContent_ string, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified_gmt = ? and post_type = ?", PostContent_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedGmtAndPostMimeType Get Postses via PostContentAndPostModifiedGmtAndPostMimeType
func GetPostsesByPostContentAndPostModifiedGmtAndPostMimeType(offset int, limit int, PostContent_ string, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified_gmt = ? and post_mime_type = ?", PostContent_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedGmtAndCommentCount Get Postses via PostContentAndPostModifiedGmtAndCommentCount
func GetPostsesByPostContentAndPostModifiedGmtAndCommentCount(offset int, limit int, PostContent_ string, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified_gmt = ? and comment_count = ?", PostContent_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostContentFilteredAndPostParent Get Postses via PostContentAndPostContentFilteredAndPostParent
func GetPostsesByPostContentAndPostContentFilteredAndPostParent(offset int, limit int, PostContent_ string, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_content_filtered = ? and post_parent = ?", PostContent_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostContentFilteredAndGuid Get Postses via PostContentAndPostContentFilteredAndGuid
func GetPostsesByPostContentAndPostContentFilteredAndGuid(offset int, limit int, PostContent_ string, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_content_filtered = ? and guid = ?", PostContent_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostContentFilteredAndMenuOrder Get Postses via PostContentAndPostContentFilteredAndMenuOrder
func GetPostsesByPostContentAndPostContentFilteredAndMenuOrder(offset int, limit int, PostContent_ string, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_content_filtered = ? and menu_order = ?", PostContent_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostContentFilteredAndPostType Get Postses via PostContentAndPostContentFilteredAndPostType
func GetPostsesByPostContentAndPostContentFilteredAndPostType(offset int, limit int, PostContent_ string, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_content_filtered = ? and post_type = ?", PostContent_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostContentFilteredAndPostMimeType Get Postses via PostContentAndPostContentFilteredAndPostMimeType
func GetPostsesByPostContentAndPostContentFilteredAndPostMimeType(offset int, limit int, PostContent_ string, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_content_filtered = ? and post_mime_type = ?", PostContent_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostContentFilteredAndCommentCount Get Postses via PostContentAndPostContentFilteredAndCommentCount
func GetPostsesByPostContentAndPostContentFilteredAndCommentCount(offset int, limit int, PostContent_ string, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_content_filtered = ? and comment_count = ?", PostContent_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostParentAndGuid Get Postses via PostContentAndPostParentAndGuid
func GetPostsesByPostContentAndPostParentAndGuid(offset int, limit int, PostContent_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_parent = ? and guid = ?", PostContent_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostParentAndMenuOrder Get Postses via PostContentAndPostParentAndMenuOrder
func GetPostsesByPostContentAndPostParentAndMenuOrder(offset int, limit int, PostContent_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_parent = ? and menu_order = ?", PostContent_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostParentAndPostType Get Postses via PostContentAndPostParentAndPostType
func GetPostsesByPostContentAndPostParentAndPostType(offset int, limit int, PostContent_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_parent = ? and post_type = ?", PostContent_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostParentAndPostMimeType Get Postses via PostContentAndPostParentAndPostMimeType
func GetPostsesByPostContentAndPostParentAndPostMimeType(offset int, limit int, PostContent_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_parent = ? and post_mime_type = ?", PostContent_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostParentAndCommentCount Get Postses via PostContentAndPostParentAndCommentCount
func GetPostsesByPostContentAndPostParentAndCommentCount(offset int, limit int, PostContent_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_parent = ? and comment_count = ?", PostContent_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndGuidAndMenuOrder Get Postses via PostContentAndGuidAndMenuOrder
func GetPostsesByPostContentAndGuidAndMenuOrder(offset int, limit int, PostContent_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and guid = ? and menu_order = ?", PostContent_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndGuidAndPostType Get Postses via PostContentAndGuidAndPostType
func GetPostsesByPostContentAndGuidAndPostType(offset int, limit int, PostContent_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and guid = ? and post_type = ?", PostContent_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndGuidAndPostMimeType Get Postses via PostContentAndGuidAndPostMimeType
func GetPostsesByPostContentAndGuidAndPostMimeType(offset int, limit int, PostContent_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and guid = ? and post_mime_type = ?", PostContent_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndGuidAndCommentCount Get Postses via PostContentAndGuidAndCommentCount
func GetPostsesByPostContentAndGuidAndCommentCount(offset int, limit int, PostContent_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and guid = ? and comment_count = ?", PostContent_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndMenuOrderAndPostType Get Postses via PostContentAndMenuOrderAndPostType
func GetPostsesByPostContentAndMenuOrderAndPostType(offset int, limit int, PostContent_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and menu_order = ? and post_type = ?", PostContent_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndMenuOrderAndPostMimeType Get Postses via PostContentAndMenuOrderAndPostMimeType
func GetPostsesByPostContentAndMenuOrderAndPostMimeType(offset int, limit int, PostContent_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and menu_order = ? and post_mime_type = ?", PostContent_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndMenuOrderAndCommentCount Get Postses via PostContentAndMenuOrderAndCommentCount
func GetPostsesByPostContentAndMenuOrderAndCommentCount(offset int, limit int, PostContent_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and menu_order = ? and comment_count = ?", PostContent_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTypeAndPostMimeType Get Postses via PostContentAndPostTypeAndPostMimeType
func GetPostsesByPostContentAndPostTypeAndPostMimeType(offset int, limit int, PostContent_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_type = ? and post_mime_type = ?", PostContent_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTypeAndCommentCount Get Postses via PostContentAndPostTypeAndCommentCount
func GetPostsesByPostContentAndPostTypeAndCommentCount(offset int, limit int, PostContent_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_type = ? and comment_count = ?", PostContent_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostMimeTypeAndCommentCount Get Postses via PostContentAndPostMimeTypeAndCommentCount
func GetPostsesByPostContentAndPostMimeTypeAndCommentCount(offset int, limit int, PostContent_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_mime_type = ? and comment_count = ?", PostContent_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPostStatus Get Postses via PostTitleAndPostExcerptAndPostStatus
func GetPostsesByPostTitleAndPostExcerptAndPostStatus(offset int, limit int, PostTitle_ string, PostExcerpt_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and post_status = ?", PostTitle_, PostExcerpt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndCommentStatus Get Postses via PostTitleAndPostExcerptAndCommentStatus
func GetPostsesByPostTitleAndPostExcerptAndCommentStatus(offset int, limit int, PostTitle_ string, PostExcerpt_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and comment_status = ?", PostTitle_, PostExcerpt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPingStatus Get Postses via PostTitleAndPostExcerptAndPingStatus
func GetPostsesByPostTitleAndPostExcerptAndPingStatus(offset int, limit int, PostTitle_ string, PostExcerpt_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and ping_status = ?", PostTitle_, PostExcerpt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPostPassword Get Postses via PostTitleAndPostExcerptAndPostPassword
func GetPostsesByPostTitleAndPostExcerptAndPostPassword(offset int, limit int, PostTitle_ string, PostExcerpt_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and post_password = ?", PostTitle_, PostExcerpt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPostName Get Postses via PostTitleAndPostExcerptAndPostName
func GetPostsesByPostTitleAndPostExcerptAndPostName(offset int, limit int, PostTitle_ string, PostExcerpt_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and post_name = ?", PostTitle_, PostExcerpt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndToPing Get Postses via PostTitleAndPostExcerptAndToPing
func GetPostsesByPostTitleAndPostExcerptAndToPing(offset int, limit int, PostTitle_ string, PostExcerpt_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and to_ping = ?", PostTitle_, PostExcerpt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPinged Get Postses via PostTitleAndPostExcerptAndPinged
func GetPostsesByPostTitleAndPostExcerptAndPinged(offset int, limit int, PostTitle_ string, PostExcerpt_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and pinged = ?", PostTitle_, PostExcerpt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPostModified Get Postses via PostTitleAndPostExcerptAndPostModified
func GetPostsesByPostTitleAndPostExcerptAndPostModified(offset int, limit int, PostTitle_ string, PostExcerpt_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and post_modified = ?", PostTitle_, PostExcerpt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPostModifiedGmt Get Postses via PostTitleAndPostExcerptAndPostModifiedGmt
func GetPostsesByPostTitleAndPostExcerptAndPostModifiedGmt(offset int, limit int, PostTitle_ string, PostExcerpt_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and post_modified_gmt = ?", PostTitle_, PostExcerpt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPostContentFiltered Get Postses via PostTitleAndPostExcerptAndPostContentFiltered
func GetPostsesByPostTitleAndPostExcerptAndPostContentFiltered(offset int, limit int, PostTitle_ string, PostExcerpt_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and post_content_filtered = ?", PostTitle_, PostExcerpt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPostParent Get Postses via PostTitleAndPostExcerptAndPostParent
func GetPostsesByPostTitleAndPostExcerptAndPostParent(offset int, limit int, PostTitle_ string, PostExcerpt_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and post_parent = ?", PostTitle_, PostExcerpt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndGuid Get Postses via PostTitleAndPostExcerptAndGuid
func GetPostsesByPostTitleAndPostExcerptAndGuid(offset int, limit int, PostTitle_ string, PostExcerpt_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and guid = ?", PostTitle_, PostExcerpt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndMenuOrder Get Postses via PostTitleAndPostExcerptAndMenuOrder
func GetPostsesByPostTitleAndPostExcerptAndMenuOrder(offset int, limit int, PostTitle_ string, PostExcerpt_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and menu_order = ?", PostTitle_, PostExcerpt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPostType Get Postses via PostTitleAndPostExcerptAndPostType
func GetPostsesByPostTitleAndPostExcerptAndPostType(offset int, limit int, PostTitle_ string, PostExcerpt_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and post_type = ?", PostTitle_, PostExcerpt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndPostMimeType Get Postses via PostTitleAndPostExcerptAndPostMimeType
func GetPostsesByPostTitleAndPostExcerptAndPostMimeType(offset int, limit int, PostTitle_ string, PostExcerpt_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and post_mime_type = ?", PostTitle_, PostExcerpt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerptAndCommentCount Get Postses via PostTitleAndPostExcerptAndCommentCount
func GetPostsesByPostTitleAndPostExcerptAndCommentCount(offset int, limit int, PostTitle_ string, PostExcerpt_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ? and comment_count = ?", PostTitle_, PostExcerpt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndCommentStatus Get Postses via PostTitleAndPostStatusAndCommentStatus
func GetPostsesByPostTitleAndPostStatusAndCommentStatus(offset int, limit int, PostTitle_ string, PostStatus_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and comment_status = ?", PostTitle_, PostStatus_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndPingStatus Get Postses via PostTitleAndPostStatusAndPingStatus
func GetPostsesByPostTitleAndPostStatusAndPingStatus(offset int, limit int, PostTitle_ string, PostStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and ping_status = ?", PostTitle_, PostStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndPostPassword Get Postses via PostTitleAndPostStatusAndPostPassword
func GetPostsesByPostTitleAndPostStatusAndPostPassword(offset int, limit int, PostTitle_ string, PostStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and post_password = ?", PostTitle_, PostStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndPostName Get Postses via PostTitleAndPostStatusAndPostName
func GetPostsesByPostTitleAndPostStatusAndPostName(offset int, limit int, PostTitle_ string, PostStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and post_name = ?", PostTitle_, PostStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndToPing Get Postses via PostTitleAndPostStatusAndToPing
func GetPostsesByPostTitleAndPostStatusAndToPing(offset int, limit int, PostTitle_ string, PostStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and to_ping = ?", PostTitle_, PostStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndPinged Get Postses via PostTitleAndPostStatusAndPinged
func GetPostsesByPostTitleAndPostStatusAndPinged(offset int, limit int, PostTitle_ string, PostStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and pinged = ?", PostTitle_, PostStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndPostModified Get Postses via PostTitleAndPostStatusAndPostModified
func GetPostsesByPostTitleAndPostStatusAndPostModified(offset int, limit int, PostTitle_ string, PostStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and post_modified = ?", PostTitle_, PostStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndPostModifiedGmt Get Postses via PostTitleAndPostStatusAndPostModifiedGmt
func GetPostsesByPostTitleAndPostStatusAndPostModifiedGmt(offset int, limit int, PostTitle_ string, PostStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and post_modified_gmt = ?", PostTitle_, PostStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndPostContentFiltered Get Postses via PostTitleAndPostStatusAndPostContentFiltered
func GetPostsesByPostTitleAndPostStatusAndPostContentFiltered(offset int, limit int, PostTitle_ string, PostStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and post_content_filtered = ?", PostTitle_, PostStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndPostParent Get Postses via PostTitleAndPostStatusAndPostParent
func GetPostsesByPostTitleAndPostStatusAndPostParent(offset int, limit int, PostTitle_ string, PostStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and post_parent = ?", PostTitle_, PostStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndGuid Get Postses via PostTitleAndPostStatusAndGuid
func GetPostsesByPostTitleAndPostStatusAndGuid(offset int, limit int, PostTitle_ string, PostStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and guid = ?", PostTitle_, PostStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndMenuOrder Get Postses via PostTitleAndPostStatusAndMenuOrder
func GetPostsesByPostTitleAndPostStatusAndMenuOrder(offset int, limit int, PostTitle_ string, PostStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and menu_order = ?", PostTitle_, PostStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndPostType Get Postses via PostTitleAndPostStatusAndPostType
func GetPostsesByPostTitleAndPostStatusAndPostType(offset int, limit int, PostTitle_ string, PostStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and post_type = ?", PostTitle_, PostStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndPostMimeType Get Postses via PostTitleAndPostStatusAndPostMimeType
func GetPostsesByPostTitleAndPostStatusAndPostMimeType(offset int, limit int, PostTitle_ string, PostStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and post_mime_type = ?", PostTitle_, PostStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatusAndCommentCount Get Postses via PostTitleAndPostStatusAndCommentCount
func GetPostsesByPostTitleAndPostStatusAndCommentCount(offset int, limit int, PostTitle_ string, PostStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ? and comment_count = ?", PostTitle_, PostStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndPingStatus Get Postses via PostTitleAndCommentStatusAndPingStatus
func GetPostsesByPostTitleAndCommentStatusAndPingStatus(offset int, limit int, PostTitle_ string, CommentStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and ping_status = ?", PostTitle_, CommentStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndPostPassword Get Postses via PostTitleAndCommentStatusAndPostPassword
func GetPostsesByPostTitleAndCommentStatusAndPostPassword(offset int, limit int, PostTitle_ string, CommentStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and post_password = ?", PostTitle_, CommentStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndPostName Get Postses via PostTitleAndCommentStatusAndPostName
func GetPostsesByPostTitleAndCommentStatusAndPostName(offset int, limit int, PostTitle_ string, CommentStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and post_name = ?", PostTitle_, CommentStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndToPing Get Postses via PostTitleAndCommentStatusAndToPing
func GetPostsesByPostTitleAndCommentStatusAndToPing(offset int, limit int, PostTitle_ string, CommentStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and to_ping = ?", PostTitle_, CommentStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndPinged Get Postses via PostTitleAndCommentStatusAndPinged
func GetPostsesByPostTitleAndCommentStatusAndPinged(offset int, limit int, PostTitle_ string, CommentStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and pinged = ?", PostTitle_, CommentStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndPostModified Get Postses via PostTitleAndCommentStatusAndPostModified
func GetPostsesByPostTitleAndCommentStatusAndPostModified(offset int, limit int, PostTitle_ string, CommentStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and post_modified = ?", PostTitle_, CommentStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndPostModifiedGmt Get Postses via PostTitleAndCommentStatusAndPostModifiedGmt
func GetPostsesByPostTitleAndCommentStatusAndPostModifiedGmt(offset int, limit int, PostTitle_ string, CommentStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and post_modified_gmt = ?", PostTitle_, CommentStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndPostContentFiltered Get Postses via PostTitleAndCommentStatusAndPostContentFiltered
func GetPostsesByPostTitleAndCommentStatusAndPostContentFiltered(offset int, limit int, PostTitle_ string, CommentStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and post_content_filtered = ?", PostTitle_, CommentStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndPostParent Get Postses via PostTitleAndCommentStatusAndPostParent
func GetPostsesByPostTitleAndCommentStatusAndPostParent(offset int, limit int, PostTitle_ string, CommentStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and post_parent = ?", PostTitle_, CommentStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndGuid Get Postses via PostTitleAndCommentStatusAndGuid
func GetPostsesByPostTitleAndCommentStatusAndGuid(offset int, limit int, PostTitle_ string, CommentStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and guid = ?", PostTitle_, CommentStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndMenuOrder Get Postses via PostTitleAndCommentStatusAndMenuOrder
func GetPostsesByPostTitleAndCommentStatusAndMenuOrder(offset int, limit int, PostTitle_ string, CommentStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and menu_order = ?", PostTitle_, CommentStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndPostType Get Postses via PostTitleAndCommentStatusAndPostType
func GetPostsesByPostTitleAndCommentStatusAndPostType(offset int, limit int, PostTitle_ string, CommentStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and post_type = ?", PostTitle_, CommentStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndPostMimeType Get Postses via PostTitleAndCommentStatusAndPostMimeType
func GetPostsesByPostTitleAndCommentStatusAndPostMimeType(offset int, limit int, PostTitle_ string, CommentStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and post_mime_type = ?", PostTitle_, CommentStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatusAndCommentCount Get Postses via PostTitleAndCommentStatusAndCommentCount
func GetPostsesByPostTitleAndCommentStatusAndCommentCount(offset int, limit int, PostTitle_ string, CommentStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ? and comment_count = ?", PostTitle_, CommentStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndPostPassword Get Postses via PostTitleAndPingStatusAndPostPassword
func GetPostsesByPostTitleAndPingStatusAndPostPassword(offset int, limit int, PostTitle_ string, PingStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and post_password = ?", PostTitle_, PingStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndPostName Get Postses via PostTitleAndPingStatusAndPostName
func GetPostsesByPostTitleAndPingStatusAndPostName(offset int, limit int, PostTitle_ string, PingStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and post_name = ?", PostTitle_, PingStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndToPing Get Postses via PostTitleAndPingStatusAndToPing
func GetPostsesByPostTitleAndPingStatusAndToPing(offset int, limit int, PostTitle_ string, PingStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and to_ping = ?", PostTitle_, PingStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndPinged Get Postses via PostTitleAndPingStatusAndPinged
func GetPostsesByPostTitleAndPingStatusAndPinged(offset int, limit int, PostTitle_ string, PingStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and pinged = ?", PostTitle_, PingStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndPostModified Get Postses via PostTitleAndPingStatusAndPostModified
func GetPostsesByPostTitleAndPingStatusAndPostModified(offset int, limit int, PostTitle_ string, PingStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and post_modified = ?", PostTitle_, PingStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndPostModifiedGmt Get Postses via PostTitleAndPingStatusAndPostModifiedGmt
func GetPostsesByPostTitleAndPingStatusAndPostModifiedGmt(offset int, limit int, PostTitle_ string, PingStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and post_modified_gmt = ?", PostTitle_, PingStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndPostContentFiltered Get Postses via PostTitleAndPingStatusAndPostContentFiltered
func GetPostsesByPostTitleAndPingStatusAndPostContentFiltered(offset int, limit int, PostTitle_ string, PingStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and post_content_filtered = ?", PostTitle_, PingStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndPostParent Get Postses via PostTitleAndPingStatusAndPostParent
func GetPostsesByPostTitleAndPingStatusAndPostParent(offset int, limit int, PostTitle_ string, PingStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and post_parent = ?", PostTitle_, PingStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndGuid Get Postses via PostTitleAndPingStatusAndGuid
func GetPostsesByPostTitleAndPingStatusAndGuid(offset int, limit int, PostTitle_ string, PingStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and guid = ?", PostTitle_, PingStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndMenuOrder Get Postses via PostTitleAndPingStatusAndMenuOrder
func GetPostsesByPostTitleAndPingStatusAndMenuOrder(offset int, limit int, PostTitle_ string, PingStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and menu_order = ?", PostTitle_, PingStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndPostType Get Postses via PostTitleAndPingStatusAndPostType
func GetPostsesByPostTitleAndPingStatusAndPostType(offset int, limit int, PostTitle_ string, PingStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and post_type = ?", PostTitle_, PingStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndPostMimeType Get Postses via PostTitleAndPingStatusAndPostMimeType
func GetPostsesByPostTitleAndPingStatusAndPostMimeType(offset int, limit int, PostTitle_ string, PingStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and post_mime_type = ?", PostTitle_, PingStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatusAndCommentCount Get Postses via PostTitleAndPingStatusAndCommentCount
func GetPostsesByPostTitleAndPingStatusAndCommentCount(offset int, limit int, PostTitle_ string, PingStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ? and comment_count = ?", PostTitle_, PingStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndPostName Get Postses via PostTitleAndPostPasswordAndPostName
func GetPostsesByPostTitleAndPostPasswordAndPostName(offset int, limit int, PostTitle_ string, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and post_name = ?", PostTitle_, PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndToPing Get Postses via PostTitleAndPostPasswordAndToPing
func GetPostsesByPostTitleAndPostPasswordAndToPing(offset int, limit int, PostTitle_ string, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and to_ping = ?", PostTitle_, PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndPinged Get Postses via PostTitleAndPostPasswordAndPinged
func GetPostsesByPostTitleAndPostPasswordAndPinged(offset int, limit int, PostTitle_ string, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and pinged = ?", PostTitle_, PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndPostModified Get Postses via PostTitleAndPostPasswordAndPostModified
func GetPostsesByPostTitleAndPostPasswordAndPostModified(offset int, limit int, PostTitle_ string, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and post_modified = ?", PostTitle_, PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndPostModifiedGmt Get Postses via PostTitleAndPostPasswordAndPostModifiedGmt
func GetPostsesByPostTitleAndPostPasswordAndPostModifiedGmt(offset int, limit int, PostTitle_ string, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and post_modified_gmt = ?", PostTitle_, PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndPostContentFiltered Get Postses via PostTitleAndPostPasswordAndPostContentFiltered
func GetPostsesByPostTitleAndPostPasswordAndPostContentFiltered(offset int, limit int, PostTitle_ string, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and post_content_filtered = ?", PostTitle_, PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndPostParent Get Postses via PostTitleAndPostPasswordAndPostParent
func GetPostsesByPostTitleAndPostPasswordAndPostParent(offset int, limit int, PostTitle_ string, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and post_parent = ?", PostTitle_, PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndGuid Get Postses via PostTitleAndPostPasswordAndGuid
func GetPostsesByPostTitleAndPostPasswordAndGuid(offset int, limit int, PostTitle_ string, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and guid = ?", PostTitle_, PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndMenuOrder Get Postses via PostTitleAndPostPasswordAndMenuOrder
func GetPostsesByPostTitleAndPostPasswordAndMenuOrder(offset int, limit int, PostTitle_ string, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and menu_order = ?", PostTitle_, PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndPostType Get Postses via PostTitleAndPostPasswordAndPostType
func GetPostsesByPostTitleAndPostPasswordAndPostType(offset int, limit int, PostTitle_ string, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and post_type = ?", PostTitle_, PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndPostMimeType Get Postses via PostTitleAndPostPasswordAndPostMimeType
func GetPostsesByPostTitleAndPostPasswordAndPostMimeType(offset int, limit int, PostTitle_ string, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and post_mime_type = ?", PostTitle_, PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPasswordAndCommentCount Get Postses via PostTitleAndPostPasswordAndCommentCount
func GetPostsesByPostTitleAndPostPasswordAndCommentCount(offset int, limit int, PostTitle_ string, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ? and comment_count = ?", PostTitle_, PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndToPing Get Postses via PostTitleAndPostNameAndToPing
func GetPostsesByPostTitleAndPostNameAndToPing(offset int, limit int, PostTitle_ string, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and to_ping = ?", PostTitle_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndPinged Get Postses via PostTitleAndPostNameAndPinged
func GetPostsesByPostTitleAndPostNameAndPinged(offset int, limit int, PostTitle_ string, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and pinged = ?", PostTitle_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndPostModified Get Postses via PostTitleAndPostNameAndPostModified
func GetPostsesByPostTitleAndPostNameAndPostModified(offset int, limit int, PostTitle_ string, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and post_modified = ?", PostTitle_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndPostModifiedGmt Get Postses via PostTitleAndPostNameAndPostModifiedGmt
func GetPostsesByPostTitleAndPostNameAndPostModifiedGmt(offset int, limit int, PostTitle_ string, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and post_modified_gmt = ?", PostTitle_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndPostContentFiltered Get Postses via PostTitleAndPostNameAndPostContentFiltered
func GetPostsesByPostTitleAndPostNameAndPostContentFiltered(offset int, limit int, PostTitle_ string, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and post_content_filtered = ?", PostTitle_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndPostParent Get Postses via PostTitleAndPostNameAndPostParent
func GetPostsesByPostTitleAndPostNameAndPostParent(offset int, limit int, PostTitle_ string, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and post_parent = ?", PostTitle_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndGuid Get Postses via PostTitleAndPostNameAndGuid
func GetPostsesByPostTitleAndPostNameAndGuid(offset int, limit int, PostTitle_ string, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and guid = ?", PostTitle_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndMenuOrder Get Postses via PostTitleAndPostNameAndMenuOrder
func GetPostsesByPostTitleAndPostNameAndMenuOrder(offset int, limit int, PostTitle_ string, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and menu_order = ?", PostTitle_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndPostType Get Postses via PostTitleAndPostNameAndPostType
func GetPostsesByPostTitleAndPostNameAndPostType(offset int, limit int, PostTitle_ string, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and post_type = ?", PostTitle_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndPostMimeType Get Postses via PostTitleAndPostNameAndPostMimeType
func GetPostsesByPostTitleAndPostNameAndPostMimeType(offset int, limit int, PostTitle_ string, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and post_mime_type = ?", PostTitle_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostNameAndCommentCount Get Postses via PostTitleAndPostNameAndCommentCount
func GetPostsesByPostTitleAndPostNameAndCommentCount(offset int, limit int, PostTitle_ string, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ? and comment_count = ?", PostTitle_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPingAndPinged Get Postses via PostTitleAndToPingAndPinged
func GetPostsesByPostTitleAndToPingAndPinged(offset int, limit int, PostTitle_ string, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ? and pinged = ?", PostTitle_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPingAndPostModified Get Postses via PostTitleAndToPingAndPostModified
func GetPostsesByPostTitleAndToPingAndPostModified(offset int, limit int, PostTitle_ string, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ? and post_modified = ?", PostTitle_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPingAndPostModifiedGmt Get Postses via PostTitleAndToPingAndPostModifiedGmt
func GetPostsesByPostTitleAndToPingAndPostModifiedGmt(offset int, limit int, PostTitle_ string, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ? and post_modified_gmt = ?", PostTitle_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPingAndPostContentFiltered Get Postses via PostTitleAndToPingAndPostContentFiltered
func GetPostsesByPostTitleAndToPingAndPostContentFiltered(offset int, limit int, PostTitle_ string, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ? and post_content_filtered = ?", PostTitle_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPingAndPostParent Get Postses via PostTitleAndToPingAndPostParent
func GetPostsesByPostTitleAndToPingAndPostParent(offset int, limit int, PostTitle_ string, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ? and post_parent = ?", PostTitle_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPingAndGuid Get Postses via PostTitleAndToPingAndGuid
func GetPostsesByPostTitleAndToPingAndGuid(offset int, limit int, PostTitle_ string, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ? and guid = ?", PostTitle_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPingAndMenuOrder Get Postses via PostTitleAndToPingAndMenuOrder
func GetPostsesByPostTitleAndToPingAndMenuOrder(offset int, limit int, PostTitle_ string, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ? and menu_order = ?", PostTitle_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPingAndPostType Get Postses via PostTitleAndToPingAndPostType
func GetPostsesByPostTitleAndToPingAndPostType(offset int, limit int, PostTitle_ string, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ? and post_type = ?", PostTitle_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPingAndPostMimeType Get Postses via PostTitleAndToPingAndPostMimeType
func GetPostsesByPostTitleAndToPingAndPostMimeType(offset int, limit int, PostTitle_ string, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ? and post_mime_type = ?", PostTitle_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPingAndCommentCount Get Postses via PostTitleAndToPingAndCommentCount
func GetPostsesByPostTitleAndToPingAndCommentCount(offset int, limit int, PostTitle_ string, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ? and comment_count = ?", PostTitle_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingedAndPostModified Get Postses via PostTitleAndPingedAndPostModified
func GetPostsesByPostTitleAndPingedAndPostModified(offset int, limit int, PostTitle_ string, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and pinged = ? and post_modified = ?", PostTitle_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingedAndPostModifiedGmt Get Postses via PostTitleAndPingedAndPostModifiedGmt
func GetPostsesByPostTitleAndPingedAndPostModifiedGmt(offset int, limit int, PostTitle_ string, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and pinged = ? and post_modified_gmt = ?", PostTitle_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingedAndPostContentFiltered Get Postses via PostTitleAndPingedAndPostContentFiltered
func GetPostsesByPostTitleAndPingedAndPostContentFiltered(offset int, limit int, PostTitle_ string, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and pinged = ? and post_content_filtered = ?", PostTitle_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingedAndPostParent Get Postses via PostTitleAndPingedAndPostParent
func GetPostsesByPostTitleAndPingedAndPostParent(offset int, limit int, PostTitle_ string, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and pinged = ? and post_parent = ?", PostTitle_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingedAndGuid Get Postses via PostTitleAndPingedAndGuid
func GetPostsesByPostTitleAndPingedAndGuid(offset int, limit int, PostTitle_ string, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and pinged = ? and guid = ?", PostTitle_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingedAndMenuOrder Get Postses via PostTitleAndPingedAndMenuOrder
func GetPostsesByPostTitleAndPingedAndMenuOrder(offset int, limit int, PostTitle_ string, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and pinged = ? and menu_order = ?", PostTitle_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingedAndPostType Get Postses via PostTitleAndPingedAndPostType
func GetPostsesByPostTitleAndPingedAndPostType(offset int, limit int, PostTitle_ string, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and pinged = ? and post_type = ?", PostTitle_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingedAndPostMimeType Get Postses via PostTitleAndPingedAndPostMimeType
func GetPostsesByPostTitleAndPingedAndPostMimeType(offset int, limit int, PostTitle_ string, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and pinged = ? and post_mime_type = ?", PostTitle_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingedAndCommentCount Get Postses via PostTitleAndPingedAndCommentCount
func GetPostsesByPostTitleAndPingedAndCommentCount(offset int, limit int, PostTitle_ string, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and pinged = ? and comment_count = ?", PostTitle_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedAndPostModifiedGmt Get Postses via PostTitleAndPostModifiedAndPostModifiedGmt
func GetPostsesByPostTitleAndPostModifiedAndPostModifiedGmt(offset int, limit int, PostTitle_ string, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified = ? and post_modified_gmt = ?", PostTitle_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedAndPostContentFiltered Get Postses via PostTitleAndPostModifiedAndPostContentFiltered
func GetPostsesByPostTitleAndPostModifiedAndPostContentFiltered(offset int, limit int, PostTitle_ string, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified = ? and post_content_filtered = ?", PostTitle_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedAndPostParent Get Postses via PostTitleAndPostModifiedAndPostParent
func GetPostsesByPostTitleAndPostModifiedAndPostParent(offset int, limit int, PostTitle_ string, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified = ? and post_parent = ?", PostTitle_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedAndGuid Get Postses via PostTitleAndPostModifiedAndGuid
func GetPostsesByPostTitleAndPostModifiedAndGuid(offset int, limit int, PostTitle_ string, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified = ? and guid = ?", PostTitle_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedAndMenuOrder Get Postses via PostTitleAndPostModifiedAndMenuOrder
func GetPostsesByPostTitleAndPostModifiedAndMenuOrder(offset int, limit int, PostTitle_ string, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified = ? and menu_order = ?", PostTitle_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedAndPostType Get Postses via PostTitleAndPostModifiedAndPostType
func GetPostsesByPostTitleAndPostModifiedAndPostType(offset int, limit int, PostTitle_ string, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified = ? and post_type = ?", PostTitle_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedAndPostMimeType Get Postses via PostTitleAndPostModifiedAndPostMimeType
func GetPostsesByPostTitleAndPostModifiedAndPostMimeType(offset int, limit int, PostTitle_ string, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified = ? and post_mime_type = ?", PostTitle_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedAndCommentCount Get Postses via PostTitleAndPostModifiedAndCommentCount
func GetPostsesByPostTitleAndPostModifiedAndCommentCount(offset int, limit int, PostTitle_ string, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified = ? and comment_count = ?", PostTitle_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedGmtAndPostContentFiltered Get Postses via PostTitleAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPostTitleAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostTitle_ string, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified_gmt = ? and post_content_filtered = ?", PostTitle_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedGmtAndPostParent Get Postses via PostTitleAndPostModifiedGmtAndPostParent
func GetPostsesByPostTitleAndPostModifiedGmtAndPostParent(offset int, limit int, PostTitle_ string, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified_gmt = ? and post_parent = ?", PostTitle_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedGmtAndGuid Get Postses via PostTitleAndPostModifiedGmtAndGuid
func GetPostsesByPostTitleAndPostModifiedGmtAndGuid(offset int, limit int, PostTitle_ string, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified_gmt = ? and guid = ?", PostTitle_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedGmtAndMenuOrder Get Postses via PostTitleAndPostModifiedGmtAndMenuOrder
func GetPostsesByPostTitleAndPostModifiedGmtAndMenuOrder(offset int, limit int, PostTitle_ string, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified_gmt = ? and menu_order = ?", PostTitle_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedGmtAndPostType Get Postses via PostTitleAndPostModifiedGmtAndPostType
func GetPostsesByPostTitleAndPostModifiedGmtAndPostType(offset int, limit int, PostTitle_ string, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified_gmt = ? and post_type = ?", PostTitle_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedGmtAndPostMimeType Get Postses via PostTitleAndPostModifiedGmtAndPostMimeType
func GetPostsesByPostTitleAndPostModifiedGmtAndPostMimeType(offset int, limit int, PostTitle_ string, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified_gmt = ? and post_mime_type = ?", PostTitle_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedGmtAndCommentCount Get Postses via PostTitleAndPostModifiedGmtAndCommentCount
func GetPostsesByPostTitleAndPostModifiedGmtAndCommentCount(offset int, limit int, PostTitle_ string, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified_gmt = ? and comment_count = ?", PostTitle_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostContentFilteredAndPostParent Get Postses via PostTitleAndPostContentFilteredAndPostParent
func GetPostsesByPostTitleAndPostContentFilteredAndPostParent(offset int, limit int, PostTitle_ string, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_content_filtered = ? and post_parent = ?", PostTitle_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostContentFilteredAndGuid Get Postses via PostTitleAndPostContentFilteredAndGuid
func GetPostsesByPostTitleAndPostContentFilteredAndGuid(offset int, limit int, PostTitle_ string, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_content_filtered = ? and guid = ?", PostTitle_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostContentFilteredAndMenuOrder Get Postses via PostTitleAndPostContentFilteredAndMenuOrder
func GetPostsesByPostTitleAndPostContentFilteredAndMenuOrder(offset int, limit int, PostTitle_ string, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_content_filtered = ? and menu_order = ?", PostTitle_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostContentFilteredAndPostType Get Postses via PostTitleAndPostContentFilteredAndPostType
func GetPostsesByPostTitleAndPostContentFilteredAndPostType(offset int, limit int, PostTitle_ string, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_content_filtered = ? and post_type = ?", PostTitle_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostContentFilteredAndPostMimeType Get Postses via PostTitleAndPostContentFilteredAndPostMimeType
func GetPostsesByPostTitleAndPostContentFilteredAndPostMimeType(offset int, limit int, PostTitle_ string, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_content_filtered = ? and post_mime_type = ?", PostTitle_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostContentFilteredAndCommentCount Get Postses via PostTitleAndPostContentFilteredAndCommentCount
func GetPostsesByPostTitleAndPostContentFilteredAndCommentCount(offset int, limit int, PostTitle_ string, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_content_filtered = ? and comment_count = ?", PostTitle_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostParentAndGuid Get Postses via PostTitleAndPostParentAndGuid
func GetPostsesByPostTitleAndPostParentAndGuid(offset int, limit int, PostTitle_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_parent = ? and guid = ?", PostTitle_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostParentAndMenuOrder Get Postses via PostTitleAndPostParentAndMenuOrder
func GetPostsesByPostTitleAndPostParentAndMenuOrder(offset int, limit int, PostTitle_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_parent = ? and menu_order = ?", PostTitle_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostParentAndPostType Get Postses via PostTitleAndPostParentAndPostType
func GetPostsesByPostTitleAndPostParentAndPostType(offset int, limit int, PostTitle_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_parent = ? and post_type = ?", PostTitle_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostParentAndPostMimeType Get Postses via PostTitleAndPostParentAndPostMimeType
func GetPostsesByPostTitleAndPostParentAndPostMimeType(offset int, limit int, PostTitle_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_parent = ? and post_mime_type = ?", PostTitle_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostParentAndCommentCount Get Postses via PostTitleAndPostParentAndCommentCount
func GetPostsesByPostTitleAndPostParentAndCommentCount(offset int, limit int, PostTitle_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_parent = ? and comment_count = ?", PostTitle_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndGuidAndMenuOrder Get Postses via PostTitleAndGuidAndMenuOrder
func GetPostsesByPostTitleAndGuidAndMenuOrder(offset int, limit int, PostTitle_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and guid = ? and menu_order = ?", PostTitle_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndGuidAndPostType Get Postses via PostTitleAndGuidAndPostType
func GetPostsesByPostTitleAndGuidAndPostType(offset int, limit int, PostTitle_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and guid = ? and post_type = ?", PostTitle_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndGuidAndPostMimeType Get Postses via PostTitleAndGuidAndPostMimeType
func GetPostsesByPostTitleAndGuidAndPostMimeType(offset int, limit int, PostTitle_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and guid = ? and post_mime_type = ?", PostTitle_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndGuidAndCommentCount Get Postses via PostTitleAndGuidAndCommentCount
func GetPostsesByPostTitleAndGuidAndCommentCount(offset int, limit int, PostTitle_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and guid = ? and comment_count = ?", PostTitle_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndMenuOrderAndPostType Get Postses via PostTitleAndMenuOrderAndPostType
func GetPostsesByPostTitleAndMenuOrderAndPostType(offset int, limit int, PostTitle_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and menu_order = ? and post_type = ?", PostTitle_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndMenuOrderAndPostMimeType Get Postses via PostTitleAndMenuOrderAndPostMimeType
func GetPostsesByPostTitleAndMenuOrderAndPostMimeType(offset int, limit int, PostTitle_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and menu_order = ? and post_mime_type = ?", PostTitle_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndMenuOrderAndCommentCount Get Postses via PostTitleAndMenuOrderAndCommentCount
func GetPostsesByPostTitleAndMenuOrderAndCommentCount(offset int, limit int, PostTitle_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and menu_order = ? and comment_count = ?", PostTitle_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostTypeAndPostMimeType Get Postses via PostTitleAndPostTypeAndPostMimeType
func GetPostsesByPostTitleAndPostTypeAndPostMimeType(offset int, limit int, PostTitle_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_type = ? and post_mime_type = ?", PostTitle_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostTypeAndCommentCount Get Postses via PostTitleAndPostTypeAndCommentCount
func GetPostsesByPostTitleAndPostTypeAndCommentCount(offset int, limit int, PostTitle_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_type = ? and comment_count = ?", PostTitle_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostMimeTypeAndCommentCount Get Postses via PostTitleAndPostMimeTypeAndCommentCount
func GetPostsesByPostTitleAndPostMimeTypeAndCommentCount(offset int, limit int, PostTitle_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_mime_type = ? and comment_count = ?", PostTitle_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndCommentStatus Get Postses via PostExcerptAndPostStatusAndCommentStatus
func GetPostsesByPostExcerptAndPostStatusAndCommentStatus(offset int, limit int, PostExcerpt_ string, PostStatus_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and comment_status = ?", PostExcerpt_, PostStatus_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndPingStatus Get Postses via PostExcerptAndPostStatusAndPingStatus
func GetPostsesByPostExcerptAndPostStatusAndPingStatus(offset int, limit int, PostExcerpt_ string, PostStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and ping_status = ?", PostExcerpt_, PostStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndPostPassword Get Postses via PostExcerptAndPostStatusAndPostPassword
func GetPostsesByPostExcerptAndPostStatusAndPostPassword(offset int, limit int, PostExcerpt_ string, PostStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and post_password = ?", PostExcerpt_, PostStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndPostName Get Postses via PostExcerptAndPostStatusAndPostName
func GetPostsesByPostExcerptAndPostStatusAndPostName(offset int, limit int, PostExcerpt_ string, PostStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and post_name = ?", PostExcerpt_, PostStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndToPing Get Postses via PostExcerptAndPostStatusAndToPing
func GetPostsesByPostExcerptAndPostStatusAndToPing(offset int, limit int, PostExcerpt_ string, PostStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and to_ping = ?", PostExcerpt_, PostStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndPinged Get Postses via PostExcerptAndPostStatusAndPinged
func GetPostsesByPostExcerptAndPostStatusAndPinged(offset int, limit int, PostExcerpt_ string, PostStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and pinged = ?", PostExcerpt_, PostStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndPostModified Get Postses via PostExcerptAndPostStatusAndPostModified
func GetPostsesByPostExcerptAndPostStatusAndPostModified(offset int, limit int, PostExcerpt_ string, PostStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and post_modified = ?", PostExcerpt_, PostStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndPostModifiedGmt Get Postses via PostExcerptAndPostStatusAndPostModifiedGmt
func GetPostsesByPostExcerptAndPostStatusAndPostModifiedGmt(offset int, limit int, PostExcerpt_ string, PostStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and post_modified_gmt = ?", PostExcerpt_, PostStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndPostContentFiltered Get Postses via PostExcerptAndPostStatusAndPostContentFiltered
func GetPostsesByPostExcerptAndPostStatusAndPostContentFiltered(offset int, limit int, PostExcerpt_ string, PostStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and post_content_filtered = ?", PostExcerpt_, PostStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndPostParent Get Postses via PostExcerptAndPostStatusAndPostParent
func GetPostsesByPostExcerptAndPostStatusAndPostParent(offset int, limit int, PostExcerpt_ string, PostStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and post_parent = ?", PostExcerpt_, PostStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndGuid Get Postses via PostExcerptAndPostStatusAndGuid
func GetPostsesByPostExcerptAndPostStatusAndGuid(offset int, limit int, PostExcerpt_ string, PostStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and guid = ?", PostExcerpt_, PostStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndMenuOrder Get Postses via PostExcerptAndPostStatusAndMenuOrder
func GetPostsesByPostExcerptAndPostStatusAndMenuOrder(offset int, limit int, PostExcerpt_ string, PostStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and menu_order = ?", PostExcerpt_, PostStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndPostType Get Postses via PostExcerptAndPostStatusAndPostType
func GetPostsesByPostExcerptAndPostStatusAndPostType(offset int, limit int, PostExcerpt_ string, PostStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and post_type = ?", PostExcerpt_, PostStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndPostMimeType Get Postses via PostExcerptAndPostStatusAndPostMimeType
func GetPostsesByPostExcerptAndPostStatusAndPostMimeType(offset int, limit int, PostExcerpt_ string, PostStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and post_mime_type = ?", PostExcerpt_, PostStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatusAndCommentCount Get Postses via PostExcerptAndPostStatusAndCommentCount
func GetPostsesByPostExcerptAndPostStatusAndCommentCount(offset int, limit int, PostExcerpt_ string, PostStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ? and comment_count = ?", PostExcerpt_, PostStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndPingStatus Get Postses via PostExcerptAndCommentStatusAndPingStatus
func GetPostsesByPostExcerptAndCommentStatusAndPingStatus(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and ping_status = ?", PostExcerpt_, CommentStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndPostPassword Get Postses via PostExcerptAndCommentStatusAndPostPassword
func GetPostsesByPostExcerptAndCommentStatusAndPostPassword(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and post_password = ?", PostExcerpt_, CommentStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndPostName Get Postses via PostExcerptAndCommentStatusAndPostName
func GetPostsesByPostExcerptAndCommentStatusAndPostName(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and post_name = ?", PostExcerpt_, CommentStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndToPing Get Postses via PostExcerptAndCommentStatusAndToPing
func GetPostsesByPostExcerptAndCommentStatusAndToPing(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and to_ping = ?", PostExcerpt_, CommentStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndPinged Get Postses via PostExcerptAndCommentStatusAndPinged
func GetPostsesByPostExcerptAndCommentStatusAndPinged(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and pinged = ?", PostExcerpt_, CommentStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndPostModified Get Postses via PostExcerptAndCommentStatusAndPostModified
func GetPostsesByPostExcerptAndCommentStatusAndPostModified(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and post_modified = ?", PostExcerpt_, CommentStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndPostModifiedGmt Get Postses via PostExcerptAndCommentStatusAndPostModifiedGmt
func GetPostsesByPostExcerptAndCommentStatusAndPostModifiedGmt(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and post_modified_gmt = ?", PostExcerpt_, CommentStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndPostContentFiltered Get Postses via PostExcerptAndCommentStatusAndPostContentFiltered
func GetPostsesByPostExcerptAndCommentStatusAndPostContentFiltered(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and post_content_filtered = ?", PostExcerpt_, CommentStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndPostParent Get Postses via PostExcerptAndCommentStatusAndPostParent
func GetPostsesByPostExcerptAndCommentStatusAndPostParent(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and post_parent = ?", PostExcerpt_, CommentStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndGuid Get Postses via PostExcerptAndCommentStatusAndGuid
func GetPostsesByPostExcerptAndCommentStatusAndGuid(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and guid = ?", PostExcerpt_, CommentStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndMenuOrder Get Postses via PostExcerptAndCommentStatusAndMenuOrder
func GetPostsesByPostExcerptAndCommentStatusAndMenuOrder(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and menu_order = ?", PostExcerpt_, CommentStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndPostType Get Postses via PostExcerptAndCommentStatusAndPostType
func GetPostsesByPostExcerptAndCommentStatusAndPostType(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and post_type = ?", PostExcerpt_, CommentStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndPostMimeType Get Postses via PostExcerptAndCommentStatusAndPostMimeType
func GetPostsesByPostExcerptAndCommentStatusAndPostMimeType(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and post_mime_type = ?", PostExcerpt_, CommentStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatusAndCommentCount Get Postses via PostExcerptAndCommentStatusAndCommentCount
func GetPostsesByPostExcerptAndCommentStatusAndCommentCount(offset int, limit int, PostExcerpt_ string, CommentStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ? and comment_count = ?", PostExcerpt_, CommentStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndPostPassword Get Postses via PostExcerptAndPingStatusAndPostPassword
func GetPostsesByPostExcerptAndPingStatusAndPostPassword(offset int, limit int, PostExcerpt_ string, PingStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and post_password = ?", PostExcerpt_, PingStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndPostName Get Postses via PostExcerptAndPingStatusAndPostName
func GetPostsesByPostExcerptAndPingStatusAndPostName(offset int, limit int, PostExcerpt_ string, PingStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and post_name = ?", PostExcerpt_, PingStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndToPing Get Postses via PostExcerptAndPingStatusAndToPing
func GetPostsesByPostExcerptAndPingStatusAndToPing(offset int, limit int, PostExcerpt_ string, PingStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and to_ping = ?", PostExcerpt_, PingStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndPinged Get Postses via PostExcerptAndPingStatusAndPinged
func GetPostsesByPostExcerptAndPingStatusAndPinged(offset int, limit int, PostExcerpt_ string, PingStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and pinged = ?", PostExcerpt_, PingStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndPostModified Get Postses via PostExcerptAndPingStatusAndPostModified
func GetPostsesByPostExcerptAndPingStatusAndPostModified(offset int, limit int, PostExcerpt_ string, PingStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and post_modified = ?", PostExcerpt_, PingStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndPostModifiedGmt Get Postses via PostExcerptAndPingStatusAndPostModifiedGmt
func GetPostsesByPostExcerptAndPingStatusAndPostModifiedGmt(offset int, limit int, PostExcerpt_ string, PingStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and post_modified_gmt = ?", PostExcerpt_, PingStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndPostContentFiltered Get Postses via PostExcerptAndPingStatusAndPostContentFiltered
func GetPostsesByPostExcerptAndPingStatusAndPostContentFiltered(offset int, limit int, PostExcerpt_ string, PingStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and post_content_filtered = ?", PostExcerpt_, PingStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndPostParent Get Postses via PostExcerptAndPingStatusAndPostParent
func GetPostsesByPostExcerptAndPingStatusAndPostParent(offset int, limit int, PostExcerpt_ string, PingStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and post_parent = ?", PostExcerpt_, PingStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndGuid Get Postses via PostExcerptAndPingStatusAndGuid
func GetPostsesByPostExcerptAndPingStatusAndGuid(offset int, limit int, PostExcerpt_ string, PingStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and guid = ?", PostExcerpt_, PingStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndMenuOrder Get Postses via PostExcerptAndPingStatusAndMenuOrder
func GetPostsesByPostExcerptAndPingStatusAndMenuOrder(offset int, limit int, PostExcerpt_ string, PingStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and menu_order = ?", PostExcerpt_, PingStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndPostType Get Postses via PostExcerptAndPingStatusAndPostType
func GetPostsesByPostExcerptAndPingStatusAndPostType(offset int, limit int, PostExcerpt_ string, PingStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and post_type = ?", PostExcerpt_, PingStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndPostMimeType Get Postses via PostExcerptAndPingStatusAndPostMimeType
func GetPostsesByPostExcerptAndPingStatusAndPostMimeType(offset int, limit int, PostExcerpt_ string, PingStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and post_mime_type = ?", PostExcerpt_, PingStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatusAndCommentCount Get Postses via PostExcerptAndPingStatusAndCommentCount
func GetPostsesByPostExcerptAndPingStatusAndCommentCount(offset int, limit int, PostExcerpt_ string, PingStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ? and comment_count = ?", PostExcerpt_, PingStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndPostName Get Postses via PostExcerptAndPostPasswordAndPostName
func GetPostsesByPostExcerptAndPostPasswordAndPostName(offset int, limit int, PostExcerpt_ string, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and post_name = ?", PostExcerpt_, PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndToPing Get Postses via PostExcerptAndPostPasswordAndToPing
func GetPostsesByPostExcerptAndPostPasswordAndToPing(offset int, limit int, PostExcerpt_ string, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and to_ping = ?", PostExcerpt_, PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndPinged Get Postses via PostExcerptAndPostPasswordAndPinged
func GetPostsesByPostExcerptAndPostPasswordAndPinged(offset int, limit int, PostExcerpt_ string, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and pinged = ?", PostExcerpt_, PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndPostModified Get Postses via PostExcerptAndPostPasswordAndPostModified
func GetPostsesByPostExcerptAndPostPasswordAndPostModified(offset int, limit int, PostExcerpt_ string, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and post_modified = ?", PostExcerpt_, PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndPostModifiedGmt Get Postses via PostExcerptAndPostPasswordAndPostModifiedGmt
func GetPostsesByPostExcerptAndPostPasswordAndPostModifiedGmt(offset int, limit int, PostExcerpt_ string, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and post_modified_gmt = ?", PostExcerpt_, PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndPostContentFiltered Get Postses via PostExcerptAndPostPasswordAndPostContentFiltered
func GetPostsesByPostExcerptAndPostPasswordAndPostContentFiltered(offset int, limit int, PostExcerpt_ string, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and post_content_filtered = ?", PostExcerpt_, PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndPostParent Get Postses via PostExcerptAndPostPasswordAndPostParent
func GetPostsesByPostExcerptAndPostPasswordAndPostParent(offset int, limit int, PostExcerpt_ string, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and post_parent = ?", PostExcerpt_, PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndGuid Get Postses via PostExcerptAndPostPasswordAndGuid
func GetPostsesByPostExcerptAndPostPasswordAndGuid(offset int, limit int, PostExcerpt_ string, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and guid = ?", PostExcerpt_, PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndMenuOrder Get Postses via PostExcerptAndPostPasswordAndMenuOrder
func GetPostsesByPostExcerptAndPostPasswordAndMenuOrder(offset int, limit int, PostExcerpt_ string, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and menu_order = ?", PostExcerpt_, PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndPostType Get Postses via PostExcerptAndPostPasswordAndPostType
func GetPostsesByPostExcerptAndPostPasswordAndPostType(offset int, limit int, PostExcerpt_ string, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and post_type = ?", PostExcerpt_, PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndPostMimeType Get Postses via PostExcerptAndPostPasswordAndPostMimeType
func GetPostsesByPostExcerptAndPostPasswordAndPostMimeType(offset int, limit int, PostExcerpt_ string, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and post_mime_type = ?", PostExcerpt_, PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPasswordAndCommentCount Get Postses via PostExcerptAndPostPasswordAndCommentCount
func GetPostsesByPostExcerptAndPostPasswordAndCommentCount(offset int, limit int, PostExcerpt_ string, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ? and comment_count = ?", PostExcerpt_, PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndToPing Get Postses via PostExcerptAndPostNameAndToPing
func GetPostsesByPostExcerptAndPostNameAndToPing(offset int, limit int, PostExcerpt_ string, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and to_ping = ?", PostExcerpt_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndPinged Get Postses via PostExcerptAndPostNameAndPinged
func GetPostsesByPostExcerptAndPostNameAndPinged(offset int, limit int, PostExcerpt_ string, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and pinged = ?", PostExcerpt_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndPostModified Get Postses via PostExcerptAndPostNameAndPostModified
func GetPostsesByPostExcerptAndPostNameAndPostModified(offset int, limit int, PostExcerpt_ string, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and post_modified = ?", PostExcerpt_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndPostModifiedGmt Get Postses via PostExcerptAndPostNameAndPostModifiedGmt
func GetPostsesByPostExcerptAndPostNameAndPostModifiedGmt(offset int, limit int, PostExcerpt_ string, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and post_modified_gmt = ?", PostExcerpt_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndPostContentFiltered Get Postses via PostExcerptAndPostNameAndPostContentFiltered
func GetPostsesByPostExcerptAndPostNameAndPostContentFiltered(offset int, limit int, PostExcerpt_ string, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and post_content_filtered = ?", PostExcerpt_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndPostParent Get Postses via PostExcerptAndPostNameAndPostParent
func GetPostsesByPostExcerptAndPostNameAndPostParent(offset int, limit int, PostExcerpt_ string, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and post_parent = ?", PostExcerpt_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndGuid Get Postses via PostExcerptAndPostNameAndGuid
func GetPostsesByPostExcerptAndPostNameAndGuid(offset int, limit int, PostExcerpt_ string, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and guid = ?", PostExcerpt_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndMenuOrder Get Postses via PostExcerptAndPostNameAndMenuOrder
func GetPostsesByPostExcerptAndPostNameAndMenuOrder(offset int, limit int, PostExcerpt_ string, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and menu_order = ?", PostExcerpt_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndPostType Get Postses via PostExcerptAndPostNameAndPostType
func GetPostsesByPostExcerptAndPostNameAndPostType(offset int, limit int, PostExcerpt_ string, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and post_type = ?", PostExcerpt_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndPostMimeType Get Postses via PostExcerptAndPostNameAndPostMimeType
func GetPostsesByPostExcerptAndPostNameAndPostMimeType(offset int, limit int, PostExcerpt_ string, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and post_mime_type = ?", PostExcerpt_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostNameAndCommentCount Get Postses via PostExcerptAndPostNameAndCommentCount
func GetPostsesByPostExcerptAndPostNameAndCommentCount(offset int, limit int, PostExcerpt_ string, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ? and comment_count = ?", PostExcerpt_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPingAndPinged Get Postses via PostExcerptAndToPingAndPinged
func GetPostsesByPostExcerptAndToPingAndPinged(offset int, limit int, PostExcerpt_ string, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ? and pinged = ?", PostExcerpt_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPingAndPostModified Get Postses via PostExcerptAndToPingAndPostModified
func GetPostsesByPostExcerptAndToPingAndPostModified(offset int, limit int, PostExcerpt_ string, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ? and post_modified = ?", PostExcerpt_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPingAndPostModifiedGmt Get Postses via PostExcerptAndToPingAndPostModifiedGmt
func GetPostsesByPostExcerptAndToPingAndPostModifiedGmt(offset int, limit int, PostExcerpt_ string, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ? and post_modified_gmt = ?", PostExcerpt_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPingAndPostContentFiltered Get Postses via PostExcerptAndToPingAndPostContentFiltered
func GetPostsesByPostExcerptAndToPingAndPostContentFiltered(offset int, limit int, PostExcerpt_ string, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ? and post_content_filtered = ?", PostExcerpt_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPingAndPostParent Get Postses via PostExcerptAndToPingAndPostParent
func GetPostsesByPostExcerptAndToPingAndPostParent(offset int, limit int, PostExcerpt_ string, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ? and post_parent = ?", PostExcerpt_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPingAndGuid Get Postses via PostExcerptAndToPingAndGuid
func GetPostsesByPostExcerptAndToPingAndGuid(offset int, limit int, PostExcerpt_ string, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ? and guid = ?", PostExcerpt_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPingAndMenuOrder Get Postses via PostExcerptAndToPingAndMenuOrder
func GetPostsesByPostExcerptAndToPingAndMenuOrder(offset int, limit int, PostExcerpt_ string, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ? and menu_order = ?", PostExcerpt_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPingAndPostType Get Postses via PostExcerptAndToPingAndPostType
func GetPostsesByPostExcerptAndToPingAndPostType(offset int, limit int, PostExcerpt_ string, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ? and post_type = ?", PostExcerpt_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPingAndPostMimeType Get Postses via PostExcerptAndToPingAndPostMimeType
func GetPostsesByPostExcerptAndToPingAndPostMimeType(offset int, limit int, PostExcerpt_ string, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ? and post_mime_type = ?", PostExcerpt_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPingAndCommentCount Get Postses via PostExcerptAndToPingAndCommentCount
func GetPostsesByPostExcerptAndToPingAndCommentCount(offset int, limit int, PostExcerpt_ string, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ? and comment_count = ?", PostExcerpt_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingedAndPostModified Get Postses via PostExcerptAndPingedAndPostModified
func GetPostsesByPostExcerptAndPingedAndPostModified(offset int, limit int, PostExcerpt_ string, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and pinged = ? and post_modified = ?", PostExcerpt_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingedAndPostModifiedGmt Get Postses via PostExcerptAndPingedAndPostModifiedGmt
func GetPostsesByPostExcerptAndPingedAndPostModifiedGmt(offset int, limit int, PostExcerpt_ string, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and pinged = ? and post_modified_gmt = ?", PostExcerpt_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingedAndPostContentFiltered Get Postses via PostExcerptAndPingedAndPostContentFiltered
func GetPostsesByPostExcerptAndPingedAndPostContentFiltered(offset int, limit int, PostExcerpt_ string, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and pinged = ? and post_content_filtered = ?", PostExcerpt_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingedAndPostParent Get Postses via PostExcerptAndPingedAndPostParent
func GetPostsesByPostExcerptAndPingedAndPostParent(offset int, limit int, PostExcerpt_ string, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and pinged = ? and post_parent = ?", PostExcerpt_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingedAndGuid Get Postses via PostExcerptAndPingedAndGuid
func GetPostsesByPostExcerptAndPingedAndGuid(offset int, limit int, PostExcerpt_ string, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and pinged = ? and guid = ?", PostExcerpt_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingedAndMenuOrder Get Postses via PostExcerptAndPingedAndMenuOrder
func GetPostsesByPostExcerptAndPingedAndMenuOrder(offset int, limit int, PostExcerpt_ string, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and pinged = ? and menu_order = ?", PostExcerpt_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingedAndPostType Get Postses via PostExcerptAndPingedAndPostType
func GetPostsesByPostExcerptAndPingedAndPostType(offset int, limit int, PostExcerpt_ string, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and pinged = ? and post_type = ?", PostExcerpt_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingedAndPostMimeType Get Postses via PostExcerptAndPingedAndPostMimeType
func GetPostsesByPostExcerptAndPingedAndPostMimeType(offset int, limit int, PostExcerpt_ string, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and pinged = ? and post_mime_type = ?", PostExcerpt_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingedAndCommentCount Get Postses via PostExcerptAndPingedAndCommentCount
func GetPostsesByPostExcerptAndPingedAndCommentCount(offset int, limit int, PostExcerpt_ string, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and pinged = ? and comment_count = ?", PostExcerpt_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedAndPostModifiedGmt Get Postses via PostExcerptAndPostModifiedAndPostModifiedGmt
func GetPostsesByPostExcerptAndPostModifiedAndPostModifiedGmt(offset int, limit int, PostExcerpt_ string, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified = ? and post_modified_gmt = ?", PostExcerpt_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedAndPostContentFiltered Get Postses via PostExcerptAndPostModifiedAndPostContentFiltered
func GetPostsesByPostExcerptAndPostModifiedAndPostContentFiltered(offset int, limit int, PostExcerpt_ string, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified = ? and post_content_filtered = ?", PostExcerpt_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedAndPostParent Get Postses via PostExcerptAndPostModifiedAndPostParent
func GetPostsesByPostExcerptAndPostModifiedAndPostParent(offset int, limit int, PostExcerpt_ string, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified = ? and post_parent = ?", PostExcerpt_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedAndGuid Get Postses via PostExcerptAndPostModifiedAndGuid
func GetPostsesByPostExcerptAndPostModifiedAndGuid(offset int, limit int, PostExcerpt_ string, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified = ? and guid = ?", PostExcerpt_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedAndMenuOrder Get Postses via PostExcerptAndPostModifiedAndMenuOrder
func GetPostsesByPostExcerptAndPostModifiedAndMenuOrder(offset int, limit int, PostExcerpt_ string, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified = ? and menu_order = ?", PostExcerpt_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedAndPostType Get Postses via PostExcerptAndPostModifiedAndPostType
func GetPostsesByPostExcerptAndPostModifiedAndPostType(offset int, limit int, PostExcerpt_ string, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified = ? and post_type = ?", PostExcerpt_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedAndPostMimeType Get Postses via PostExcerptAndPostModifiedAndPostMimeType
func GetPostsesByPostExcerptAndPostModifiedAndPostMimeType(offset int, limit int, PostExcerpt_ string, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified = ? and post_mime_type = ?", PostExcerpt_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedAndCommentCount Get Postses via PostExcerptAndPostModifiedAndCommentCount
func GetPostsesByPostExcerptAndPostModifiedAndCommentCount(offset int, limit int, PostExcerpt_ string, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified = ? and comment_count = ?", PostExcerpt_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedGmtAndPostContentFiltered Get Postses via PostExcerptAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPostExcerptAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostExcerpt_ string, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified_gmt = ? and post_content_filtered = ?", PostExcerpt_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedGmtAndPostParent Get Postses via PostExcerptAndPostModifiedGmtAndPostParent
func GetPostsesByPostExcerptAndPostModifiedGmtAndPostParent(offset int, limit int, PostExcerpt_ string, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified_gmt = ? and post_parent = ?", PostExcerpt_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedGmtAndGuid Get Postses via PostExcerptAndPostModifiedGmtAndGuid
func GetPostsesByPostExcerptAndPostModifiedGmtAndGuid(offset int, limit int, PostExcerpt_ string, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified_gmt = ? and guid = ?", PostExcerpt_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedGmtAndMenuOrder Get Postses via PostExcerptAndPostModifiedGmtAndMenuOrder
func GetPostsesByPostExcerptAndPostModifiedGmtAndMenuOrder(offset int, limit int, PostExcerpt_ string, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified_gmt = ? and menu_order = ?", PostExcerpt_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedGmtAndPostType Get Postses via PostExcerptAndPostModifiedGmtAndPostType
func GetPostsesByPostExcerptAndPostModifiedGmtAndPostType(offset int, limit int, PostExcerpt_ string, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified_gmt = ? and post_type = ?", PostExcerpt_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedGmtAndPostMimeType Get Postses via PostExcerptAndPostModifiedGmtAndPostMimeType
func GetPostsesByPostExcerptAndPostModifiedGmtAndPostMimeType(offset int, limit int, PostExcerpt_ string, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified_gmt = ? and post_mime_type = ?", PostExcerpt_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedGmtAndCommentCount Get Postses via PostExcerptAndPostModifiedGmtAndCommentCount
func GetPostsesByPostExcerptAndPostModifiedGmtAndCommentCount(offset int, limit int, PostExcerpt_ string, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified_gmt = ? and comment_count = ?", PostExcerpt_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostContentFilteredAndPostParent Get Postses via PostExcerptAndPostContentFilteredAndPostParent
func GetPostsesByPostExcerptAndPostContentFilteredAndPostParent(offset int, limit int, PostExcerpt_ string, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_content_filtered = ? and post_parent = ?", PostExcerpt_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostContentFilteredAndGuid Get Postses via PostExcerptAndPostContentFilteredAndGuid
func GetPostsesByPostExcerptAndPostContentFilteredAndGuid(offset int, limit int, PostExcerpt_ string, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_content_filtered = ? and guid = ?", PostExcerpt_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostContentFilteredAndMenuOrder Get Postses via PostExcerptAndPostContentFilteredAndMenuOrder
func GetPostsesByPostExcerptAndPostContentFilteredAndMenuOrder(offset int, limit int, PostExcerpt_ string, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_content_filtered = ? and menu_order = ?", PostExcerpt_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostContentFilteredAndPostType Get Postses via PostExcerptAndPostContentFilteredAndPostType
func GetPostsesByPostExcerptAndPostContentFilteredAndPostType(offset int, limit int, PostExcerpt_ string, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_content_filtered = ? and post_type = ?", PostExcerpt_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostContentFilteredAndPostMimeType Get Postses via PostExcerptAndPostContentFilteredAndPostMimeType
func GetPostsesByPostExcerptAndPostContentFilteredAndPostMimeType(offset int, limit int, PostExcerpt_ string, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_content_filtered = ? and post_mime_type = ?", PostExcerpt_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostContentFilteredAndCommentCount Get Postses via PostExcerptAndPostContentFilteredAndCommentCount
func GetPostsesByPostExcerptAndPostContentFilteredAndCommentCount(offset int, limit int, PostExcerpt_ string, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_content_filtered = ? and comment_count = ?", PostExcerpt_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostParentAndGuid Get Postses via PostExcerptAndPostParentAndGuid
func GetPostsesByPostExcerptAndPostParentAndGuid(offset int, limit int, PostExcerpt_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_parent = ? and guid = ?", PostExcerpt_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostParentAndMenuOrder Get Postses via PostExcerptAndPostParentAndMenuOrder
func GetPostsesByPostExcerptAndPostParentAndMenuOrder(offset int, limit int, PostExcerpt_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_parent = ? and menu_order = ?", PostExcerpt_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostParentAndPostType Get Postses via PostExcerptAndPostParentAndPostType
func GetPostsesByPostExcerptAndPostParentAndPostType(offset int, limit int, PostExcerpt_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_parent = ? and post_type = ?", PostExcerpt_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostParentAndPostMimeType Get Postses via PostExcerptAndPostParentAndPostMimeType
func GetPostsesByPostExcerptAndPostParentAndPostMimeType(offset int, limit int, PostExcerpt_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_parent = ? and post_mime_type = ?", PostExcerpt_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostParentAndCommentCount Get Postses via PostExcerptAndPostParentAndCommentCount
func GetPostsesByPostExcerptAndPostParentAndCommentCount(offset int, limit int, PostExcerpt_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_parent = ? and comment_count = ?", PostExcerpt_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndGuidAndMenuOrder Get Postses via PostExcerptAndGuidAndMenuOrder
func GetPostsesByPostExcerptAndGuidAndMenuOrder(offset int, limit int, PostExcerpt_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and guid = ? and menu_order = ?", PostExcerpt_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndGuidAndPostType Get Postses via PostExcerptAndGuidAndPostType
func GetPostsesByPostExcerptAndGuidAndPostType(offset int, limit int, PostExcerpt_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and guid = ? and post_type = ?", PostExcerpt_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndGuidAndPostMimeType Get Postses via PostExcerptAndGuidAndPostMimeType
func GetPostsesByPostExcerptAndGuidAndPostMimeType(offset int, limit int, PostExcerpt_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and guid = ? and post_mime_type = ?", PostExcerpt_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndGuidAndCommentCount Get Postses via PostExcerptAndGuidAndCommentCount
func GetPostsesByPostExcerptAndGuidAndCommentCount(offset int, limit int, PostExcerpt_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and guid = ? and comment_count = ?", PostExcerpt_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndMenuOrderAndPostType Get Postses via PostExcerptAndMenuOrderAndPostType
func GetPostsesByPostExcerptAndMenuOrderAndPostType(offset int, limit int, PostExcerpt_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and menu_order = ? and post_type = ?", PostExcerpt_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndMenuOrderAndPostMimeType Get Postses via PostExcerptAndMenuOrderAndPostMimeType
func GetPostsesByPostExcerptAndMenuOrderAndPostMimeType(offset int, limit int, PostExcerpt_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and menu_order = ? and post_mime_type = ?", PostExcerpt_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndMenuOrderAndCommentCount Get Postses via PostExcerptAndMenuOrderAndCommentCount
func GetPostsesByPostExcerptAndMenuOrderAndCommentCount(offset int, limit int, PostExcerpt_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and menu_order = ? and comment_count = ?", PostExcerpt_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostTypeAndPostMimeType Get Postses via PostExcerptAndPostTypeAndPostMimeType
func GetPostsesByPostExcerptAndPostTypeAndPostMimeType(offset int, limit int, PostExcerpt_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_type = ? and post_mime_type = ?", PostExcerpt_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostTypeAndCommentCount Get Postses via PostExcerptAndPostTypeAndCommentCount
func GetPostsesByPostExcerptAndPostTypeAndCommentCount(offset int, limit int, PostExcerpt_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_type = ? and comment_count = ?", PostExcerpt_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostMimeTypeAndCommentCount Get Postses via PostExcerptAndPostMimeTypeAndCommentCount
func GetPostsesByPostExcerptAndPostMimeTypeAndCommentCount(offset int, limit int, PostExcerpt_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_mime_type = ? and comment_count = ?", PostExcerpt_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndPingStatus Get Postses via PostStatusAndCommentStatusAndPingStatus
func GetPostsesByPostStatusAndCommentStatusAndPingStatus(offset int, limit int, PostStatus_ string, CommentStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and ping_status = ?", PostStatus_, CommentStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndPostPassword Get Postses via PostStatusAndCommentStatusAndPostPassword
func GetPostsesByPostStatusAndCommentStatusAndPostPassword(offset int, limit int, PostStatus_ string, CommentStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and post_password = ?", PostStatus_, CommentStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndPostName Get Postses via PostStatusAndCommentStatusAndPostName
func GetPostsesByPostStatusAndCommentStatusAndPostName(offset int, limit int, PostStatus_ string, CommentStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and post_name = ?", PostStatus_, CommentStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndToPing Get Postses via PostStatusAndCommentStatusAndToPing
func GetPostsesByPostStatusAndCommentStatusAndToPing(offset int, limit int, PostStatus_ string, CommentStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and to_ping = ?", PostStatus_, CommentStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndPinged Get Postses via PostStatusAndCommentStatusAndPinged
func GetPostsesByPostStatusAndCommentStatusAndPinged(offset int, limit int, PostStatus_ string, CommentStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and pinged = ?", PostStatus_, CommentStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndPostModified Get Postses via PostStatusAndCommentStatusAndPostModified
func GetPostsesByPostStatusAndCommentStatusAndPostModified(offset int, limit int, PostStatus_ string, CommentStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and post_modified = ?", PostStatus_, CommentStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndPostModifiedGmt Get Postses via PostStatusAndCommentStatusAndPostModifiedGmt
func GetPostsesByPostStatusAndCommentStatusAndPostModifiedGmt(offset int, limit int, PostStatus_ string, CommentStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and post_modified_gmt = ?", PostStatus_, CommentStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndPostContentFiltered Get Postses via PostStatusAndCommentStatusAndPostContentFiltered
func GetPostsesByPostStatusAndCommentStatusAndPostContentFiltered(offset int, limit int, PostStatus_ string, CommentStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and post_content_filtered = ?", PostStatus_, CommentStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndPostParent Get Postses via PostStatusAndCommentStatusAndPostParent
func GetPostsesByPostStatusAndCommentStatusAndPostParent(offset int, limit int, PostStatus_ string, CommentStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and post_parent = ?", PostStatus_, CommentStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndGuid Get Postses via PostStatusAndCommentStatusAndGuid
func GetPostsesByPostStatusAndCommentStatusAndGuid(offset int, limit int, PostStatus_ string, CommentStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and guid = ?", PostStatus_, CommentStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndMenuOrder Get Postses via PostStatusAndCommentStatusAndMenuOrder
func GetPostsesByPostStatusAndCommentStatusAndMenuOrder(offset int, limit int, PostStatus_ string, CommentStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and menu_order = ?", PostStatus_, CommentStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndPostType Get Postses via PostStatusAndCommentStatusAndPostType
func GetPostsesByPostStatusAndCommentStatusAndPostType(offset int, limit int, PostStatus_ string, CommentStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and post_type = ?", PostStatus_, CommentStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndPostMimeType Get Postses via PostStatusAndCommentStatusAndPostMimeType
func GetPostsesByPostStatusAndCommentStatusAndPostMimeType(offset int, limit int, PostStatus_ string, CommentStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and post_mime_type = ?", PostStatus_, CommentStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatusAndCommentCount Get Postses via PostStatusAndCommentStatusAndCommentCount
func GetPostsesByPostStatusAndCommentStatusAndCommentCount(offset int, limit int, PostStatus_ string, CommentStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ? and comment_count = ?", PostStatus_, CommentStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndPostPassword Get Postses via PostStatusAndPingStatusAndPostPassword
func GetPostsesByPostStatusAndPingStatusAndPostPassword(offset int, limit int, PostStatus_ string, PingStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and post_password = ?", PostStatus_, PingStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndPostName Get Postses via PostStatusAndPingStatusAndPostName
func GetPostsesByPostStatusAndPingStatusAndPostName(offset int, limit int, PostStatus_ string, PingStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and post_name = ?", PostStatus_, PingStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndToPing Get Postses via PostStatusAndPingStatusAndToPing
func GetPostsesByPostStatusAndPingStatusAndToPing(offset int, limit int, PostStatus_ string, PingStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and to_ping = ?", PostStatus_, PingStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndPinged Get Postses via PostStatusAndPingStatusAndPinged
func GetPostsesByPostStatusAndPingStatusAndPinged(offset int, limit int, PostStatus_ string, PingStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and pinged = ?", PostStatus_, PingStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndPostModified Get Postses via PostStatusAndPingStatusAndPostModified
func GetPostsesByPostStatusAndPingStatusAndPostModified(offset int, limit int, PostStatus_ string, PingStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and post_modified = ?", PostStatus_, PingStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndPostModifiedGmt Get Postses via PostStatusAndPingStatusAndPostModifiedGmt
func GetPostsesByPostStatusAndPingStatusAndPostModifiedGmt(offset int, limit int, PostStatus_ string, PingStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and post_modified_gmt = ?", PostStatus_, PingStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndPostContentFiltered Get Postses via PostStatusAndPingStatusAndPostContentFiltered
func GetPostsesByPostStatusAndPingStatusAndPostContentFiltered(offset int, limit int, PostStatus_ string, PingStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and post_content_filtered = ?", PostStatus_, PingStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndPostParent Get Postses via PostStatusAndPingStatusAndPostParent
func GetPostsesByPostStatusAndPingStatusAndPostParent(offset int, limit int, PostStatus_ string, PingStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and post_parent = ?", PostStatus_, PingStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndGuid Get Postses via PostStatusAndPingStatusAndGuid
func GetPostsesByPostStatusAndPingStatusAndGuid(offset int, limit int, PostStatus_ string, PingStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and guid = ?", PostStatus_, PingStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndMenuOrder Get Postses via PostStatusAndPingStatusAndMenuOrder
func GetPostsesByPostStatusAndPingStatusAndMenuOrder(offset int, limit int, PostStatus_ string, PingStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and menu_order = ?", PostStatus_, PingStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndPostType Get Postses via PostStatusAndPingStatusAndPostType
func GetPostsesByPostStatusAndPingStatusAndPostType(offset int, limit int, PostStatus_ string, PingStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and post_type = ?", PostStatus_, PingStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndPostMimeType Get Postses via PostStatusAndPingStatusAndPostMimeType
func GetPostsesByPostStatusAndPingStatusAndPostMimeType(offset int, limit int, PostStatus_ string, PingStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and post_mime_type = ?", PostStatus_, PingStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatusAndCommentCount Get Postses via PostStatusAndPingStatusAndCommentCount
func GetPostsesByPostStatusAndPingStatusAndCommentCount(offset int, limit int, PostStatus_ string, PingStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ? and comment_count = ?", PostStatus_, PingStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndPostName Get Postses via PostStatusAndPostPasswordAndPostName
func GetPostsesByPostStatusAndPostPasswordAndPostName(offset int, limit int, PostStatus_ string, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and post_name = ?", PostStatus_, PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndToPing Get Postses via PostStatusAndPostPasswordAndToPing
func GetPostsesByPostStatusAndPostPasswordAndToPing(offset int, limit int, PostStatus_ string, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and to_ping = ?", PostStatus_, PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndPinged Get Postses via PostStatusAndPostPasswordAndPinged
func GetPostsesByPostStatusAndPostPasswordAndPinged(offset int, limit int, PostStatus_ string, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and pinged = ?", PostStatus_, PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndPostModified Get Postses via PostStatusAndPostPasswordAndPostModified
func GetPostsesByPostStatusAndPostPasswordAndPostModified(offset int, limit int, PostStatus_ string, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and post_modified = ?", PostStatus_, PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndPostModifiedGmt Get Postses via PostStatusAndPostPasswordAndPostModifiedGmt
func GetPostsesByPostStatusAndPostPasswordAndPostModifiedGmt(offset int, limit int, PostStatus_ string, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and post_modified_gmt = ?", PostStatus_, PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndPostContentFiltered Get Postses via PostStatusAndPostPasswordAndPostContentFiltered
func GetPostsesByPostStatusAndPostPasswordAndPostContentFiltered(offset int, limit int, PostStatus_ string, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and post_content_filtered = ?", PostStatus_, PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndPostParent Get Postses via PostStatusAndPostPasswordAndPostParent
func GetPostsesByPostStatusAndPostPasswordAndPostParent(offset int, limit int, PostStatus_ string, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and post_parent = ?", PostStatus_, PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndGuid Get Postses via PostStatusAndPostPasswordAndGuid
func GetPostsesByPostStatusAndPostPasswordAndGuid(offset int, limit int, PostStatus_ string, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and guid = ?", PostStatus_, PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndMenuOrder Get Postses via PostStatusAndPostPasswordAndMenuOrder
func GetPostsesByPostStatusAndPostPasswordAndMenuOrder(offset int, limit int, PostStatus_ string, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and menu_order = ?", PostStatus_, PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndPostType Get Postses via PostStatusAndPostPasswordAndPostType
func GetPostsesByPostStatusAndPostPasswordAndPostType(offset int, limit int, PostStatus_ string, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and post_type = ?", PostStatus_, PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndPostMimeType Get Postses via PostStatusAndPostPasswordAndPostMimeType
func GetPostsesByPostStatusAndPostPasswordAndPostMimeType(offset int, limit int, PostStatus_ string, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and post_mime_type = ?", PostStatus_, PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPasswordAndCommentCount Get Postses via PostStatusAndPostPasswordAndCommentCount
func GetPostsesByPostStatusAndPostPasswordAndCommentCount(offset int, limit int, PostStatus_ string, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ? and comment_count = ?", PostStatus_, PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndToPing Get Postses via PostStatusAndPostNameAndToPing
func GetPostsesByPostStatusAndPostNameAndToPing(offset int, limit int, PostStatus_ string, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and to_ping = ?", PostStatus_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndPinged Get Postses via PostStatusAndPostNameAndPinged
func GetPostsesByPostStatusAndPostNameAndPinged(offset int, limit int, PostStatus_ string, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and pinged = ?", PostStatus_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndPostModified Get Postses via PostStatusAndPostNameAndPostModified
func GetPostsesByPostStatusAndPostNameAndPostModified(offset int, limit int, PostStatus_ string, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and post_modified = ?", PostStatus_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndPostModifiedGmt Get Postses via PostStatusAndPostNameAndPostModifiedGmt
func GetPostsesByPostStatusAndPostNameAndPostModifiedGmt(offset int, limit int, PostStatus_ string, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and post_modified_gmt = ?", PostStatus_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndPostContentFiltered Get Postses via PostStatusAndPostNameAndPostContentFiltered
func GetPostsesByPostStatusAndPostNameAndPostContentFiltered(offset int, limit int, PostStatus_ string, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and post_content_filtered = ?", PostStatus_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndPostParent Get Postses via PostStatusAndPostNameAndPostParent
func GetPostsesByPostStatusAndPostNameAndPostParent(offset int, limit int, PostStatus_ string, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and post_parent = ?", PostStatus_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndGuid Get Postses via PostStatusAndPostNameAndGuid
func GetPostsesByPostStatusAndPostNameAndGuid(offset int, limit int, PostStatus_ string, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and guid = ?", PostStatus_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndMenuOrder Get Postses via PostStatusAndPostNameAndMenuOrder
func GetPostsesByPostStatusAndPostNameAndMenuOrder(offset int, limit int, PostStatus_ string, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and menu_order = ?", PostStatus_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndPostType Get Postses via PostStatusAndPostNameAndPostType
func GetPostsesByPostStatusAndPostNameAndPostType(offset int, limit int, PostStatus_ string, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and post_type = ?", PostStatus_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndPostMimeType Get Postses via PostStatusAndPostNameAndPostMimeType
func GetPostsesByPostStatusAndPostNameAndPostMimeType(offset int, limit int, PostStatus_ string, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and post_mime_type = ?", PostStatus_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostNameAndCommentCount Get Postses via PostStatusAndPostNameAndCommentCount
func GetPostsesByPostStatusAndPostNameAndCommentCount(offset int, limit int, PostStatus_ string, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ? and comment_count = ?", PostStatus_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPingAndPinged Get Postses via PostStatusAndToPingAndPinged
func GetPostsesByPostStatusAndToPingAndPinged(offset int, limit int, PostStatus_ string, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ? and pinged = ?", PostStatus_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPingAndPostModified Get Postses via PostStatusAndToPingAndPostModified
func GetPostsesByPostStatusAndToPingAndPostModified(offset int, limit int, PostStatus_ string, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ? and post_modified = ?", PostStatus_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPingAndPostModifiedGmt Get Postses via PostStatusAndToPingAndPostModifiedGmt
func GetPostsesByPostStatusAndToPingAndPostModifiedGmt(offset int, limit int, PostStatus_ string, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ? and post_modified_gmt = ?", PostStatus_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPingAndPostContentFiltered Get Postses via PostStatusAndToPingAndPostContentFiltered
func GetPostsesByPostStatusAndToPingAndPostContentFiltered(offset int, limit int, PostStatus_ string, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ? and post_content_filtered = ?", PostStatus_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPingAndPostParent Get Postses via PostStatusAndToPingAndPostParent
func GetPostsesByPostStatusAndToPingAndPostParent(offset int, limit int, PostStatus_ string, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ? and post_parent = ?", PostStatus_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPingAndGuid Get Postses via PostStatusAndToPingAndGuid
func GetPostsesByPostStatusAndToPingAndGuid(offset int, limit int, PostStatus_ string, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ? and guid = ?", PostStatus_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPingAndMenuOrder Get Postses via PostStatusAndToPingAndMenuOrder
func GetPostsesByPostStatusAndToPingAndMenuOrder(offset int, limit int, PostStatus_ string, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ? and menu_order = ?", PostStatus_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPingAndPostType Get Postses via PostStatusAndToPingAndPostType
func GetPostsesByPostStatusAndToPingAndPostType(offset int, limit int, PostStatus_ string, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ? and post_type = ?", PostStatus_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPingAndPostMimeType Get Postses via PostStatusAndToPingAndPostMimeType
func GetPostsesByPostStatusAndToPingAndPostMimeType(offset int, limit int, PostStatus_ string, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ? and post_mime_type = ?", PostStatus_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPingAndCommentCount Get Postses via PostStatusAndToPingAndCommentCount
func GetPostsesByPostStatusAndToPingAndCommentCount(offset int, limit int, PostStatus_ string, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ? and comment_count = ?", PostStatus_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingedAndPostModified Get Postses via PostStatusAndPingedAndPostModified
func GetPostsesByPostStatusAndPingedAndPostModified(offset int, limit int, PostStatus_ string, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and pinged = ? and post_modified = ?", PostStatus_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingedAndPostModifiedGmt Get Postses via PostStatusAndPingedAndPostModifiedGmt
func GetPostsesByPostStatusAndPingedAndPostModifiedGmt(offset int, limit int, PostStatus_ string, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and pinged = ? and post_modified_gmt = ?", PostStatus_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingedAndPostContentFiltered Get Postses via PostStatusAndPingedAndPostContentFiltered
func GetPostsesByPostStatusAndPingedAndPostContentFiltered(offset int, limit int, PostStatus_ string, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and pinged = ? and post_content_filtered = ?", PostStatus_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingedAndPostParent Get Postses via PostStatusAndPingedAndPostParent
func GetPostsesByPostStatusAndPingedAndPostParent(offset int, limit int, PostStatus_ string, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and pinged = ? and post_parent = ?", PostStatus_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingedAndGuid Get Postses via PostStatusAndPingedAndGuid
func GetPostsesByPostStatusAndPingedAndGuid(offset int, limit int, PostStatus_ string, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and pinged = ? and guid = ?", PostStatus_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingedAndMenuOrder Get Postses via PostStatusAndPingedAndMenuOrder
func GetPostsesByPostStatusAndPingedAndMenuOrder(offset int, limit int, PostStatus_ string, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and pinged = ? and menu_order = ?", PostStatus_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingedAndPostType Get Postses via PostStatusAndPingedAndPostType
func GetPostsesByPostStatusAndPingedAndPostType(offset int, limit int, PostStatus_ string, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and pinged = ? and post_type = ?", PostStatus_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingedAndPostMimeType Get Postses via PostStatusAndPingedAndPostMimeType
func GetPostsesByPostStatusAndPingedAndPostMimeType(offset int, limit int, PostStatus_ string, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and pinged = ? and post_mime_type = ?", PostStatus_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingedAndCommentCount Get Postses via PostStatusAndPingedAndCommentCount
func GetPostsesByPostStatusAndPingedAndCommentCount(offset int, limit int, PostStatus_ string, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and pinged = ? and comment_count = ?", PostStatus_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedAndPostModifiedGmt Get Postses via PostStatusAndPostModifiedAndPostModifiedGmt
func GetPostsesByPostStatusAndPostModifiedAndPostModifiedGmt(offset int, limit int, PostStatus_ string, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified = ? and post_modified_gmt = ?", PostStatus_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedAndPostContentFiltered Get Postses via PostStatusAndPostModifiedAndPostContentFiltered
func GetPostsesByPostStatusAndPostModifiedAndPostContentFiltered(offset int, limit int, PostStatus_ string, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified = ? and post_content_filtered = ?", PostStatus_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedAndPostParent Get Postses via PostStatusAndPostModifiedAndPostParent
func GetPostsesByPostStatusAndPostModifiedAndPostParent(offset int, limit int, PostStatus_ string, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified = ? and post_parent = ?", PostStatus_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedAndGuid Get Postses via PostStatusAndPostModifiedAndGuid
func GetPostsesByPostStatusAndPostModifiedAndGuid(offset int, limit int, PostStatus_ string, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified = ? and guid = ?", PostStatus_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedAndMenuOrder Get Postses via PostStatusAndPostModifiedAndMenuOrder
func GetPostsesByPostStatusAndPostModifiedAndMenuOrder(offset int, limit int, PostStatus_ string, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified = ? and menu_order = ?", PostStatus_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedAndPostType Get Postses via PostStatusAndPostModifiedAndPostType
func GetPostsesByPostStatusAndPostModifiedAndPostType(offset int, limit int, PostStatus_ string, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified = ? and post_type = ?", PostStatus_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedAndPostMimeType Get Postses via PostStatusAndPostModifiedAndPostMimeType
func GetPostsesByPostStatusAndPostModifiedAndPostMimeType(offset int, limit int, PostStatus_ string, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified = ? and post_mime_type = ?", PostStatus_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedAndCommentCount Get Postses via PostStatusAndPostModifiedAndCommentCount
func GetPostsesByPostStatusAndPostModifiedAndCommentCount(offset int, limit int, PostStatus_ string, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified = ? and comment_count = ?", PostStatus_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedGmtAndPostContentFiltered Get Postses via PostStatusAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPostStatusAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostStatus_ string, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified_gmt = ? and post_content_filtered = ?", PostStatus_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedGmtAndPostParent Get Postses via PostStatusAndPostModifiedGmtAndPostParent
func GetPostsesByPostStatusAndPostModifiedGmtAndPostParent(offset int, limit int, PostStatus_ string, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified_gmt = ? and post_parent = ?", PostStatus_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedGmtAndGuid Get Postses via PostStatusAndPostModifiedGmtAndGuid
func GetPostsesByPostStatusAndPostModifiedGmtAndGuid(offset int, limit int, PostStatus_ string, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified_gmt = ? and guid = ?", PostStatus_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedGmtAndMenuOrder Get Postses via PostStatusAndPostModifiedGmtAndMenuOrder
func GetPostsesByPostStatusAndPostModifiedGmtAndMenuOrder(offset int, limit int, PostStatus_ string, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified_gmt = ? and menu_order = ?", PostStatus_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedGmtAndPostType Get Postses via PostStatusAndPostModifiedGmtAndPostType
func GetPostsesByPostStatusAndPostModifiedGmtAndPostType(offset int, limit int, PostStatus_ string, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified_gmt = ? and post_type = ?", PostStatus_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedGmtAndPostMimeType Get Postses via PostStatusAndPostModifiedGmtAndPostMimeType
func GetPostsesByPostStatusAndPostModifiedGmtAndPostMimeType(offset int, limit int, PostStatus_ string, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified_gmt = ? and post_mime_type = ?", PostStatus_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedGmtAndCommentCount Get Postses via PostStatusAndPostModifiedGmtAndCommentCount
func GetPostsesByPostStatusAndPostModifiedGmtAndCommentCount(offset int, limit int, PostStatus_ string, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified_gmt = ? and comment_count = ?", PostStatus_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostContentFilteredAndPostParent Get Postses via PostStatusAndPostContentFilteredAndPostParent
func GetPostsesByPostStatusAndPostContentFilteredAndPostParent(offset int, limit int, PostStatus_ string, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_content_filtered = ? and post_parent = ?", PostStatus_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostContentFilteredAndGuid Get Postses via PostStatusAndPostContentFilteredAndGuid
func GetPostsesByPostStatusAndPostContentFilteredAndGuid(offset int, limit int, PostStatus_ string, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_content_filtered = ? and guid = ?", PostStatus_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostContentFilteredAndMenuOrder Get Postses via PostStatusAndPostContentFilteredAndMenuOrder
func GetPostsesByPostStatusAndPostContentFilteredAndMenuOrder(offset int, limit int, PostStatus_ string, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_content_filtered = ? and menu_order = ?", PostStatus_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostContentFilteredAndPostType Get Postses via PostStatusAndPostContentFilteredAndPostType
func GetPostsesByPostStatusAndPostContentFilteredAndPostType(offset int, limit int, PostStatus_ string, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_content_filtered = ? and post_type = ?", PostStatus_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostContentFilteredAndPostMimeType Get Postses via PostStatusAndPostContentFilteredAndPostMimeType
func GetPostsesByPostStatusAndPostContentFilteredAndPostMimeType(offset int, limit int, PostStatus_ string, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_content_filtered = ? and post_mime_type = ?", PostStatus_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostContentFilteredAndCommentCount Get Postses via PostStatusAndPostContentFilteredAndCommentCount
func GetPostsesByPostStatusAndPostContentFilteredAndCommentCount(offset int, limit int, PostStatus_ string, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_content_filtered = ? and comment_count = ?", PostStatus_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostParentAndGuid Get Postses via PostStatusAndPostParentAndGuid
func GetPostsesByPostStatusAndPostParentAndGuid(offset int, limit int, PostStatus_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_parent = ? and guid = ?", PostStatus_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostParentAndMenuOrder Get Postses via PostStatusAndPostParentAndMenuOrder
func GetPostsesByPostStatusAndPostParentAndMenuOrder(offset int, limit int, PostStatus_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_parent = ? and menu_order = ?", PostStatus_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostParentAndPostType Get Postses via PostStatusAndPostParentAndPostType
func GetPostsesByPostStatusAndPostParentAndPostType(offset int, limit int, PostStatus_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_parent = ? and post_type = ?", PostStatus_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostParentAndPostMimeType Get Postses via PostStatusAndPostParentAndPostMimeType
func GetPostsesByPostStatusAndPostParentAndPostMimeType(offset int, limit int, PostStatus_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_parent = ? and post_mime_type = ?", PostStatus_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostParentAndCommentCount Get Postses via PostStatusAndPostParentAndCommentCount
func GetPostsesByPostStatusAndPostParentAndCommentCount(offset int, limit int, PostStatus_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_parent = ? and comment_count = ?", PostStatus_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndGuidAndMenuOrder Get Postses via PostStatusAndGuidAndMenuOrder
func GetPostsesByPostStatusAndGuidAndMenuOrder(offset int, limit int, PostStatus_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and guid = ? and menu_order = ?", PostStatus_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndGuidAndPostType Get Postses via PostStatusAndGuidAndPostType
func GetPostsesByPostStatusAndGuidAndPostType(offset int, limit int, PostStatus_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and guid = ? and post_type = ?", PostStatus_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndGuidAndPostMimeType Get Postses via PostStatusAndGuidAndPostMimeType
func GetPostsesByPostStatusAndGuidAndPostMimeType(offset int, limit int, PostStatus_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and guid = ? and post_mime_type = ?", PostStatus_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndGuidAndCommentCount Get Postses via PostStatusAndGuidAndCommentCount
func GetPostsesByPostStatusAndGuidAndCommentCount(offset int, limit int, PostStatus_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and guid = ? and comment_count = ?", PostStatus_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndMenuOrderAndPostType Get Postses via PostStatusAndMenuOrderAndPostType
func GetPostsesByPostStatusAndMenuOrderAndPostType(offset int, limit int, PostStatus_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and menu_order = ? and post_type = ?", PostStatus_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndMenuOrderAndPostMimeType Get Postses via PostStatusAndMenuOrderAndPostMimeType
func GetPostsesByPostStatusAndMenuOrderAndPostMimeType(offset int, limit int, PostStatus_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and menu_order = ? and post_mime_type = ?", PostStatus_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndMenuOrderAndCommentCount Get Postses via PostStatusAndMenuOrderAndCommentCount
func GetPostsesByPostStatusAndMenuOrderAndCommentCount(offset int, limit int, PostStatus_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and menu_order = ? and comment_count = ?", PostStatus_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostTypeAndPostMimeType Get Postses via PostStatusAndPostTypeAndPostMimeType
func GetPostsesByPostStatusAndPostTypeAndPostMimeType(offset int, limit int, PostStatus_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_type = ? and post_mime_type = ?", PostStatus_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostTypeAndCommentCount Get Postses via PostStatusAndPostTypeAndCommentCount
func GetPostsesByPostStatusAndPostTypeAndCommentCount(offset int, limit int, PostStatus_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_type = ? and comment_count = ?", PostStatus_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostMimeTypeAndCommentCount Get Postses via PostStatusAndPostMimeTypeAndCommentCount
func GetPostsesByPostStatusAndPostMimeTypeAndCommentCount(offset int, limit int, PostStatus_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_mime_type = ? and comment_count = ?", PostStatus_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndPostPassword Get Postses via CommentStatusAndPingStatusAndPostPassword
func GetPostsesByCommentStatusAndPingStatusAndPostPassword(offset int, limit int, CommentStatus_ string, PingStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and post_password = ?", CommentStatus_, PingStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndPostName Get Postses via CommentStatusAndPingStatusAndPostName
func GetPostsesByCommentStatusAndPingStatusAndPostName(offset int, limit int, CommentStatus_ string, PingStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and post_name = ?", CommentStatus_, PingStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndToPing Get Postses via CommentStatusAndPingStatusAndToPing
func GetPostsesByCommentStatusAndPingStatusAndToPing(offset int, limit int, CommentStatus_ string, PingStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and to_ping = ?", CommentStatus_, PingStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndPinged Get Postses via CommentStatusAndPingStatusAndPinged
func GetPostsesByCommentStatusAndPingStatusAndPinged(offset int, limit int, CommentStatus_ string, PingStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and pinged = ?", CommentStatus_, PingStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndPostModified Get Postses via CommentStatusAndPingStatusAndPostModified
func GetPostsesByCommentStatusAndPingStatusAndPostModified(offset int, limit int, CommentStatus_ string, PingStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and post_modified = ?", CommentStatus_, PingStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndPostModifiedGmt Get Postses via CommentStatusAndPingStatusAndPostModifiedGmt
func GetPostsesByCommentStatusAndPingStatusAndPostModifiedGmt(offset int, limit int, CommentStatus_ string, PingStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and post_modified_gmt = ?", CommentStatus_, PingStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndPostContentFiltered Get Postses via CommentStatusAndPingStatusAndPostContentFiltered
func GetPostsesByCommentStatusAndPingStatusAndPostContentFiltered(offset int, limit int, CommentStatus_ string, PingStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and post_content_filtered = ?", CommentStatus_, PingStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndPostParent Get Postses via CommentStatusAndPingStatusAndPostParent
func GetPostsesByCommentStatusAndPingStatusAndPostParent(offset int, limit int, CommentStatus_ string, PingStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and post_parent = ?", CommentStatus_, PingStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndGuid Get Postses via CommentStatusAndPingStatusAndGuid
func GetPostsesByCommentStatusAndPingStatusAndGuid(offset int, limit int, CommentStatus_ string, PingStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and guid = ?", CommentStatus_, PingStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndMenuOrder Get Postses via CommentStatusAndPingStatusAndMenuOrder
func GetPostsesByCommentStatusAndPingStatusAndMenuOrder(offset int, limit int, CommentStatus_ string, PingStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and menu_order = ?", CommentStatus_, PingStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndPostType Get Postses via CommentStatusAndPingStatusAndPostType
func GetPostsesByCommentStatusAndPingStatusAndPostType(offset int, limit int, CommentStatus_ string, PingStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and post_type = ?", CommentStatus_, PingStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndPostMimeType Get Postses via CommentStatusAndPingStatusAndPostMimeType
func GetPostsesByCommentStatusAndPingStatusAndPostMimeType(offset int, limit int, CommentStatus_ string, PingStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and post_mime_type = ?", CommentStatus_, PingStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatusAndCommentCount Get Postses via CommentStatusAndPingStatusAndCommentCount
func GetPostsesByCommentStatusAndPingStatusAndCommentCount(offset int, limit int, CommentStatus_ string, PingStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ? and comment_count = ?", CommentStatus_, PingStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndPostName Get Postses via CommentStatusAndPostPasswordAndPostName
func GetPostsesByCommentStatusAndPostPasswordAndPostName(offset int, limit int, CommentStatus_ string, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and post_name = ?", CommentStatus_, PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndToPing Get Postses via CommentStatusAndPostPasswordAndToPing
func GetPostsesByCommentStatusAndPostPasswordAndToPing(offset int, limit int, CommentStatus_ string, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and to_ping = ?", CommentStatus_, PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndPinged Get Postses via CommentStatusAndPostPasswordAndPinged
func GetPostsesByCommentStatusAndPostPasswordAndPinged(offset int, limit int, CommentStatus_ string, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and pinged = ?", CommentStatus_, PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndPostModified Get Postses via CommentStatusAndPostPasswordAndPostModified
func GetPostsesByCommentStatusAndPostPasswordAndPostModified(offset int, limit int, CommentStatus_ string, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and post_modified = ?", CommentStatus_, PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndPostModifiedGmt Get Postses via CommentStatusAndPostPasswordAndPostModifiedGmt
func GetPostsesByCommentStatusAndPostPasswordAndPostModifiedGmt(offset int, limit int, CommentStatus_ string, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and post_modified_gmt = ?", CommentStatus_, PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndPostContentFiltered Get Postses via CommentStatusAndPostPasswordAndPostContentFiltered
func GetPostsesByCommentStatusAndPostPasswordAndPostContentFiltered(offset int, limit int, CommentStatus_ string, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and post_content_filtered = ?", CommentStatus_, PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndPostParent Get Postses via CommentStatusAndPostPasswordAndPostParent
func GetPostsesByCommentStatusAndPostPasswordAndPostParent(offset int, limit int, CommentStatus_ string, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and post_parent = ?", CommentStatus_, PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndGuid Get Postses via CommentStatusAndPostPasswordAndGuid
func GetPostsesByCommentStatusAndPostPasswordAndGuid(offset int, limit int, CommentStatus_ string, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and guid = ?", CommentStatus_, PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndMenuOrder Get Postses via CommentStatusAndPostPasswordAndMenuOrder
func GetPostsesByCommentStatusAndPostPasswordAndMenuOrder(offset int, limit int, CommentStatus_ string, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and menu_order = ?", CommentStatus_, PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndPostType Get Postses via CommentStatusAndPostPasswordAndPostType
func GetPostsesByCommentStatusAndPostPasswordAndPostType(offset int, limit int, CommentStatus_ string, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and post_type = ?", CommentStatus_, PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndPostMimeType Get Postses via CommentStatusAndPostPasswordAndPostMimeType
func GetPostsesByCommentStatusAndPostPasswordAndPostMimeType(offset int, limit int, CommentStatus_ string, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and post_mime_type = ?", CommentStatus_, PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPasswordAndCommentCount Get Postses via CommentStatusAndPostPasswordAndCommentCount
func GetPostsesByCommentStatusAndPostPasswordAndCommentCount(offset int, limit int, CommentStatus_ string, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ? and comment_count = ?", CommentStatus_, PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndToPing Get Postses via CommentStatusAndPostNameAndToPing
func GetPostsesByCommentStatusAndPostNameAndToPing(offset int, limit int, CommentStatus_ string, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and to_ping = ?", CommentStatus_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndPinged Get Postses via CommentStatusAndPostNameAndPinged
func GetPostsesByCommentStatusAndPostNameAndPinged(offset int, limit int, CommentStatus_ string, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and pinged = ?", CommentStatus_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndPostModified Get Postses via CommentStatusAndPostNameAndPostModified
func GetPostsesByCommentStatusAndPostNameAndPostModified(offset int, limit int, CommentStatus_ string, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and post_modified = ?", CommentStatus_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndPostModifiedGmt Get Postses via CommentStatusAndPostNameAndPostModifiedGmt
func GetPostsesByCommentStatusAndPostNameAndPostModifiedGmt(offset int, limit int, CommentStatus_ string, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and post_modified_gmt = ?", CommentStatus_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndPostContentFiltered Get Postses via CommentStatusAndPostNameAndPostContentFiltered
func GetPostsesByCommentStatusAndPostNameAndPostContentFiltered(offset int, limit int, CommentStatus_ string, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and post_content_filtered = ?", CommentStatus_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndPostParent Get Postses via CommentStatusAndPostNameAndPostParent
func GetPostsesByCommentStatusAndPostNameAndPostParent(offset int, limit int, CommentStatus_ string, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and post_parent = ?", CommentStatus_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndGuid Get Postses via CommentStatusAndPostNameAndGuid
func GetPostsesByCommentStatusAndPostNameAndGuid(offset int, limit int, CommentStatus_ string, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and guid = ?", CommentStatus_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndMenuOrder Get Postses via CommentStatusAndPostNameAndMenuOrder
func GetPostsesByCommentStatusAndPostNameAndMenuOrder(offset int, limit int, CommentStatus_ string, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and menu_order = ?", CommentStatus_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndPostType Get Postses via CommentStatusAndPostNameAndPostType
func GetPostsesByCommentStatusAndPostNameAndPostType(offset int, limit int, CommentStatus_ string, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and post_type = ?", CommentStatus_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndPostMimeType Get Postses via CommentStatusAndPostNameAndPostMimeType
func GetPostsesByCommentStatusAndPostNameAndPostMimeType(offset int, limit int, CommentStatus_ string, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and post_mime_type = ?", CommentStatus_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostNameAndCommentCount Get Postses via CommentStatusAndPostNameAndCommentCount
func GetPostsesByCommentStatusAndPostNameAndCommentCount(offset int, limit int, CommentStatus_ string, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ? and comment_count = ?", CommentStatus_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPingAndPinged Get Postses via CommentStatusAndToPingAndPinged
func GetPostsesByCommentStatusAndToPingAndPinged(offset int, limit int, CommentStatus_ string, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ? and pinged = ?", CommentStatus_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPingAndPostModified Get Postses via CommentStatusAndToPingAndPostModified
func GetPostsesByCommentStatusAndToPingAndPostModified(offset int, limit int, CommentStatus_ string, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ? and post_modified = ?", CommentStatus_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPingAndPostModifiedGmt Get Postses via CommentStatusAndToPingAndPostModifiedGmt
func GetPostsesByCommentStatusAndToPingAndPostModifiedGmt(offset int, limit int, CommentStatus_ string, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ? and post_modified_gmt = ?", CommentStatus_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPingAndPostContentFiltered Get Postses via CommentStatusAndToPingAndPostContentFiltered
func GetPostsesByCommentStatusAndToPingAndPostContentFiltered(offset int, limit int, CommentStatus_ string, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ? and post_content_filtered = ?", CommentStatus_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPingAndPostParent Get Postses via CommentStatusAndToPingAndPostParent
func GetPostsesByCommentStatusAndToPingAndPostParent(offset int, limit int, CommentStatus_ string, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ? and post_parent = ?", CommentStatus_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPingAndGuid Get Postses via CommentStatusAndToPingAndGuid
func GetPostsesByCommentStatusAndToPingAndGuid(offset int, limit int, CommentStatus_ string, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ? and guid = ?", CommentStatus_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPingAndMenuOrder Get Postses via CommentStatusAndToPingAndMenuOrder
func GetPostsesByCommentStatusAndToPingAndMenuOrder(offset int, limit int, CommentStatus_ string, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ? and menu_order = ?", CommentStatus_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPingAndPostType Get Postses via CommentStatusAndToPingAndPostType
func GetPostsesByCommentStatusAndToPingAndPostType(offset int, limit int, CommentStatus_ string, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ? and post_type = ?", CommentStatus_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPingAndPostMimeType Get Postses via CommentStatusAndToPingAndPostMimeType
func GetPostsesByCommentStatusAndToPingAndPostMimeType(offset int, limit int, CommentStatus_ string, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ? and post_mime_type = ?", CommentStatus_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPingAndCommentCount Get Postses via CommentStatusAndToPingAndCommentCount
func GetPostsesByCommentStatusAndToPingAndCommentCount(offset int, limit int, CommentStatus_ string, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ? and comment_count = ?", CommentStatus_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingedAndPostModified Get Postses via CommentStatusAndPingedAndPostModified
func GetPostsesByCommentStatusAndPingedAndPostModified(offset int, limit int, CommentStatus_ string, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and pinged = ? and post_modified = ?", CommentStatus_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingedAndPostModifiedGmt Get Postses via CommentStatusAndPingedAndPostModifiedGmt
func GetPostsesByCommentStatusAndPingedAndPostModifiedGmt(offset int, limit int, CommentStatus_ string, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and pinged = ? and post_modified_gmt = ?", CommentStatus_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingedAndPostContentFiltered Get Postses via CommentStatusAndPingedAndPostContentFiltered
func GetPostsesByCommentStatusAndPingedAndPostContentFiltered(offset int, limit int, CommentStatus_ string, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and pinged = ? and post_content_filtered = ?", CommentStatus_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingedAndPostParent Get Postses via CommentStatusAndPingedAndPostParent
func GetPostsesByCommentStatusAndPingedAndPostParent(offset int, limit int, CommentStatus_ string, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and pinged = ? and post_parent = ?", CommentStatus_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingedAndGuid Get Postses via CommentStatusAndPingedAndGuid
func GetPostsesByCommentStatusAndPingedAndGuid(offset int, limit int, CommentStatus_ string, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and pinged = ? and guid = ?", CommentStatus_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingedAndMenuOrder Get Postses via CommentStatusAndPingedAndMenuOrder
func GetPostsesByCommentStatusAndPingedAndMenuOrder(offset int, limit int, CommentStatus_ string, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and pinged = ? and menu_order = ?", CommentStatus_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingedAndPostType Get Postses via CommentStatusAndPingedAndPostType
func GetPostsesByCommentStatusAndPingedAndPostType(offset int, limit int, CommentStatus_ string, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and pinged = ? and post_type = ?", CommentStatus_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingedAndPostMimeType Get Postses via CommentStatusAndPingedAndPostMimeType
func GetPostsesByCommentStatusAndPingedAndPostMimeType(offset int, limit int, CommentStatus_ string, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and pinged = ? and post_mime_type = ?", CommentStatus_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingedAndCommentCount Get Postses via CommentStatusAndPingedAndCommentCount
func GetPostsesByCommentStatusAndPingedAndCommentCount(offset int, limit int, CommentStatus_ string, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and pinged = ? and comment_count = ?", CommentStatus_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedAndPostModifiedGmt Get Postses via CommentStatusAndPostModifiedAndPostModifiedGmt
func GetPostsesByCommentStatusAndPostModifiedAndPostModifiedGmt(offset int, limit int, CommentStatus_ string, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified = ? and post_modified_gmt = ?", CommentStatus_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedAndPostContentFiltered Get Postses via CommentStatusAndPostModifiedAndPostContentFiltered
func GetPostsesByCommentStatusAndPostModifiedAndPostContentFiltered(offset int, limit int, CommentStatus_ string, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified = ? and post_content_filtered = ?", CommentStatus_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedAndPostParent Get Postses via CommentStatusAndPostModifiedAndPostParent
func GetPostsesByCommentStatusAndPostModifiedAndPostParent(offset int, limit int, CommentStatus_ string, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified = ? and post_parent = ?", CommentStatus_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedAndGuid Get Postses via CommentStatusAndPostModifiedAndGuid
func GetPostsesByCommentStatusAndPostModifiedAndGuid(offset int, limit int, CommentStatus_ string, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified = ? and guid = ?", CommentStatus_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedAndMenuOrder Get Postses via CommentStatusAndPostModifiedAndMenuOrder
func GetPostsesByCommentStatusAndPostModifiedAndMenuOrder(offset int, limit int, CommentStatus_ string, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified = ? and menu_order = ?", CommentStatus_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedAndPostType Get Postses via CommentStatusAndPostModifiedAndPostType
func GetPostsesByCommentStatusAndPostModifiedAndPostType(offset int, limit int, CommentStatus_ string, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified = ? and post_type = ?", CommentStatus_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedAndPostMimeType Get Postses via CommentStatusAndPostModifiedAndPostMimeType
func GetPostsesByCommentStatusAndPostModifiedAndPostMimeType(offset int, limit int, CommentStatus_ string, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified = ? and post_mime_type = ?", CommentStatus_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedAndCommentCount Get Postses via CommentStatusAndPostModifiedAndCommentCount
func GetPostsesByCommentStatusAndPostModifiedAndCommentCount(offset int, limit int, CommentStatus_ string, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified = ? and comment_count = ?", CommentStatus_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedGmtAndPostContentFiltered Get Postses via CommentStatusAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByCommentStatusAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, CommentStatus_ string, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified_gmt = ? and post_content_filtered = ?", CommentStatus_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedGmtAndPostParent Get Postses via CommentStatusAndPostModifiedGmtAndPostParent
func GetPostsesByCommentStatusAndPostModifiedGmtAndPostParent(offset int, limit int, CommentStatus_ string, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified_gmt = ? and post_parent = ?", CommentStatus_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedGmtAndGuid Get Postses via CommentStatusAndPostModifiedGmtAndGuid
func GetPostsesByCommentStatusAndPostModifiedGmtAndGuid(offset int, limit int, CommentStatus_ string, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified_gmt = ? and guid = ?", CommentStatus_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedGmtAndMenuOrder Get Postses via CommentStatusAndPostModifiedGmtAndMenuOrder
func GetPostsesByCommentStatusAndPostModifiedGmtAndMenuOrder(offset int, limit int, CommentStatus_ string, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified_gmt = ? and menu_order = ?", CommentStatus_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedGmtAndPostType Get Postses via CommentStatusAndPostModifiedGmtAndPostType
func GetPostsesByCommentStatusAndPostModifiedGmtAndPostType(offset int, limit int, CommentStatus_ string, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified_gmt = ? and post_type = ?", CommentStatus_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedGmtAndPostMimeType Get Postses via CommentStatusAndPostModifiedGmtAndPostMimeType
func GetPostsesByCommentStatusAndPostModifiedGmtAndPostMimeType(offset int, limit int, CommentStatus_ string, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified_gmt = ? and post_mime_type = ?", CommentStatus_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedGmtAndCommentCount Get Postses via CommentStatusAndPostModifiedGmtAndCommentCount
func GetPostsesByCommentStatusAndPostModifiedGmtAndCommentCount(offset int, limit int, CommentStatus_ string, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified_gmt = ? and comment_count = ?", CommentStatus_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostContentFilteredAndPostParent Get Postses via CommentStatusAndPostContentFilteredAndPostParent
func GetPostsesByCommentStatusAndPostContentFilteredAndPostParent(offset int, limit int, CommentStatus_ string, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_content_filtered = ? and post_parent = ?", CommentStatus_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostContentFilteredAndGuid Get Postses via CommentStatusAndPostContentFilteredAndGuid
func GetPostsesByCommentStatusAndPostContentFilteredAndGuid(offset int, limit int, CommentStatus_ string, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_content_filtered = ? and guid = ?", CommentStatus_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostContentFilteredAndMenuOrder Get Postses via CommentStatusAndPostContentFilteredAndMenuOrder
func GetPostsesByCommentStatusAndPostContentFilteredAndMenuOrder(offset int, limit int, CommentStatus_ string, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_content_filtered = ? and menu_order = ?", CommentStatus_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostContentFilteredAndPostType Get Postses via CommentStatusAndPostContentFilteredAndPostType
func GetPostsesByCommentStatusAndPostContentFilteredAndPostType(offset int, limit int, CommentStatus_ string, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_content_filtered = ? and post_type = ?", CommentStatus_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostContentFilteredAndPostMimeType Get Postses via CommentStatusAndPostContentFilteredAndPostMimeType
func GetPostsesByCommentStatusAndPostContentFilteredAndPostMimeType(offset int, limit int, CommentStatus_ string, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_content_filtered = ? and post_mime_type = ?", CommentStatus_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostContentFilteredAndCommentCount Get Postses via CommentStatusAndPostContentFilteredAndCommentCount
func GetPostsesByCommentStatusAndPostContentFilteredAndCommentCount(offset int, limit int, CommentStatus_ string, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_content_filtered = ? and comment_count = ?", CommentStatus_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostParentAndGuid Get Postses via CommentStatusAndPostParentAndGuid
func GetPostsesByCommentStatusAndPostParentAndGuid(offset int, limit int, CommentStatus_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_parent = ? and guid = ?", CommentStatus_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostParentAndMenuOrder Get Postses via CommentStatusAndPostParentAndMenuOrder
func GetPostsesByCommentStatusAndPostParentAndMenuOrder(offset int, limit int, CommentStatus_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_parent = ? and menu_order = ?", CommentStatus_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostParentAndPostType Get Postses via CommentStatusAndPostParentAndPostType
func GetPostsesByCommentStatusAndPostParentAndPostType(offset int, limit int, CommentStatus_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_parent = ? and post_type = ?", CommentStatus_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostParentAndPostMimeType Get Postses via CommentStatusAndPostParentAndPostMimeType
func GetPostsesByCommentStatusAndPostParentAndPostMimeType(offset int, limit int, CommentStatus_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_parent = ? and post_mime_type = ?", CommentStatus_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostParentAndCommentCount Get Postses via CommentStatusAndPostParentAndCommentCount
func GetPostsesByCommentStatusAndPostParentAndCommentCount(offset int, limit int, CommentStatus_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_parent = ? and comment_count = ?", CommentStatus_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndGuidAndMenuOrder Get Postses via CommentStatusAndGuidAndMenuOrder
func GetPostsesByCommentStatusAndGuidAndMenuOrder(offset int, limit int, CommentStatus_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and guid = ? and menu_order = ?", CommentStatus_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndGuidAndPostType Get Postses via CommentStatusAndGuidAndPostType
func GetPostsesByCommentStatusAndGuidAndPostType(offset int, limit int, CommentStatus_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and guid = ? and post_type = ?", CommentStatus_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndGuidAndPostMimeType Get Postses via CommentStatusAndGuidAndPostMimeType
func GetPostsesByCommentStatusAndGuidAndPostMimeType(offset int, limit int, CommentStatus_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and guid = ? and post_mime_type = ?", CommentStatus_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndGuidAndCommentCount Get Postses via CommentStatusAndGuidAndCommentCount
func GetPostsesByCommentStatusAndGuidAndCommentCount(offset int, limit int, CommentStatus_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and guid = ? and comment_count = ?", CommentStatus_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndMenuOrderAndPostType Get Postses via CommentStatusAndMenuOrderAndPostType
func GetPostsesByCommentStatusAndMenuOrderAndPostType(offset int, limit int, CommentStatus_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and menu_order = ? and post_type = ?", CommentStatus_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndMenuOrderAndPostMimeType Get Postses via CommentStatusAndMenuOrderAndPostMimeType
func GetPostsesByCommentStatusAndMenuOrderAndPostMimeType(offset int, limit int, CommentStatus_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and menu_order = ? and post_mime_type = ?", CommentStatus_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndMenuOrderAndCommentCount Get Postses via CommentStatusAndMenuOrderAndCommentCount
func GetPostsesByCommentStatusAndMenuOrderAndCommentCount(offset int, limit int, CommentStatus_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and menu_order = ? and comment_count = ?", CommentStatus_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostTypeAndPostMimeType Get Postses via CommentStatusAndPostTypeAndPostMimeType
func GetPostsesByCommentStatusAndPostTypeAndPostMimeType(offset int, limit int, CommentStatus_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_type = ? and post_mime_type = ?", CommentStatus_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostTypeAndCommentCount Get Postses via CommentStatusAndPostTypeAndCommentCount
func GetPostsesByCommentStatusAndPostTypeAndCommentCount(offset int, limit int, CommentStatus_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_type = ? and comment_count = ?", CommentStatus_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostMimeTypeAndCommentCount Get Postses via CommentStatusAndPostMimeTypeAndCommentCount
func GetPostsesByCommentStatusAndPostMimeTypeAndCommentCount(offset int, limit int, CommentStatus_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_mime_type = ? and comment_count = ?", CommentStatus_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndPostName Get Postses via PingStatusAndPostPasswordAndPostName
func GetPostsesByPingStatusAndPostPasswordAndPostName(offset int, limit int, PingStatus_ string, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and post_name = ?", PingStatus_, PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndToPing Get Postses via PingStatusAndPostPasswordAndToPing
func GetPostsesByPingStatusAndPostPasswordAndToPing(offset int, limit int, PingStatus_ string, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and to_ping = ?", PingStatus_, PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndPinged Get Postses via PingStatusAndPostPasswordAndPinged
func GetPostsesByPingStatusAndPostPasswordAndPinged(offset int, limit int, PingStatus_ string, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and pinged = ?", PingStatus_, PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndPostModified Get Postses via PingStatusAndPostPasswordAndPostModified
func GetPostsesByPingStatusAndPostPasswordAndPostModified(offset int, limit int, PingStatus_ string, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and post_modified = ?", PingStatus_, PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndPostModifiedGmt Get Postses via PingStatusAndPostPasswordAndPostModifiedGmt
func GetPostsesByPingStatusAndPostPasswordAndPostModifiedGmt(offset int, limit int, PingStatus_ string, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and post_modified_gmt = ?", PingStatus_, PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndPostContentFiltered Get Postses via PingStatusAndPostPasswordAndPostContentFiltered
func GetPostsesByPingStatusAndPostPasswordAndPostContentFiltered(offset int, limit int, PingStatus_ string, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and post_content_filtered = ?", PingStatus_, PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndPostParent Get Postses via PingStatusAndPostPasswordAndPostParent
func GetPostsesByPingStatusAndPostPasswordAndPostParent(offset int, limit int, PingStatus_ string, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and post_parent = ?", PingStatus_, PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndGuid Get Postses via PingStatusAndPostPasswordAndGuid
func GetPostsesByPingStatusAndPostPasswordAndGuid(offset int, limit int, PingStatus_ string, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and guid = ?", PingStatus_, PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndMenuOrder Get Postses via PingStatusAndPostPasswordAndMenuOrder
func GetPostsesByPingStatusAndPostPasswordAndMenuOrder(offset int, limit int, PingStatus_ string, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and menu_order = ?", PingStatus_, PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndPostType Get Postses via PingStatusAndPostPasswordAndPostType
func GetPostsesByPingStatusAndPostPasswordAndPostType(offset int, limit int, PingStatus_ string, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and post_type = ?", PingStatus_, PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndPostMimeType Get Postses via PingStatusAndPostPasswordAndPostMimeType
func GetPostsesByPingStatusAndPostPasswordAndPostMimeType(offset int, limit int, PingStatus_ string, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and post_mime_type = ?", PingStatus_, PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPasswordAndCommentCount Get Postses via PingStatusAndPostPasswordAndCommentCount
func GetPostsesByPingStatusAndPostPasswordAndCommentCount(offset int, limit int, PingStatus_ string, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ? and comment_count = ?", PingStatus_, PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndToPing Get Postses via PingStatusAndPostNameAndToPing
func GetPostsesByPingStatusAndPostNameAndToPing(offset int, limit int, PingStatus_ string, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and to_ping = ?", PingStatus_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndPinged Get Postses via PingStatusAndPostNameAndPinged
func GetPostsesByPingStatusAndPostNameAndPinged(offset int, limit int, PingStatus_ string, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and pinged = ?", PingStatus_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndPostModified Get Postses via PingStatusAndPostNameAndPostModified
func GetPostsesByPingStatusAndPostNameAndPostModified(offset int, limit int, PingStatus_ string, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and post_modified = ?", PingStatus_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndPostModifiedGmt Get Postses via PingStatusAndPostNameAndPostModifiedGmt
func GetPostsesByPingStatusAndPostNameAndPostModifiedGmt(offset int, limit int, PingStatus_ string, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and post_modified_gmt = ?", PingStatus_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndPostContentFiltered Get Postses via PingStatusAndPostNameAndPostContentFiltered
func GetPostsesByPingStatusAndPostNameAndPostContentFiltered(offset int, limit int, PingStatus_ string, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and post_content_filtered = ?", PingStatus_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndPostParent Get Postses via PingStatusAndPostNameAndPostParent
func GetPostsesByPingStatusAndPostNameAndPostParent(offset int, limit int, PingStatus_ string, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and post_parent = ?", PingStatus_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndGuid Get Postses via PingStatusAndPostNameAndGuid
func GetPostsesByPingStatusAndPostNameAndGuid(offset int, limit int, PingStatus_ string, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and guid = ?", PingStatus_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndMenuOrder Get Postses via PingStatusAndPostNameAndMenuOrder
func GetPostsesByPingStatusAndPostNameAndMenuOrder(offset int, limit int, PingStatus_ string, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and menu_order = ?", PingStatus_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndPostType Get Postses via PingStatusAndPostNameAndPostType
func GetPostsesByPingStatusAndPostNameAndPostType(offset int, limit int, PingStatus_ string, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and post_type = ?", PingStatus_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndPostMimeType Get Postses via PingStatusAndPostNameAndPostMimeType
func GetPostsesByPingStatusAndPostNameAndPostMimeType(offset int, limit int, PingStatus_ string, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and post_mime_type = ?", PingStatus_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostNameAndCommentCount Get Postses via PingStatusAndPostNameAndCommentCount
func GetPostsesByPingStatusAndPostNameAndCommentCount(offset int, limit int, PingStatus_ string, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ? and comment_count = ?", PingStatus_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPingAndPinged Get Postses via PingStatusAndToPingAndPinged
func GetPostsesByPingStatusAndToPingAndPinged(offset int, limit int, PingStatus_ string, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ? and pinged = ?", PingStatus_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPingAndPostModified Get Postses via PingStatusAndToPingAndPostModified
func GetPostsesByPingStatusAndToPingAndPostModified(offset int, limit int, PingStatus_ string, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ? and post_modified = ?", PingStatus_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPingAndPostModifiedGmt Get Postses via PingStatusAndToPingAndPostModifiedGmt
func GetPostsesByPingStatusAndToPingAndPostModifiedGmt(offset int, limit int, PingStatus_ string, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ? and post_modified_gmt = ?", PingStatus_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPingAndPostContentFiltered Get Postses via PingStatusAndToPingAndPostContentFiltered
func GetPostsesByPingStatusAndToPingAndPostContentFiltered(offset int, limit int, PingStatus_ string, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ? and post_content_filtered = ?", PingStatus_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPingAndPostParent Get Postses via PingStatusAndToPingAndPostParent
func GetPostsesByPingStatusAndToPingAndPostParent(offset int, limit int, PingStatus_ string, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ? and post_parent = ?", PingStatus_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPingAndGuid Get Postses via PingStatusAndToPingAndGuid
func GetPostsesByPingStatusAndToPingAndGuid(offset int, limit int, PingStatus_ string, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ? and guid = ?", PingStatus_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPingAndMenuOrder Get Postses via PingStatusAndToPingAndMenuOrder
func GetPostsesByPingStatusAndToPingAndMenuOrder(offset int, limit int, PingStatus_ string, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ? and menu_order = ?", PingStatus_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPingAndPostType Get Postses via PingStatusAndToPingAndPostType
func GetPostsesByPingStatusAndToPingAndPostType(offset int, limit int, PingStatus_ string, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ? and post_type = ?", PingStatus_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPingAndPostMimeType Get Postses via PingStatusAndToPingAndPostMimeType
func GetPostsesByPingStatusAndToPingAndPostMimeType(offset int, limit int, PingStatus_ string, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ? and post_mime_type = ?", PingStatus_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPingAndCommentCount Get Postses via PingStatusAndToPingAndCommentCount
func GetPostsesByPingStatusAndToPingAndCommentCount(offset int, limit int, PingStatus_ string, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ? and comment_count = ?", PingStatus_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPingedAndPostModified Get Postses via PingStatusAndPingedAndPostModified
func GetPostsesByPingStatusAndPingedAndPostModified(offset int, limit int, PingStatus_ string, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and pinged = ? and post_modified = ?", PingStatus_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPingedAndPostModifiedGmt Get Postses via PingStatusAndPingedAndPostModifiedGmt
func GetPostsesByPingStatusAndPingedAndPostModifiedGmt(offset int, limit int, PingStatus_ string, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and pinged = ? and post_modified_gmt = ?", PingStatus_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPingedAndPostContentFiltered Get Postses via PingStatusAndPingedAndPostContentFiltered
func GetPostsesByPingStatusAndPingedAndPostContentFiltered(offset int, limit int, PingStatus_ string, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and pinged = ? and post_content_filtered = ?", PingStatus_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPingedAndPostParent Get Postses via PingStatusAndPingedAndPostParent
func GetPostsesByPingStatusAndPingedAndPostParent(offset int, limit int, PingStatus_ string, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and pinged = ? and post_parent = ?", PingStatus_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPingedAndGuid Get Postses via PingStatusAndPingedAndGuid
func GetPostsesByPingStatusAndPingedAndGuid(offset int, limit int, PingStatus_ string, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and pinged = ? and guid = ?", PingStatus_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPingedAndMenuOrder Get Postses via PingStatusAndPingedAndMenuOrder
func GetPostsesByPingStatusAndPingedAndMenuOrder(offset int, limit int, PingStatus_ string, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and pinged = ? and menu_order = ?", PingStatus_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPingedAndPostType Get Postses via PingStatusAndPingedAndPostType
func GetPostsesByPingStatusAndPingedAndPostType(offset int, limit int, PingStatus_ string, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and pinged = ? and post_type = ?", PingStatus_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPingedAndPostMimeType Get Postses via PingStatusAndPingedAndPostMimeType
func GetPostsesByPingStatusAndPingedAndPostMimeType(offset int, limit int, PingStatus_ string, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and pinged = ? and post_mime_type = ?", PingStatus_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPingedAndCommentCount Get Postses via PingStatusAndPingedAndCommentCount
func GetPostsesByPingStatusAndPingedAndCommentCount(offset int, limit int, PingStatus_ string, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and pinged = ? and comment_count = ?", PingStatus_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedAndPostModifiedGmt Get Postses via PingStatusAndPostModifiedAndPostModifiedGmt
func GetPostsesByPingStatusAndPostModifiedAndPostModifiedGmt(offset int, limit int, PingStatus_ string, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified = ? and post_modified_gmt = ?", PingStatus_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedAndPostContentFiltered Get Postses via PingStatusAndPostModifiedAndPostContentFiltered
func GetPostsesByPingStatusAndPostModifiedAndPostContentFiltered(offset int, limit int, PingStatus_ string, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified = ? and post_content_filtered = ?", PingStatus_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedAndPostParent Get Postses via PingStatusAndPostModifiedAndPostParent
func GetPostsesByPingStatusAndPostModifiedAndPostParent(offset int, limit int, PingStatus_ string, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified = ? and post_parent = ?", PingStatus_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedAndGuid Get Postses via PingStatusAndPostModifiedAndGuid
func GetPostsesByPingStatusAndPostModifiedAndGuid(offset int, limit int, PingStatus_ string, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified = ? and guid = ?", PingStatus_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedAndMenuOrder Get Postses via PingStatusAndPostModifiedAndMenuOrder
func GetPostsesByPingStatusAndPostModifiedAndMenuOrder(offset int, limit int, PingStatus_ string, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified = ? and menu_order = ?", PingStatus_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedAndPostType Get Postses via PingStatusAndPostModifiedAndPostType
func GetPostsesByPingStatusAndPostModifiedAndPostType(offset int, limit int, PingStatus_ string, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified = ? and post_type = ?", PingStatus_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedAndPostMimeType Get Postses via PingStatusAndPostModifiedAndPostMimeType
func GetPostsesByPingStatusAndPostModifiedAndPostMimeType(offset int, limit int, PingStatus_ string, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified = ? and post_mime_type = ?", PingStatus_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedAndCommentCount Get Postses via PingStatusAndPostModifiedAndCommentCount
func GetPostsesByPingStatusAndPostModifiedAndCommentCount(offset int, limit int, PingStatus_ string, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified = ? and comment_count = ?", PingStatus_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedGmtAndPostContentFiltered Get Postses via PingStatusAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPingStatusAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PingStatus_ string, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified_gmt = ? and post_content_filtered = ?", PingStatus_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedGmtAndPostParent Get Postses via PingStatusAndPostModifiedGmtAndPostParent
func GetPostsesByPingStatusAndPostModifiedGmtAndPostParent(offset int, limit int, PingStatus_ string, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified_gmt = ? and post_parent = ?", PingStatus_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedGmtAndGuid Get Postses via PingStatusAndPostModifiedGmtAndGuid
func GetPostsesByPingStatusAndPostModifiedGmtAndGuid(offset int, limit int, PingStatus_ string, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified_gmt = ? and guid = ?", PingStatus_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedGmtAndMenuOrder Get Postses via PingStatusAndPostModifiedGmtAndMenuOrder
func GetPostsesByPingStatusAndPostModifiedGmtAndMenuOrder(offset int, limit int, PingStatus_ string, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified_gmt = ? and menu_order = ?", PingStatus_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedGmtAndPostType Get Postses via PingStatusAndPostModifiedGmtAndPostType
func GetPostsesByPingStatusAndPostModifiedGmtAndPostType(offset int, limit int, PingStatus_ string, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified_gmt = ? and post_type = ?", PingStatus_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedGmtAndPostMimeType Get Postses via PingStatusAndPostModifiedGmtAndPostMimeType
func GetPostsesByPingStatusAndPostModifiedGmtAndPostMimeType(offset int, limit int, PingStatus_ string, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified_gmt = ? and post_mime_type = ?", PingStatus_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedGmtAndCommentCount Get Postses via PingStatusAndPostModifiedGmtAndCommentCount
func GetPostsesByPingStatusAndPostModifiedGmtAndCommentCount(offset int, limit int, PingStatus_ string, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified_gmt = ? and comment_count = ?", PingStatus_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostContentFilteredAndPostParent Get Postses via PingStatusAndPostContentFilteredAndPostParent
func GetPostsesByPingStatusAndPostContentFilteredAndPostParent(offset int, limit int, PingStatus_ string, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_content_filtered = ? and post_parent = ?", PingStatus_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostContentFilteredAndGuid Get Postses via PingStatusAndPostContentFilteredAndGuid
func GetPostsesByPingStatusAndPostContentFilteredAndGuid(offset int, limit int, PingStatus_ string, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_content_filtered = ? and guid = ?", PingStatus_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostContentFilteredAndMenuOrder Get Postses via PingStatusAndPostContentFilteredAndMenuOrder
func GetPostsesByPingStatusAndPostContentFilteredAndMenuOrder(offset int, limit int, PingStatus_ string, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_content_filtered = ? and menu_order = ?", PingStatus_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostContentFilteredAndPostType Get Postses via PingStatusAndPostContentFilteredAndPostType
func GetPostsesByPingStatusAndPostContentFilteredAndPostType(offset int, limit int, PingStatus_ string, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_content_filtered = ? and post_type = ?", PingStatus_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostContentFilteredAndPostMimeType Get Postses via PingStatusAndPostContentFilteredAndPostMimeType
func GetPostsesByPingStatusAndPostContentFilteredAndPostMimeType(offset int, limit int, PingStatus_ string, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_content_filtered = ? and post_mime_type = ?", PingStatus_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostContentFilteredAndCommentCount Get Postses via PingStatusAndPostContentFilteredAndCommentCount
func GetPostsesByPingStatusAndPostContentFilteredAndCommentCount(offset int, limit int, PingStatus_ string, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_content_filtered = ? and comment_count = ?", PingStatus_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostParentAndGuid Get Postses via PingStatusAndPostParentAndGuid
func GetPostsesByPingStatusAndPostParentAndGuid(offset int, limit int, PingStatus_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_parent = ? and guid = ?", PingStatus_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostParentAndMenuOrder Get Postses via PingStatusAndPostParentAndMenuOrder
func GetPostsesByPingStatusAndPostParentAndMenuOrder(offset int, limit int, PingStatus_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_parent = ? and menu_order = ?", PingStatus_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostParentAndPostType Get Postses via PingStatusAndPostParentAndPostType
func GetPostsesByPingStatusAndPostParentAndPostType(offset int, limit int, PingStatus_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_parent = ? and post_type = ?", PingStatus_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostParentAndPostMimeType Get Postses via PingStatusAndPostParentAndPostMimeType
func GetPostsesByPingStatusAndPostParentAndPostMimeType(offset int, limit int, PingStatus_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_parent = ? and post_mime_type = ?", PingStatus_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostParentAndCommentCount Get Postses via PingStatusAndPostParentAndCommentCount
func GetPostsesByPingStatusAndPostParentAndCommentCount(offset int, limit int, PingStatus_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_parent = ? and comment_count = ?", PingStatus_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndGuidAndMenuOrder Get Postses via PingStatusAndGuidAndMenuOrder
func GetPostsesByPingStatusAndGuidAndMenuOrder(offset int, limit int, PingStatus_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and guid = ? and menu_order = ?", PingStatus_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndGuidAndPostType Get Postses via PingStatusAndGuidAndPostType
func GetPostsesByPingStatusAndGuidAndPostType(offset int, limit int, PingStatus_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and guid = ? and post_type = ?", PingStatus_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndGuidAndPostMimeType Get Postses via PingStatusAndGuidAndPostMimeType
func GetPostsesByPingStatusAndGuidAndPostMimeType(offset int, limit int, PingStatus_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and guid = ? and post_mime_type = ?", PingStatus_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndGuidAndCommentCount Get Postses via PingStatusAndGuidAndCommentCount
func GetPostsesByPingStatusAndGuidAndCommentCount(offset int, limit int, PingStatus_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and guid = ? and comment_count = ?", PingStatus_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndMenuOrderAndPostType Get Postses via PingStatusAndMenuOrderAndPostType
func GetPostsesByPingStatusAndMenuOrderAndPostType(offset int, limit int, PingStatus_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and menu_order = ? and post_type = ?", PingStatus_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndMenuOrderAndPostMimeType Get Postses via PingStatusAndMenuOrderAndPostMimeType
func GetPostsesByPingStatusAndMenuOrderAndPostMimeType(offset int, limit int, PingStatus_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and menu_order = ? and post_mime_type = ?", PingStatus_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndMenuOrderAndCommentCount Get Postses via PingStatusAndMenuOrderAndCommentCount
func GetPostsesByPingStatusAndMenuOrderAndCommentCount(offset int, limit int, PingStatus_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and menu_order = ? and comment_count = ?", PingStatus_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostTypeAndPostMimeType Get Postses via PingStatusAndPostTypeAndPostMimeType
func GetPostsesByPingStatusAndPostTypeAndPostMimeType(offset int, limit int, PingStatus_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_type = ? and post_mime_type = ?", PingStatus_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostTypeAndCommentCount Get Postses via PingStatusAndPostTypeAndCommentCount
func GetPostsesByPingStatusAndPostTypeAndCommentCount(offset int, limit int, PingStatus_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_type = ? and comment_count = ?", PingStatus_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostMimeTypeAndCommentCount Get Postses via PingStatusAndPostMimeTypeAndCommentCount
func GetPostsesByPingStatusAndPostMimeTypeAndCommentCount(offset int, limit int, PingStatus_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_mime_type = ? and comment_count = ?", PingStatus_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndToPing Get Postses via PostPasswordAndPostNameAndToPing
func GetPostsesByPostPasswordAndPostNameAndToPing(offset int, limit int, PostPassword_ string, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and to_ping = ?", PostPassword_, PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndPinged Get Postses via PostPasswordAndPostNameAndPinged
func GetPostsesByPostPasswordAndPostNameAndPinged(offset int, limit int, PostPassword_ string, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and pinged = ?", PostPassword_, PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndPostModified Get Postses via PostPasswordAndPostNameAndPostModified
func GetPostsesByPostPasswordAndPostNameAndPostModified(offset int, limit int, PostPassword_ string, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and post_modified = ?", PostPassword_, PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndPostModifiedGmt Get Postses via PostPasswordAndPostNameAndPostModifiedGmt
func GetPostsesByPostPasswordAndPostNameAndPostModifiedGmt(offset int, limit int, PostPassword_ string, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and post_modified_gmt = ?", PostPassword_, PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndPostContentFiltered Get Postses via PostPasswordAndPostNameAndPostContentFiltered
func GetPostsesByPostPasswordAndPostNameAndPostContentFiltered(offset int, limit int, PostPassword_ string, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and post_content_filtered = ?", PostPassword_, PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndPostParent Get Postses via PostPasswordAndPostNameAndPostParent
func GetPostsesByPostPasswordAndPostNameAndPostParent(offset int, limit int, PostPassword_ string, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and post_parent = ?", PostPassword_, PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndGuid Get Postses via PostPasswordAndPostNameAndGuid
func GetPostsesByPostPasswordAndPostNameAndGuid(offset int, limit int, PostPassword_ string, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and guid = ?", PostPassword_, PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndMenuOrder Get Postses via PostPasswordAndPostNameAndMenuOrder
func GetPostsesByPostPasswordAndPostNameAndMenuOrder(offset int, limit int, PostPassword_ string, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and menu_order = ?", PostPassword_, PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndPostType Get Postses via PostPasswordAndPostNameAndPostType
func GetPostsesByPostPasswordAndPostNameAndPostType(offset int, limit int, PostPassword_ string, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and post_type = ?", PostPassword_, PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndPostMimeType Get Postses via PostPasswordAndPostNameAndPostMimeType
func GetPostsesByPostPasswordAndPostNameAndPostMimeType(offset int, limit int, PostPassword_ string, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and post_mime_type = ?", PostPassword_, PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostNameAndCommentCount Get Postses via PostPasswordAndPostNameAndCommentCount
func GetPostsesByPostPasswordAndPostNameAndCommentCount(offset int, limit int, PostPassword_ string, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ? and comment_count = ?", PostPassword_, PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPingAndPinged Get Postses via PostPasswordAndToPingAndPinged
func GetPostsesByPostPasswordAndToPingAndPinged(offset int, limit int, PostPassword_ string, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ? and pinged = ?", PostPassword_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPingAndPostModified Get Postses via PostPasswordAndToPingAndPostModified
func GetPostsesByPostPasswordAndToPingAndPostModified(offset int, limit int, PostPassword_ string, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ? and post_modified = ?", PostPassword_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPingAndPostModifiedGmt Get Postses via PostPasswordAndToPingAndPostModifiedGmt
func GetPostsesByPostPasswordAndToPingAndPostModifiedGmt(offset int, limit int, PostPassword_ string, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ? and post_modified_gmt = ?", PostPassword_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPingAndPostContentFiltered Get Postses via PostPasswordAndToPingAndPostContentFiltered
func GetPostsesByPostPasswordAndToPingAndPostContentFiltered(offset int, limit int, PostPassword_ string, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ? and post_content_filtered = ?", PostPassword_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPingAndPostParent Get Postses via PostPasswordAndToPingAndPostParent
func GetPostsesByPostPasswordAndToPingAndPostParent(offset int, limit int, PostPassword_ string, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ? and post_parent = ?", PostPassword_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPingAndGuid Get Postses via PostPasswordAndToPingAndGuid
func GetPostsesByPostPasswordAndToPingAndGuid(offset int, limit int, PostPassword_ string, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ? and guid = ?", PostPassword_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPingAndMenuOrder Get Postses via PostPasswordAndToPingAndMenuOrder
func GetPostsesByPostPasswordAndToPingAndMenuOrder(offset int, limit int, PostPassword_ string, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ? and menu_order = ?", PostPassword_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPingAndPostType Get Postses via PostPasswordAndToPingAndPostType
func GetPostsesByPostPasswordAndToPingAndPostType(offset int, limit int, PostPassword_ string, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ? and post_type = ?", PostPassword_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPingAndPostMimeType Get Postses via PostPasswordAndToPingAndPostMimeType
func GetPostsesByPostPasswordAndToPingAndPostMimeType(offset int, limit int, PostPassword_ string, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ? and post_mime_type = ?", PostPassword_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPingAndCommentCount Get Postses via PostPasswordAndToPingAndCommentCount
func GetPostsesByPostPasswordAndToPingAndCommentCount(offset int, limit int, PostPassword_ string, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ? and comment_count = ?", PostPassword_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPingedAndPostModified Get Postses via PostPasswordAndPingedAndPostModified
func GetPostsesByPostPasswordAndPingedAndPostModified(offset int, limit int, PostPassword_ string, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and pinged = ? and post_modified = ?", PostPassword_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPingedAndPostModifiedGmt Get Postses via PostPasswordAndPingedAndPostModifiedGmt
func GetPostsesByPostPasswordAndPingedAndPostModifiedGmt(offset int, limit int, PostPassword_ string, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and pinged = ? and post_modified_gmt = ?", PostPassword_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPingedAndPostContentFiltered Get Postses via PostPasswordAndPingedAndPostContentFiltered
func GetPostsesByPostPasswordAndPingedAndPostContentFiltered(offset int, limit int, PostPassword_ string, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and pinged = ? and post_content_filtered = ?", PostPassword_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPingedAndPostParent Get Postses via PostPasswordAndPingedAndPostParent
func GetPostsesByPostPasswordAndPingedAndPostParent(offset int, limit int, PostPassword_ string, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and pinged = ? and post_parent = ?", PostPassword_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPingedAndGuid Get Postses via PostPasswordAndPingedAndGuid
func GetPostsesByPostPasswordAndPingedAndGuid(offset int, limit int, PostPassword_ string, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and pinged = ? and guid = ?", PostPassword_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPingedAndMenuOrder Get Postses via PostPasswordAndPingedAndMenuOrder
func GetPostsesByPostPasswordAndPingedAndMenuOrder(offset int, limit int, PostPassword_ string, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and pinged = ? and menu_order = ?", PostPassword_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPingedAndPostType Get Postses via PostPasswordAndPingedAndPostType
func GetPostsesByPostPasswordAndPingedAndPostType(offset int, limit int, PostPassword_ string, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and pinged = ? and post_type = ?", PostPassword_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPingedAndPostMimeType Get Postses via PostPasswordAndPingedAndPostMimeType
func GetPostsesByPostPasswordAndPingedAndPostMimeType(offset int, limit int, PostPassword_ string, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and pinged = ? and post_mime_type = ?", PostPassword_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPingedAndCommentCount Get Postses via PostPasswordAndPingedAndCommentCount
func GetPostsesByPostPasswordAndPingedAndCommentCount(offset int, limit int, PostPassword_ string, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and pinged = ? and comment_count = ?", PostPassword_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedAndPostModifiedGmt Get Postses via PostPasswordAndPostModifiedAndPostModifiedGmt
func GetPostsesByPostPasswordAndPostModifiedAndPostModifiedGmt(offset int, limit int, PostPassword_ string, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified = ? and post_modified_gmt = ?", PostPassword_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedAndPostContentFiltered Get Postses via PostPasswordAndPostModifiedAndPostContentFiltered
func GetPostsesByPostPasswordAndPostModifiedAndPostContentFiltered(offset int, limit int, PostPassword_ string, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified = ? and post_content_filtered = ?", PostPassword_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedAndPostParent Get Postses via PostPasswordAndPostModifiedAndPostParent
func GetPostsesByPostPasswordAndPostModifiedAndPostParent(offset int, limit int, PostPassword_ string, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified = ? and post_parent = ?", PostPassword_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedAndGuid Get Postses via PostPasswordAndPostModifiedAndGuid
func GetPostsesByPostPasswordAndPostModifiedAndGuid(offset int, limit int, PostPassword_ string, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified = ? and guid = ?", PostPassword_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedAndMenuOrder Get Postses via PostPasswordAndPostModifiedAndMenuOrder
func GetPostsesByPostPasswordAndPostModifiedAndMenuOrder(offset int, limit int, PostPassword_ string, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified = ? and menu_order = ?", PostPassword_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedAndPostType Get Postses via PostPasswordAndPostModifiedAndPostType
func GetPostsesByPostPasswordAndPostModifiedAndPostType(offset int, limit int, PostPassword_ string, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified = ? and post_type = ?", PostPassword_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedAndPostMimeType Get Postses via PostPasswordAndPostModifiedAndPostMimeType
func GetPostsesByPostPasswordAndPostModifiedAndPostMimeType(offset int, limit int, PostPassword_ string, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified = ? and post_mime_type = ?", PostPassword_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedAndCommentCount Get Postses via PostPasswordAndPostModifiedAndCommentCount
func GetPostsesByPostPasswordAndPostModifiedAndCommentCount(offset int, limit int, PostPassword_ string, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified = ? and comment_count = ?", PostPassword_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedGmtAndPostContentFiltered Get Postses via PostPasswordAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPostPasswordAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostPassword_ string, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified_gmt = ? and post_content_filtered = ?", PostPassword_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedGmtAndPostParent Get Postses via PostPasswordAndPostModifiedGmtAndPostParent
func GetPostsesByPostPasswordAndPostModifiedGmtAndPostParent(offset int, limit int, PostPassword_ string, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified_gmt = ? and post_parent = ?", PostPassword_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedGmtAndGuid Get Postses via PostPasswordAndPostModifiedGmtAndGuid
func GetPostsesByPostPasswordAndPostModifiedGmtAndGuid(offset int, limit int, PostPassword_ string, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified_gmt = ? and guid = ?", PostPassword_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedGmtAndMenuOrder Get Postses via PostPasswordAndPostModifiedGmtAndMenuOrder
func GetPostsesByPostPasswordAndPostModifiedGmtAndMenuOrder(offset int, limit int, PostPassword_ string, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified_gmt = ? and menu_order = ?", PostPassword_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedGmtAndPostType Get Postses via PostPasswordAndPostModifiedGmtAndPostType
func GetPostsesByPostPasswordAndPostModifiedGmtAndPostType(offset int, limit int, PostPassword_ string, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified_gmt = ? and post_type = ?", PostPassword_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedGmtAndPostMimeType Get Postses via PostPasswordAndPostModifiedGmtAndPostMimeType
func GetPostsesByPostPasswordAndPostModifiedGmtAndPostMimeType(offset int, limit int, PostPassword_ string, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified_gmt = ? and post_mime_type = ?", PostPassword_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedGmtAndCommentCount Get Postses via PostPasswordAndPostModifiedGmtAndCommentCount
func GetPostsesByPostPasswordAndPostModifiedGmtAndCommentCount(offset int, limit int, PostPassword_ string, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified_gmt = ? and comment_count = ?", PostPassword_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostContentFilteredAndPostParent Get Postses via PostPasswordAndPostContentFilteredAndPostParent
func GetPostsesByPostPasswordAndPostContentFilteredAndPostParent(offset int, limit int, PostPassword_ string, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_content_filtered = ? and post_parent = ?", PostPassword_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostContentFilteredAndGuid Get Postses via PostPasswordAndPostContentFilteredAndGuid
func GetPostsesByPostPasswordAndPostContentFilteredAndGuid(offset int, limit int, PostPassword_ string, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_content_filtered = ? and guid = ?", PostPassword_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostContentFilteredAndMenuOrder Get Postses via PostPasswordAndPostContentFilteredAndMenuOrder
func GetPostsesByPostPasswordAndPostContentFilteredAndMenuOrder(offset int, limit int, PostPassword_ string, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_content_filtered = ? and menu_order = ?", PostPassword_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostContentFilteredAndPostType Get Postses via PostPasswordAndPostContentFilteredAndPostType
func GetPostsesByPostPasswordAndPostContentFilteredAndPostType(offset int, limit int, PostPassword_ string, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_content_filtered = ? and post_type = ?", PostPassword_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostContentFilteredAndPostMimeType Get Postses via PostPasswordAndPostContentFilteredAndPostMimeType
func GetPostsesByPostPasswordAndPostContentFilteredAndPostMimeType(offset int, limit int, PostPassword_ string, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_content_filtered = ? and post_mime_type = ?", PostPassword_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostContentFilteredAndCommentCount Get Postses via PostPasswordAndPostContentFilteredAndCommentCount
func GetPostsesByPostPasswordAndPostContentFilteredAndCommentCount(offset int, limit int, PostPassword_ string, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_content_filtered = ? and comment_count = ?", PostPassword_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostParentAndGuid Get Postses via PostPasswordAndPostParentAndGuid
func GetPostsesByPostPasswordAndPostParentAndGuid(offset int, limit int, PostPassword_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_parent = ? and guid = ?", PostPassword_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostParentAndMenuOrder Get Postses via PostPasswordAndPostParentAndMenuOrder
func GetPostsesByPostPasswordAndPostParentAndMenuOrder(offset int, limit int, PostPassword_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_parent = ? and menu_order = ?", PostPassword_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostParentAndPostType Get Postses via PostPasswordAndPostParentAndPostType
func GetPostsesByPostPasswordAndPostParentAndPostType(offset int, limit int, PostPassword_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_parent = ? and post_type = ?", PostPassword_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostParentAndPostMimeType Get Postses via PostPasswordAndPostParentAndPostMimeType
func GetPostsesByPostPasswordAndPostParentAndPostMimeType(offset int, limit int, PostPassword_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_parent = ? and post_mime_type = ?", PostPassword_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostParentAndCommentCount Get Postses via PostPasswordAndPostParentAndCommentCount
func GetPostsesByPostPasswordAndPostParentAndCommentCount(offset int, limit int, PostPassword_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_parent = ? and comment_count = ?", PostPassword_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndGuidAndMenuOrder Get Postses via PostPasswordAndGuidAndMenuOrder
func GetPostsesByPostPasswordAndGuidAndMenuOrder(offset int, limit int, PostPassword_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and guid = ? and menu_order = ?", PostPassword_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndGuidAndPostType Get Postses via PostPasswordAndGuidAndPostType
func GetPostsesByPostPasswordAndGuidAndPostType(offset int, limit int, PostPassword_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and guid = ? and post_type = ?", PostPassword_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndGuidAndPostMimeType Get Postses via PostPasswordAndGuidAndPostMimeType
func GetPostsesByPostPasswordAndGuidAndPostMimeType(offset int, limit int, PostPassword_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and guid = ? and post_mime_type = ?", PostPassword_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndGuidAndCommentCount Get Postses via PostPasswordAndGuidAndCommentCount
func GetPostsesByPostPasswordAndGuidAndCommentCount(offset int, limit int, PostPassword_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and guid = ? and comment_count = ?", PostPassword_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndMenuOrderAndPostType Get Postses via PostPasswordAndMenuOrderAndPostType
func GetPostsesByPostPasswordAndMenuOrderAndPostType(offset int, limit int, PostPassword_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and menu_order = ? and post_type = ?", PostPassword_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndMenuOrderAndPostMimeType Get Postses via PostPasswordAndMenuOrderAndPostMimeType
func GetPostsesByPostPasswordAndMenuOrderAndPostMimeType(offset int, limit int, PostPassword_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and menu_order = ? and post_mime_type = ?", PostPassword_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndMenuOrderAndCommentCount Get Postses via PostPasswordAndMenuOrderAndCommentCount
func GetPostsesByPostPasswordAndMenuOrderAndCommentCount(offset int, limit int, PostPassword_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and menu_order = ? and comment_count = ?", PostPassword_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostTypeAndPostMimeType Get Postses via PostPasswordAndPostTypeAndPostMimeType
func GetPostsesByPostPasswordAndPostTypeAndPostMimeType(offset int, limit int, PostPassword_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_type = ? and post_mime_type = ?", PostPassword_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostTypeAndCommentCount Get Postses via PostPasswordAndPostTypeAndCommentCount
func GetPostsesByPostPasswordAndPostTypeAndCommentCount(offset int, limit int, PostPassword_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_type = ? and comment_count = ?", PostPassword_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostMimeTypeAndCommentCount Get Postses via PostPasswordAndPostMimeTypeAndCommentCount
func GetPostsesByPostPasswordAndPostMimeTypeAndCommentCount(offset int, limit int, PostPassword_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_mime_type = ? and comment_count = ?", PostPassword_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPingAndPinged Get Postses via PostNameAndToPingAndPinged
func GetPostsesByPostNameAndToPingAndPinged(offset int, limit int, PostName_ string, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ? and pinged = ?", PostName_, ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPingAndPostModified Get Postses via PostNameAndToPingAndPostModified
func GetPostsesByPostNameAndToPingAndPostModified(offset int, limit int, PostName_ string, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ? and post_modified = ?", PostName_, ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPingAndPostModifiedGmt Get Postses via PostNameAndToPingAndPostModifiedGmt
func GetPostsesByPostNameAndToPingAndPostModifiedGmt(offset int, limit int, PostName_ string, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ? and post_modified_gmt = ?", PostName_, ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPingAndPostContentFiltered Get Postses via PostNameAndToPingAndPostContentFiltered
func GetPostsesByPostNameAndToPingAndPostContentFiltered(offset int, limit int, PostName_ string, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ? and post_content_filtered = ?", PostName_, ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPingAndPostParent Get Postses via PostNameAndToPingAndPostParent
func GetPostsesByPostNameAndToPingAndPostParent(offset int, limit int, PostName_ string, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ? and post_parent = ?", PostName_, ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPingAndGuid Get Postses via PostNameAndToPingAndGuid
func GetPostsesByPostNameAndToPingAndGuid(offset int, limit int, PostName_ string, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ? and guid = ?", PostName_, ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPingAndMenuOrder Get Postses via PostNameAndToPingAndMenuOrder
func GetPostsesByPostNameAndToPingAndMenuOrder(offset int, limit int, PostName_ string, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ? and menu_order = ?", PostName_, ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPingAndPostType Get Postses via PostNameAndToPingAndPostType
func GetPostsesByPostNameAndToPingAndPostType(offset int, limit int, PostName_ string, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ? and post_type = ?", PostName_, ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPingAndPostMimeType Get Postses via PostNameAndToPingAndPostMimeType
func GetPostsesByPostNameAndToPingAndPostMimeType(offset int, limit int, PostName_ string, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ? and post_mime_type = ?", PostName_, ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPingAndCommentCount Get Postses via PostNameAndToPingAndCommentCount
func GetPostsesByPostNameAndToPingAndCommentCount(offset int, limit int, PostName_ string, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ? and comment_count = ?", PostName_, ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPingedAndPostModified Get Postses via PostNameAndPingedAndPostModified
func GetPostsesByPostNameAndPingedAndPostModified(offset int, limit int, PostName_ string, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and pinged = ? and post_modified = ?", PostName_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPingedAndPostModifiedGmt Get Postses via PostNameAndPingedAndPostModifiedGmt
func GetPostsesByPostNameAndPingedAndPostModifiedGmt(offset int, limit int, PostName_ string, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and pinged = ? and post_modified_gmt = ?", PostName_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPingedAndPostContentFiltered Get Postses via PostNameAndPingedAndPostContentFiltered
func GetPostsesByPostNameAndPingedAndPostContentFiltered(offset int, limit int, PostName_ string, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and pinged = ? and post_content_filtered = ?", PostName_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPingedAndPostParent Get Postses via PostNameAndPingedAndPostParent
func GetPostsesByPostNameAndPingedAndPostParent(offset int, limit int, PostName_ string, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and pinged = ? and post_parent = ?", PostName_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPingedAndGuid Get Postses via PostNameAndPingedAndGuid
func GetPostsesByPostNameAndPingedAndGuid(offset int, limit int, PostName_ string, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and pinged = ? and guid = ?", PostName_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPingedAndMenuOrder Get Postses via PostNameAndPingedAndMenuOrder
func GetPostsesByPostNameAndPingedAndMenuOrder(offset int, limit int, PostName_ string, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and pinged = ? and menu_order = ?", PostName_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPingedAndPostType Get Postses via PostNameAndPingedAndPostType
func GetPostsesByPostNameAndPingedAndPostType(offset int, limit int, PostName_ string, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and pinged = ? and post_type = ?", PostName_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPingedAndPostMimeType Get Postses via PostNameAndPingedAndPostMimeType
func GetPostsesByPostNameAndPingedAndPostMimeType(offset int, limit int, PostName_ string, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and pinged = ? and post_mime_type = ?", PostName_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPingedAndCommentCount Get Postses via PostNameAndPingedAndCommentCount
func GetPostsesByPostNameAndPingedAndCommentCount(offset int, limit int, PostName_ string, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and pinged = ? and comment_count = ?", PostName_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedAndPostModifiedGmt Get Postses via PostNameAndPostModifiedAndPostModifiedGmt
func GetPostsesByPostNameAndPostModifiedAndPostModifiedGmt(offset int, limit int, PostName_ string, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified = ? and post_modified_gmt = ?", PostName_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedAndPostContentFiltered Get Postses via PostNameAndPostModifiedAndPostContentFiltered
func GetPostsesByPostNameAndPostModifiedAndPostContentFiltered(offset int, limit int, PostName_ string, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified = ? and post_content_filtered = ?", PostName_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedAndPostParent Get Postses via PostNameAndPostModifiedAndPostParent
func GetPostsesByPostNameAndPostModifiedAndPostParent(offset int, limit int, PostName_ string, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified = ? and post_parent = ?", PostName_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedAndGuid Get Postses via PostNameAndPostModifiedAndGuid
func GetPostsesByPostNameAndPostModifiedAndGuid(offset int, limit int, PostName_ string, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified = ? and guid = ?", PostName_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedAndMenuOrder Get Postses via PostNameAndPostModifiedAndMenuOrder
func GetPostsesByPostNameAndPostModifiedAndMenuOrder(offset int, limit int, PostName_ string, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified = ? and menu_order = ?", PostName_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedAndPostType Get Postses via PostNameAndPostModifiedAndPostType
func GetPostsesByPostNameAndPostModifiedAndPostType(offset int, limit int, PostName_ string, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified = ? and post_type = ?", PostName_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedAndPostMimeType Get Postses via PostNameAndPostModifiedAndPostMimeType
func GetPostsesByPostNameAndPostModifiedAndPostMimeType(offset int, limit int, PostName_ string, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified = ? and post_mime_type = ?", PostName_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedAndCommentCount Get Postses via PostNameAndPostModifiedAndCommentCount
func GetPostsesByPostNameAndPostModifiedAndCommentCount(offset int, limit int, PostName_ string, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified = ? and comment_count = ?", PostName_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedGmtAndPostContentFiltered Get Postses via PostNameAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPostNameAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostName_ string, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified_gmt = ? and post_content_filtered = ?", PostName_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedGmtAndPostParent Get Postses via PostNameAndPostModifiedGmtAndPostParent
func GetPostsesByPostNameAndPostModifiedGmtAndPostParent(offset int, limit int, PostName_ string, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified_gmt = ? and post_parent = ?", PostName_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedGmtAndGuid Get Postses via PostNameAndPostModifiedGmtAndGuid
func GetPostsesByPostNameAndPostModifiedGmtAndGuid(offset int, limit int, PostName_ string, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified_gmt = ? and guid = ?", PostName_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedGmtAndMenuOrder Get Postses via PostNameAndPostModifiedGmtAndMenuOrder
func GetPostsesByPostNameAndPostModifiedGmtAndMenuOrder(offset int, limit int, PostName_ string, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified_gmt = ? and menu_order = ?", PostName_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedGmtAndPostType Get Postses via PostNameAndPostModifiedGmtAndPostType
func GetPostsesByPostNameAndPostModifiedGmtAndPostType(offset int, limit int, PostName_ string, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified_gmt = ? and post_type = ?", PostName_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedGmtAndPostMimeType Get Postses via PostNameAndPostModifiedGmtAndPostMimeType
func GetPostsesByPostNameAndPostModifiedGmtAndPostMimeType(offset int, limit int, PostName_ string, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified_gmt = ? and post_mime_type = ?", PostName_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedGmtAndCommentCount Get Postses via PostNameAndPostModifiedGmtAndCommentCount
func GetPostsesByPostNameAndPostModifiedGmtAndCommentCount(offset int, limit int, PostName_ string, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified_gmt = ? and comment_count = ?", PostName_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostContentFilteredAndPostParent Get Postses via PostNameAndPostContentFilteredAndPostParent
func GetPostsesByPostNameAndPostContentFilteredAndPostParent(offset int, limit int, PostName_ string, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_content_filtered = ? and post_parent = ?", PostName_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostContentFilteredAndGuid Get Postses via PostNameAndPostContentFilteredAndGuid
func GetPostsesByPostNameAndPostContentFilteredAndGuid(offset int, limit int, PostName_ string, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_content_filtered = ? and guid = ?", PostName_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostContentFilteredAndMenuOrder Get Postses via PostNameAndPostContentFilteredAndMenuOrder
func GetPostsesByPostNameAndPostContentFilteredAndMenuOrder(offset int, limit int, PostName_ string, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_content_filtered = ? and menu_order = ?", PostName_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostContentFilteredAndPostType Get Postses via PostNameAndPostContentFilteredAndPostType
func GetPostsesByPostNameAndPostContentFilteredAndPostType(offset int, limit int, PostName_ string, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_content_filtered = ? and post_type = ?", PostName_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostContentFilteredAndPostMimeType Get Postses via PostNameAndPostContentFilteredAndPostMimeType
func GetPostsesByPostNameAndPostContentFilteredAndPostMimeType(offset int, limit int, PostName_ string, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_content_filtered = ? and post_mime_type = ?", PostName_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostContentFilteredAndCommentCount Get Postses via PostNameAndPostContentFilteredAndCommentCount
func GetPostsesByPostNameAndPostContentFilteredAndCommentCount(offset int, limit int, PostName_ string, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_content_filtered = ? and comment_count = ?", PostName_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostParentAndGuid Get Postses via PostNameAndPostParentAndGuid
func GetPostsesByPostNameAndPostParentAndGuid(offset int, limit int, PostName_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_parent = ? and guid = ?", PostName_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostParentAndMenuOrder Get Postses via PostNameAndPostParentAndMenuOrder
func GetPostsesByPostNameAndPostParentAndMenuOrder(offset int, limit int, PostName_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_parent = ? and menu_order = ?", PostName_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostParentAndPostType Get Postses via PostNameAndPostParentAndPostType
func GetPostsesByPostNameAndPostParentAndPostType(offset int, limit int, PostName_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_parent = ? and post_type = ?", PostName_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostParentAndPostMimeType Get Postses via PostNameAndPostParentAndPostMimeType
func GetPostsesByPostNameAndPostParentAndPostMimeType(offset int, limit int, PostName_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_parent = ? and post_mime_type = ?", PostName_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostParentAndCommentCount Get Postses via PostNameAndPostParentAndCommentCount
func GetPostsesByPostNameAndPostParentAndCommentCount(offset int, limit int, PostName_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_parent = ? and comment_count = ?", PostName_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndGuidAndMenuOrder Get Postses via PostNameAndGuidAndMenuOrder
func GetPostsesByPostNameAndGuidAndMenuOrder(offset int, limit int, PostName_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and guid = ? and menu_order = ?", PostName_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndGuidAndPostType Get Postses via PostNameAndGuidAndPostType
func GetPostsesByPostNameAndGuidAndPostType(offset int, limit int, PostName_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and guid = ? and post_type = ?", PostName_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndGuidAndPostMimeType Get Postses via PostNameAndGuidAndPostMimeType
func GetPostsesByPostNameAndGuidAndPostMimeType(offset int, limit int, PostName_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and guid = ? and post_mime_type = ?", PostName_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndGuidAndCommentCount Get Postses via PostNameAndGuidAndCommentCount
func GetPostsesByPostNameAndGuidAndCommentCount(offset int, limit int, PostName_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and guid = ? and comment_count = ?", PostName_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndMenuOrderAndPostType Get Postses via PostNameAndMenuOrderAndPostType
func GetPostsesByPostNameAndMenuOrderAndPostType(offset int, limit int, PostName_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and menu_order = ? and post_type = ?", PostName_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndMenuOrderAndPostMimeType Get Postses via PostNameAndMenuOrderAndPostMimeType
func GetPostsesByPostNameAndMenuOrderAndPostMimeType(offset int, limit int, PostName_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and menu_order = ? and post_mime_type = ?", PostName_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndMenuOrderAndCommentCount Get Postses via PostNameAndMenuOrderAndCommentCount
func GetPostsesByPostNameAndMenuOrderAndCommentCount(offset int, limit int, PostName_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and menu_order = ? and comment_count = ?", PostName_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostTypeAndPostMimeType Get Postses via PostNameAndPostTypeAndPostMimeType
func GetPostsesByPostNameAndPostTypeAndPostMimeType(offset int, limit int, PostName_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_type = ? and post_mime_type = ?", PostName_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostTypeAndCommentCount Get Postses via PostNameAndPostTypeAndCommentCount
func GetPostsesByPostNameAndPostTypeAndCommentCount(offset int, limit int, PostName_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_type = ? and comment_count = ?", PostName_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostMimeTypeAndCommentCount Get Postses via PostNameAndPostMimeTypeAndCommentCount
func GetPostsesByPostNameAndPostMimeTypeAndCommentCount(offset int, limit int, PostName_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_mime_type = ? and comment_count = ?", PostName_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPingedAndPostModified Get Postses via ToPingAndPingedAndPostModified
func GetPostsesByToPingAndPingedAndPostModified(offset int, limit int, ToPing_ string, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and pinged = ? and post_modified = ?", ToPing_, Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPingedAndPostModifiedGmt Get Postses via ToPingAndPingedAndPostModifiedGmt
func GetPostsesByToPingAndPingedAndPostModifiedGmt(offset int, limit int, ToPing_ string, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and pinged = ? and post_modified_gmt = ?", ToPing_, Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPingedAndPostContentFiltered Get Postses via ToPingAndPingedAndPostContentFiltered
func GetPostsesByToPingAndPingedAndPostContentFiltered(offset int, limit int, ToPing_ string, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and pinged = ? and post_content_filtered = ?", ToPing_, Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPingedAndPostParent Get Postses via ToPingAndPingedAndPostParent
func GetPostsesByToPingAndPingedAndPostParent(offset int, limit int, ToPing_ string, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and pinged = ? and post_parent = ?", ToPing_, Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPingedAndGuid Get Postses via ToPingAndPingedAndGuid
func GetPostsesByToPingAndPingedAndGuid(offset int, limit int, ToPing_ string, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and pinged = ? and guid = ?", ToPing_, Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPingedAndMenuOrder Get Postses via ToPingAndPingedAndMenuOrder
func GetPostsesByToPingAndPingedAndMenuOrder(offset int, limit int, ToPing_ string, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and pinged = ? and menu_order = ?", ToPing_, Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPingedAndPostType Get Postses via ToPingAndPingedAndPostType
func GetPostsesByToPingAndPingedAndPostType(offset int, limit int, ToPing_ string, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and pinged = ? and post_type = ?", ToPing_, Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPingedAndPostMimeType Get Postses via ToPingAndPingedAndPostMimeType
func GetPostsesByToPingAndPingedAndPostMimeType(offset int, limit int, ToPing_ string, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and pinged = ? and post_mime_type = ?", ToPing_, Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPingedAndCommentCount Get Postses via ToPingAndPingedAndCommentCount
func GetPostsesByToPingAndPingedAndCommentCount(offset int, limit int, ToPing_ string, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and pinged = ? and comment_count = ?", ToPing_, Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedAndPostModifiedGmt Get Postses via ToPingAndPostModifiedAndPostModifiedGmt
func GetPostsesByToPingAndPostModifiedAndPostModifiedGmt(offset int, limit int, ToPing_ string, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified = ? and post_modified_gmt = ?", ToPing_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedAndPostContentFiltered Get Postses via ToPingAndPostModifiedAndPostContentFiltered
func GetPostsesByToPingAndPostModifiedAndPostContentFiltered(offset int, limit int, ToPing_ string, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified = ? and post_content_filtered = ?", ToPing_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedAndPostParent Get Postses via ToPingAndPostModifiedAndPostParent
func GetPostsesByToPingAndPostModifiedAndPostParent(offset int, limit int, ToPing_ string, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified = ? and post_parent = ?", ToPing_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedAndGuid Get Postses via ToPingAndPostModifiedAndGuid
func GetPostsesByToPingAndPostModifiedAndGuid(offset int, limit int, ToPing_ string, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified = ? and guid = ?", ToPing_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedAndMenuOrder Get Postses via ToPingAndPostModifiedAndMenuOrder
func GetPostsesByToPingAndPostModifiedAndMenuOrder(offset int, limit int, ToPing_ string, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified = ? and menu_order = ?", ToPing_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedAndPostType Get Postses via ToPingAndPostModifiedAndPostType
func GetPostsesByToPingAndPostModifiedAndPostType(offset int, limit int, ToPing_ string, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified = ? and post_type = ?", ToPing_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedAndPostMimeType Get Postses via ToPingAndPostModifiedAndPostMimeType
func GetPostsesByToPingAndPostModifiedAndPostMimeType(offset int, limit int, ToPing_ string, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified = ? and post_mime_type = ?", ToPing_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedAndCommentCount Get Postses via ToPingAndPostModifiedAndCommentCount
func GetPostsesByToPingAndPostModifiedAndCommentCount(offset int, limit int, ToPing_ string, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified = ? and comment_count = ?", ToPing_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedGmtAndPostContentFiltered Get Postses via ToPingAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByToPingAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, ToPing_ string, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified_gmt = ? and post_content_filtered = ?", ToPing_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedGmtAndPostParent Get Postses via ToPingAndPostModifiedGmtAndPostParent
func GetPostsesByToPingAndPostModifiedGmtAndPostParent(offset int, limit int, ToPing_ string, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified_gmt = ? and post_parent = ?", ToPing_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedGmtAndGuid Get Postses via ToPingAndPostModifiedGmtAndGuid
func GetPostsesByToPingAndPostModifiedGmtAndGuid(offset int, limit int, ToPing_ string, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified_gmt = ? and guid = ?", ToPing_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedGmtAndMenuOrder Get Postses via ToPingAndPostModifiedGmtAndMenuOrder
func GetPostsesByToPingAndPostModifiedGmtAndMenuOrder(offset int, limit int, ToPing_ string, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified_gmt = ? and menu_order = ?", ToPing_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedGmtAndPostType Get Postses via ToPingAndPostModifiedGmtAndPostType
func GetPostsesByToPingAndPostModifiedGmtAndPostType(offset int, limit int, ToPing_ string, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified_gmt = ? and post_type = ?", ToPing_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedGmtAndPostMimeType Get Postses via ToPingAndPostModifiedGmtAndPostMimeType
func GetPostsesByToPingAndPostModifiedGmtAndPostMimeType(offset int, limit int, ToPing_ string, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified_gmt = ? and post_mime_type = ?", ToPing_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedGmtAndCommentCount Get Postses via ToPingAndPostModifiedGmtAndCommentCount
func GetPostsesByToPingAndPostModifiedGmtAndCommentCount(offset int, limit int, ToPing_ string, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified_gmt = ? and comment_count = ?", ToPing_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostContentFilteredAndPostParent Get Postses via ToPingAndPostContentFilteredAndPostParent
func GetPostsesByToPingAndPostContentFilteredAndPostParent(offset int, limit int, ToPing_ string, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_content_filtered = ? and post_parent = ?", ToPing_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostContentFilteredAndGuid Get Postses via ToPingAndPostContentFilteredAndGuid
func GetPostsesByToPingAndPostContentFilteredAndGuid(offset int, limit int, ToPing_ string, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_content_filtered = ? and guid = ?", ToPing_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostContentFilteredAndMenuOrder Get Postses via ToPingAndPostContentFilteredAndMenuOrder
func GetPostsesByToPingAndPostContentFilteredAndMenuOrder(offset int, limit int, ToPing_ string, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_content_filtered = ? and menu_order = ?", ToPing_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostContentFilteredAndPostType Get Postses via ToPingAndPostContentFilteredAndPostType
func GetPostsesByToPingAndPostContentFilteredAndPostType(offset int, limit int, ToPing_ string, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_content_filtered = ? and post_type = ?", ToPing_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostContentFilteredAndPostMimeType Get Postses via ToPingAndPostContentFilteredAndPostMimeType
func GetPostsesByToPingAndPostContentFilteredAndPostMimeType(offset int, limit int, ToPing_ string, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_content_filtered = ? and post_mime_type = ?", ToPing_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostContentFilteredAndCommentCount Get Postses via ToPingAndPostContentFilteredAndCommentCount
func GetPostsesByToPingAndPostContentFilteredAndCommentCount(offset int, limit int, ToPing_ string, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_content_filtered = ? and comment_count = ?", ToPing_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostParentAndGuid Get Postses via ToPingAndPostParentAndGuid
func GetPostsesByToPingAndPostParentAndGuid(offset int, limit int, ToPing_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_parent = ? and guid = ?", ToPing_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostParentAndMenuOrder Get Postses via ToPingAndPostParentAndMenuOrder
func GetPostsesByToPingAndPostParentAndMenuOrder(offset int, limit int, ToPing_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_parent = ? and menu_order = ?", ToPing_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostParentAndPostType Get Postses via ToPingAndPostParentAndPostType
func GetPostsesByToPingAndPostParentAndPostType(offset int, limit int, ToPing_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_parent = ? and post_type = ?", ToPing_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostParentAndPostMimeType Get Postses via ToPingAndPostParentAndPostMimeType
func GetPostsesByToPingAndPostParentAndPostMimeType(offset int, limit int, ToPing_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_parent = ? and post_mime_type = ?", ToPing_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostParentAndCommentCount Get Postses via ToPingAndPostParentAndCommentCount
func GetPostsesByToPingAndPostParentAndCommentCount(offset int, limit int, ToPing_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_parent = ? and comment_count = ?", ToPing_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndGuidAndMenuOrder Get Postses via ToPingAndGuidAndMenuOrder
func GetPostsesByToPingAndGuidAndMenuOrder(offset int, limit int, ToPing_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and guid = ? and menu_order = ?", ToPing_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndGuidAndPostType Get Postses via ToPingAndGuidAndPostType
func GetPostsesByToPingAndGuidAndPostType(offset int, limit int, ToPing_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and guid = ? and post_type = ?", ToPing_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndGuidAndPostMimeType Get Postses via ToPingAndGuidAndPostMimeType
func GetPostsesByToPingAndGuidAndPostMimeType(offset int, limit int, ToPing_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and guid = ? and post_mime_type = ?", ToPing_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndGuidAndCommentCount Get Postses via ToPingAndGuidAndCommentCount
func GetPostsesByToPingAndGuidAndCommentCount(offset int, limit int, ToPing_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and guid = ? and comment_count = ?", ToPing_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndMenuOrderAndPostType Get Postses via ToPingAndMenuOrderAndPostType
func GetPostsesByToPingAndMenuOrderAndPostType(offset int, limit int, ToPing_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and menu_order = ? and post_type = ?", ToPing_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndMenuOrderAndPostMimeType Get Postses via ToPingAndMenuOrderAndPostMimeType
func GetPostsesByToPingAndMenuOrderAndPostMimeType(offset int, limit int, ToPing_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and menu_order = ? and post_mime_type = ?", ToPing_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndMenuOrderAndCommentCount Get Postses via ToPingAndMenuOrderAndCommentCount
func GetPostsesByToPingAndMenuOrderAndCommentCount(offset int, limit int, ToPing_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and menu_order = ? and comment_count = ?", ToPing_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostTypeAndPostMimeType Get Postses via ToPingAndPostTypeAndPostMimeType
func GetPostsesByToPingAndPostTypeAndPostMimeType(offset int, limit int, ToPing_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_type = ? and post_mime_type = ?", ToPing_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostTypeAndCommentCount Get Postses via ToPingAndPostTypeAndCommentCount
func GetPostsesByToPingAndPostTypeAndCommentCount(offset int, limit int, ToPing_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_type = ? and comment_count = ?", ToPing_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostMimeTypeAndCommentCount Get Postses via ToPingAndPostMimeTypeAndCommentCount
func GetPostsesByToPingAndPostMimeTypeAndCommentCount(offset int, limit int, ToPing_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_mime_type = ? and comment_count = ?", ToPing_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedAndPostModifiedGmt Get Postses via PingedAndPostModifiedAndPostModifiedGmt
func GetPostsesByPingedAndPostModifiedAndPostModifiedGmt(offset int, limit int, Pinged_ string, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified = ? and post_modified_gmt = ?", Pinged_, PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedAndPostContentFiltered Get Postses via PingedAndPostModifiedAndPostContentFiltered
func GetPostsesByPingedAndPostModifiedAndPostContentFiltered(offset int, limit int, Pinged_ string, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified = ? and post_content_filtered = ?", Pinged_, PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedAndPostParent Get Postses via PingedAndPostModifiedAndPostParent
func GetPostsesByPingedAndPostModifiedAndPostParent(offset int, limit int, Pinged_ string, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified = ? and post_parent = ?", Pinged_, PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedAndGuid Get Postses via PingedAndPostModifiedAndGuid
func GetPostsesByPingedAndPostModifiedAndGuid(offset int, limit int, Pinged_ string, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified = ? and guid = ?", Pinged_, PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedAndMenuOrder Get Postses via PingedAndPostModifiedAndMenuOrder
func GetPostsesByPingedAndPostModifiedAndMenuOrder(offset int, limit int, Pinged_ string, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified = ? and menu_order = ?", Pinged_, PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedAndPostType Get Postses via PingedAndPostModifiedAndPostType
func GetPostsesByPingedAndPostModifiedAndPostType(offset int, limit int, Pinged_ string, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified = ? and post_type = ?", Pinged_, PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedAndPostMimeType Get Postses via PingedAndPostModifiedAndPostMimeType
func GetPostsesByPingedAndPostModifiedAndPostMimeType(offset int, limit int, Pinged_ string, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified = ? and post_mime_type = ?", Pinged_, PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedAndCommentCount Get Postses via PingedAndPostModifiedAndCommentCount
func GetPostsesByPingedAndPostModifiedAndCommentCount(offset int, limit int, Pinged_ string, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified = ? and comment_count = ?", Pinged_, PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedGmtAndPostContentFiltered Get Postses via PingedAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPingedAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, Pinged_ string, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified_gmt = ? and post_content_filtered = ?", Pinged_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedGmtAndPostParent Get Postses via PingedAndPostModifiedGmtAndPostParent
func GetPostsesByPingedAndPostModifiedGmtAndPostParent(offset int, limit int, Pinged_ string, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified_gmt = ? and post_parent = ?", Pinged_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedGmtAndGuid Get Postses via PingedAndPostModifiedGmtAndGuid
func GetPostsesByPingedAndPostModifiedGmtAndGuid(offset int, limit int, Pinged_ string, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified_gmt = ? and guid = ?", Pinged_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedGmtAndMenuOrder Get Postses via PingedAndPostModifiedGmtAndMenuOrder
func GetPostsesByPingedAndPostModifiedGmtAndMenuOrder(offset int, limit int, Pinged_ string, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified_gmt = ? and menu_order = ?", Pinged_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedGmtAndPostType Get Postses via PingedAndPostModifiedGmtAndPostType
func GetPostsesByPingedAndPostModifiedGmtAndPostType(offset int, limit int, Pinged_ string, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified_gmt = ? and post_type = ?", Pinged_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedGmtAndPostMimeType Get Postses via PingedAndPostModifiedGmtAndPostMimeType
func GetPostsesByPingedAndPostModifiedGmtAndPostMimeType(offset int, limit int, Pinged_ string, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified_gmt = ? and post_mime_type = ?", Pinged_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedGmtAndCommentCount Get Postses via PingedAndPostModifiedGmtAndCommentCount
func GetPostsesByPingedAndPostModifiedGmtAndCommentCount(offset int, limit int, Pinged_ string, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified_gmt = ? and comment_count = ?", Pinged_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostContentFilteredAndPostParent Get Postses via PingedAndPostContentFilteredAndPostParent
func GetPostsesByPingedAndPostContentFilteredAndPostParent(offset int, limit int, Pinged_ string, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_content_filtered = ? and post_parent = ?", Pinged_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostContentFilteredAndGuid Get Postses via PingedAndPostContentFilteredAndGuid
func GetPostsesByPingedAndPostContentFilteredAndGuid(offset int, limit int, Pinged_ string, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_content_filtered = ? and guid = ?", Pinged_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostContentFilteredAndMenuOrder Get Postses via PingedAndPostContentFilteredAndMenuOrder
func GetPostsesByPingedAndPostContentFilteredAndMenuOrder(offset int, limit int, Pinged_ string, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_content_filtered = ? and menu_order = ?", Pinged_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostContentFilteredAndPostType Get Postses via PingedAndPostContentFilteredAndPostType
func GetPostsesByPingedAndPostContentFilteredAndPostType(offset int, limit int, Pinged_ string, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_content_filtered = ? and post_type = ?", Pinged_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostContentFilteredAndPostMimeType Get Postses via PingedAndPostContentFilteredAndPostMimeType
func GetPostsesByPingedAndPostContentFilteredAndPostMimeType(offset int, limit int, Pinged_ string, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_content_filtered = ? and post_mime_type = ?", Pinged_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostContentFilteredAndCommentCount Get Postses via PingedAndPostContentFilteredAndCommentCount
func GetPostsesByPingedAndPostContentFilteredAndCommentCount(offset int, limit int, Pinged_ string, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_content_filtered = ? and comment_count = ?", Pinged_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostParentAndGuid Get Postses via PingedAndPostParentAndGuid
func GetPostsesByPingedAndPostParentAndGuid(offset int, limit int, Pinged_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_parent = ? and guid = ?", Pinged_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostParentAndMenuOrder Get Postses via PingedAndPostParentAndMenuOrder
func GetPostsesByPingedAndPostParentAndMenuOrder(offset int, limit int, Pinged_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_parent = ? and menu_order = ?", Pinged_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostParentAndPostType Get Postses via PingedAndPostParentAndPostType
func GetPostsesByPingedAndPostParentAndPostType(offset int, limit int, Pinged_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_parent = ? and post_type = ?", Pinged_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostParentAndPostMimeType Get Postses via PingedAndPostParentAndPostMimeType
func GetPostsesByPingedAndPostParentAndPostMimeType(offset int, limit int, Pinged_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_parent = ? and post_mime_type = ?", Pinged_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostParentAndCommentCount Get Postses via PingedAndPostParentAndCommentCount
func GetPostsesByPingedAndPostParentAndCommentCount(offset int, limit int, Pinged_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_parent = ? and comment_count = ?", Pinged_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndGuidAndMenuOrder Get Postses via PingedAndGuidAndMenuOrder
func GetPostsesByPingedAndGuidAndMenuOrder(offset int, limit int, Pinged_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and guid = ? and menu_order = ?", Pinged_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndGuidAndPostType Get Postses via PingedAndGuidAndPostType
func GetPostsesByPingedAndGuidAndPostType(offset int, limit int, Pinged_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and guid = ? and post_type = ?", Pinged_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndGuidAndPostMimeType Get Postses via PingedAndGuidAndPostMimeType
func GetPostsesByPingedAndGuidAndPostMimeType(offset int, limit int, Pinged_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and guid = ? and post_mime_type = ?", Pinged_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndGuidAndCommentCount Get Postses via PingedAndGuidAndCommentCount
func GetPostsesByPingedAndGuidAndCommentCount(offset int, limit int, Pinged_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and guid = ? and comment_count = ?", Pinged_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndMenuOrderAndPostType Get Postses via PingedAndMenuOrderAndPostType
func GetPostsesByPingedAndMenuOrderAndPostType(offset int, limit int, Pinged_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and menu_order = ? and post_type = ?", Pinged_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndMenuOrderAndPostMimeType Get Postses via PingedAndMenuOrderAndPostMimeType
func GetPostsesByPingedAndMenuOrderAndPostMimeType(offset int, limit int, Pinged_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and menu_order = ? and post_mime_type = ?", Pinged_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndMenuOrderAndCommentCount Get Postses via PingedAndMenuOrderAndCommentCount
func GetPostsesByPingedAndMenuOrderAndCommentCount(offset int, limit int, Pinged_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and menu_order = ? and comment_count = ?", Pinged_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostTypeAndPostMimeType Get Postses via PingedAndPostTypeAndPostMimeType
func GetPostsesByPingedAndPostTypeAndPostMimeType(offset int, limit int, Pinged_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_type = ? and post_mime_type = ?", Pinged_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostTypeAndCommentCount Get Postses via PingedAndPostTypeAndCommentCount
func GetPostsesByPingedAndPostTypeAndCommentCount(offset int, limit int, Pinged_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_type = ? and comment_count = ?", Pinged_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostMimeTypeAndCommentCount Get Postses via PingedAndPostMimeTypeAndCommentCount
func GetPostsesByPingedAndPostMimeTypeAndCommentCount(offset int, limit int, Pinged_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_mime_type = ? and comment_count = ?", Pinged_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostModifiedGmtAndPostContentFiltered Get Postses via PostModifiedAndPostModifiedGmtAndPostContentFiltered
func GetPostsesByPostModifiedAndPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostModified_ time.Time, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_modified_gmt = ? and post_content_filtered = ?", PostModified_, PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostModifiedGmtAndPostParent Get Postses via PostModifiedAndPostModifiedGmtAndPostParent
func GetPostsesByPostModifiedAndPostModifiedGmtAndPostParent(offset int, limit int, PostModified_ time.Time, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_modified_gmt = ? and post_parent = ?", PostModified_, PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostModifiedGmtAndGuid Get Postses via PostModifiedAndPostModifiedGmtAndGuid
func GetPostsesByPostModifiedAndPostModifiedGmtAndGuid(offset int, limit int, PostModified_ time.Time, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_modified_gmt = ? and guid = ?", PostModified_, PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostModifiedGmtAndMenuOrder Get Postses via PostModifiedAndPostModifiedGmtAndMenuOrder
func GetPostsesByPostModifiedAndPostModifiedGmtAndMenuOrder(offset int, limit int, PostModified_ time.Time, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_modified_gmt = ? and menu_order = ?", PostModified_, PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostModifiedGmtAndPostType Get Postses via PostModifiedAndPostModifiedGmtAndPostType
func GetPostsesByPostModifiedAndPostModifiedGmtAndPostType(offset int, limit int, PostModified_ time.Time, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_modified_gmt = ? and post_type = ?", PostModified_, PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostModifiedGmtAndPostMimeType Get Postses via PostModifiedAndPostModifiedGmtAndPostMimeType
func GetPostsesByPostModifiedAndPostModifiedGmtAndPostMimeType(offset int, limit int, PostModified_ time.Time, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_modified_gmt = ? and post_mime_type = ?", PostModified_, PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostModifiedGmtAndCommentCount Get Postses via PostModifiedAndPostModifiedGmtAndCommentCount
func GetPostsesByPostModifiedAndPostModifiedGmtAndCommentCount(offset int, limit int, PostModified_ time.Time, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_modified_gmt = ? and comment_count = ?", PostModified_, PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostContentFilteredAndPostParent Get Postses via PostModifiedAndPostContentFilteredAndPostParent
func GetPostsesByPostModifiedAndPostContentFilteredAndPostParent(offset int, limit int, PostModified_ time.Time, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_content_filtered = ? and post_parent = ?", PostModified_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostContentFilteredAndGuid Get Postses via PostModifiedAndPostContentFilteredAndGuid
func GetPostsesByPostModifiedAndPostContentFilteredAndGuid(offset int, limit int, PostModified_ time.Time, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_content_filtered = ? and guid = ?", PostModified_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostContentFilteredAndMenuOrder Get Postses via PostModifiedAndPostContentFilteredAndMenuOrder
func GetPostsesByPostModifiedAndPostContentFilteredAndMenuOrder(offset int, limit int, PostModified_ time.Time, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_content_filtered = ? and menu_order = ?", PostModified_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostContentFilteredAndPostType Get Postses via PostModifiedAndPostContentFilteredAndPostType
func GetPostsesByPostModifiedAndPostContentFilteredAndPostType(offset int, limit int, PostModified_ time.Time, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_content_filtered = ? and post_type = ?", PostModified_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostContentFilteredAndPostMimeType Get Postses via PostModifiedAndPostContentFilteredAndPostMimeType
func GetPostsesByPostModifiedAndPostContentFilteredAndPostMimeType(offset int, limit int, PostModified_ time.Time, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_content_filtered = ? and post_mime_type = ?", PostModified_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostContentFilteredAndCommentCount Get Postses via PostModifiedAndPostContentFilteredAndCommentCount
func GetPostsesByPostModifiedAndPostContentFilteredAndCommentCount(offset int, limit int, PostModified_ time.Time, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_content_filtered = ? and comment_count = ?", PostModified_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostParentAndGuid Get Postses via PostModifiedAndPostParentAndGuid
func GetPostsesByPostModifiedAndPostParentAndGuid(offset int, limit int, PostModified_ time.Time, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_parent = ? and guid = ?", PostModified_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostParentAndMenuOrder Get Postses via PostModifiedAndPostParentAndMenuOrder
func GetPostsesByPostModifiedAndPostParentAndMenuOrder(offset int, limit int, PostModified_ time.Time, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_parent = ? and menu_order = ?", PostModified_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostParentAndPostType Get Postses via PostModifiedAndPostParentAndPostType
func GetPostsesByPostModifiedAndPostParentAndPostType(offset int, limit int, PostModified_ time.Time, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_parent = ? and post_type = ?", PostModified_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostParentAndPostMimeType Get Postses via PostModifiedAndPostParentAndPostMimeType
func GetPostsesByPostModifiedAndPostParentAndPostMimeType(offset int, limit int, PostModified_ time.Time, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_parent = ? and post_mime_type = ?", PostModified_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostParentAndCommentCount Get Postses via PostModifiedAndPostParentAndCommentCount
func GetPostsesByPostModifiedAndPostParentAndCommentCount(offset int, limit int, PostModified_ time.Time, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_parent = ? and comment_count = ?", PostModified_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndGuidAndMenuOrder Get Postses via PostModifiedAndGuidAndMenuOrder
func GetPostsesByPostModifiedAndGuidAndMenuOrder(offset int, limit int, PostModified_ time.Time, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and guid = ? and menu_order = ?", PostModified_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndGuidAndPostType Get Postses via PostModifiedAndGuidAndPostType
func GetPostsesByPostModifiedAndGuidAndPostType(offset int, limit int, PostModified_ time.Time, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and guid = ? and post_type = ?", PostModified_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndGuidAndPostMimeType Get Postses via PostModifiedAndGuidAndPostMimeType
func GetPostsesByPostModifiedAndGuidAndPostMimeType(offset int, limit int, PostModified_ time.Time, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and guid = ? and post_mime_type = ?", PostModified_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndGuidAndCommentCount Get Postses via PostModifiedAndGuidAndCommentCount
func GetPostsesByPostModifiedAndGuidAndCommentCount(offset int, limit int, PostModified_ time.Time, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and guid = ? and comment_count = ?", PostModified_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndMenuOrderAndPostType Get Postses via PostModifiedAndMenuOrderAndPostType
func GetPostsesByPostModifiedAndMenuOrderAndPostType(offset int, limit int, PostModified_ time.Time, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and menu_order = ? and post_type = ?", PostModified_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndMenuOrderAndPostMimeType Get Postses via PostModifiedAndMenuOrderAndPostMimeType
func GetPostsesByPostModifiedAndMenuOrderAndPostMimeType(offset int, limit int, PostModified_ time.Time, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and menu_order = ? and post_mime_type = ?", PostModified_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndMenuOrderAndCommentCount Get Postses via PostModifiedAndMenuOrderAndCommentCount
func GetPostsesByPostModifiedAndMenuOrderAndCommentCount(offset int, limit int, PostModified_ time.Time, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and menu_order = ? and comment_count = ?", PostModified_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostTypeAndPostMimeType Get Postses via PostModifiedAndPostTypeAndPostMimeType
func GetPostsesByPostModifiedAndPostTypeAndPostMimeType(offset int, limit int, PostModified_ time.Time, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_type = ? and post_mime_type = ?", PostModified_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostTypeAndCommentCount Get Postses via PostModifiedAndPostTypeAndCommentCount
func GetPostsesByPostModifiedAndPostTypeAndCommentCount(offset int, limit int, PostModified_ time.Time, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_type = ? and comment_count = ?", PostModified_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostMimeTypeAndCommentCount Get Postses via PostModifiedAndPostMimeTypeAndCommentCount
func GetPostsesByPostModifiedAndPostMimeTypeAndCommentCount(offset int, limit int, PostModified_ time.Time, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_mime_type = ? and comment_count = ?", PostModified_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostParent Get Postses via PostModifiedGmtAndPostContentFilteredAndPostParent
func GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostParent(offset int, limit int, PostModifiedGmt_ time.Time, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_content_filtered = ? and post_parent = ?", PostModifiedGmt_, PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostContentFilteredAndGuid Get Postses via PostModifiedGmtAndPostContentFilteredAndGuid
func GetPostsesByPostModifiedGmtAndPostContentFilteredAndGuid(offset int, limit int, PostModifiedGmt_ time.Time, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_content_filtered = ? and guid = ?", PostModifiedGmt_, PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostContentFilteredAndMenuOrder Get Postses via PostModifiedGmtAndPostContentFilteredAndMenuOrder
func GetPostsesByPostModifiedGmtAndPostContentFilteredAndMenuOrder(offset int, limit int, PostModifiedGmt_ time.Time, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_content_filtered = ? and menu_order = ?", PostModifiedGmt_, PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostType Get Postses via PostModifiedGmtAndPostContentFilteredAndPostType
func GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostType(offset int, limit int, PostModifiedGmt_ time.Time, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_content_filtered = ? and post_type = ?", PostModifiedGmt_, PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostMimeType Get Postses via PostModifiedGmtAndPostContentFilteredAndPostMimeType
func GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostMimeType(offset int, limit int, PostModifiedGmt_ time.Time, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_content_filtered = ? and post_mime_type = ?", PostModifiedGmt_, PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostContentFilteredAndCommentCount Get Postses via PostModifiedGmtAndPostContentFilteredAndCommentCount
func GetPostsesByPostModifiedGmtAndPostContentFilteredAndCommentCount(offset int, limit int, PostModifiedGmt_ time.Time, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_content_filtered = ? and comment_count = ?", PostModifiedGmt_, PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostParentAndGuid Get Postses via PostModifiedGmtAndPostParentAndGuid
func GetPostsesByPostModifiedGmtAndPostParentAndGuid(offset int, limit int, PostModifiedGmt_ time.Time, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_parent = ? and guid = ?", PostModifiedGmt_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostParentAndMenuOrder Get Postses via PostModifiedGmtAndPostParentAndMenuOrder
func GetPostsesByPostModifiedGmtAndPostParentAndMenuOrder(offset int, limit int, PostModifiedGmt_ time.Time, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_parent = ? and menu_order = ?", PostModifiedGmt_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostParentAndPostType Get Postses via PostModifiedGmtAndPostParentAndPostType
func GetPostsesByPostModifiedGmtAndPostParentAndPostType(offset int, limit int, PostModifiedGmt_ time.Time, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_parent = ? and post_type = ?", PostModifiedGmt_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostParentAndPostMimeType Get Postses via PostModifiedGmtAndPostParentAndPostMimeType
func GetPostsesByPostModifiedGmtAndPostParentAndPostMimeType(offset int, limit int, PostModifiedGmt_ time.Time, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_parent = ? and post_mime_type = ?", PostModifiedGmt_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostParentAndCommentCount Get Postses via PostModifiedGmtAndPostParentAndCommentCount
func GetPostsesByPostModifiedGmtAndPostParentAndCommentCount(offset int, limit int, PostModifiedGmt_ time.Time, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_parent = ? and comment_count = ?", PostModifiedGmt_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndGuidAndMenuOrder Get Postses via PostModifiedGmtAndGuidAndMenuOrder
func GetPostsesByPostModifiedGmtAndGuidAndMenuOrder(offset int, limit int, PostModifiedGmt_ time.Time, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and guid = ? and menu_order = ?", PostModifiedGmt_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndGuidAndPostType Get Postses via PostModifiedGmtAndGuidAndPostType
func GetPostsesByPostModifiedGmtAndGuidAndPostType(offset int, limit int, PostModifiedGmt_ time.Time, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and guid = ? and post_type = ?", PostModifiedGmt_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndGuidAndPostMimeType Get Postses via PostModifiedGmtAndGuidAndPostMimeType
func GetPostsesByPostModifiedGmtAndGuidAndPostMimeType(offset int, limit int, PostModifiedGmt_ time.Time, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and guid = ? and post_mime_type = ?", PostModifiedGmt_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndGuidAndCommentCount Get Postses via PostModifiedGmtAndGuidAndCommentCount
func GetPostsesByPostModifiedGmtAndGuidAndCommentCount(offset int, limit int, PostModifiedGmt_ time.Time, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and guid = ? and comment_count = ?", PostModifiedGmt_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndMenuOrderAndPostType Get Postses via PostModifiedGmtAndMenuOrderAndPostType
func GetPostsesByPostModifiedGmtAndMenuOrderAndPostType(offset int, limit int, PostModifiedGmt_ time.Time, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and menu_order = ? and post_type = ?", PostModifiedGmt_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndMenuOrderAndPostMimeType Get Postses via PostModifiedGmtAndMenuOrderAndPostMimeType
func GetPostsesByPostModifiedGmtAndMenuOrderAndPostMimeType(offset int, limit int, PostModifiedGmt_ time.Time, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and menu_order = ? and post_mime_type = ?", PostModifiedGmt_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndMenuOrderAndCommentCount Get Postses via PostModifiedGmtAndMenuOrderAndCommentCount
func GetPostsesByPostModifiedGmtAndMenuOrderAndCommentCount(offset int, limit int, PostModifiedGmt_ time.Time, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and menu_order = ? and comment_count = ?", PostModifiedGmt_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostTypeAndPostMimeType Get Postses via PostModifiedGmtAndPostTypeAndPostMimeType
func GetPostsesByPostModifiedGmtAndPostTypeAndPostMimeType(offset int, limit int, PostModifiedGmt_ time.Time, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_type = ? and post_mime_type = ?", PostModifiedGmt_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostTypeAndCommentCount Get Postses via PostModifiedGmtAndPostTypeAndCommentCount
func GetPostsesByPostModifiedGmtAndPostTypeAndCommentCount(offset int, limit int, PostModifiedGmt_ time.Time, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_type = ? and comment_count = ?", PostModifiedGmt_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostMimeTypeAndCommentCount Get Postses via PostModifiedGmtAndPostMimeTypeAndCommentCount
func GetPostsesByPostModifiedGmtAndPostMimeTypeAndCommentCount(offset int, limit int, PostModifiedGmt_ time.Time, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_mime_type = ? and comment_count = ?", PostModifiedGmt_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostParentAndGuid Get Postses via PostContentFilteredAndPostParentAndGuid
func GetPostsesByPostContentFilteredAndPostParentAndGuid(offset int, limit int, PostContentFiltered_ string, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_parent = ? and guid = ?", PostContentFiltered_, PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostParentAndMenuOrder Get Postses via PostContentFilteredAndPostParentAndMenuOrder
func GetPostsesByPostContentFilteredAndPostParentAndMenuOrder(offset int, limit int, PostContentFiltered_ string, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_parent = ? and menu_order = ?", PostContentFiltered_, PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostParentAndPostType Get Postses via PostContentFilteredAndPostParentAndPostType
func GetPostsesByPostContentFilteredAndPostParentAndPostType(offset int, limit int, PostContentFiltered_ string, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_parent = ? and post_type = ?", PostContentFiltered_, PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostParentAndPostMimeType Get Postses via PostContentFilteredAndPostParentAndPostMimeType
func GetPostsesByPostContentFilteredAndPostParentAndPostMimeType(offset int, limit int, PostContentFiltered_ string, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_parent = ? and post_mime_type = ?", PostContentFiltered_, PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostParentAndCommentCount Get Postses via PostContentFilteredAndPostParentAndCommentCount
func GetPostsesByPostContentFilteredAndPostParentAndCommentCount(offset int, limit int, PostContentFiltered_ string, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_parent = ? and comment_count = ?", PostContentFiltered_, PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndGuidAndMenuOrder Get Postses via PostContentFilteredAndGuidAndMenuOrder
func GetPostsesByPostContentFilteredAndGuidAndMenuOrder(offset int, limit int, PostContentFiltered_ string, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and guid = ? and menu_order = ?", PostContentFiltered_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndGuidAndPostType Get Postses via PostContentFilteredAndGuidAndPostType
func GetPostsesByPostContentFilteredAndGuidAndPostType(offset int, limit int, PostContentFiltered_ string, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and guid = ? and post_type = ?", PostContentFiltered_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndGuidAndPostMimeType Get Postses via PostContentFilteredAndGuidAndPostMimeType
func GetPostsesByPostContentFilteredAndGuidAndPostMimeType(offset int, limit int, PostContentFiltered_ string, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and guid = ? and post_mime_type = ?", PostContentFiltered_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndGuidAndCommentCount Get Postses via PostContentFilteredAndGuidAndCommentCount
func GetPostsesByPostContentFilteredAndGuidAndCommentCount(offset int, limit int, PostContentFiltered_ string, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and guid = ? and comment_count = ?", PostContentFiltered_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndMenuOrderAndPostType Get Postses via PostContentFilteredAndMenuOrderAndPostType
func GetPostsesByPostContentFilteredAndMenuOrderAndPostType(offset int, limit int, PostContentFiltered_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and menu_order = ? and post_type = ?", PostContentFiltered_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndMenuOrderAndPostMimeType Get Postses via PostContentFilteredAndMenuOrderAndPostMimeType
func GetPostsesByPostContentFilteredAndMenuOrderAndPostMimeType(offset int, limit int, PostContentFiltered_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and menu_order = ? and post_mime_type = ?", PostContentFiltered_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndMenuOrderAndCommentCount Get Postses via PostContentFilteredAndMenuOrderAndCommentCount
func GetPostsesByPostContentFilteredAndMenuOrderAndCommentCount(offset int, limit int, PostContentFiltered_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and menu_order = ? and comment_count = ?", PostContentFiltered_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostTypeAndPostMimeType Get Postses via PostContentFilteredAndPostTypeAndPostMimeType
func GetPostsesByPostContentFilteredAndPostTypeAndPostMimeType(offset int, limit int, PostContentFiltered_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_type = ? and post_mime_type = ?", PostContentFiltered_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostTypeAndCommentCount Get Postses via PostContentFilteredAndPostTypeAndCommentCount
func GetPostsesByPostContentFilteredAndPostTypeAndCommentCount(offset int, limit int, PostContentFiltered_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_type = ? and comment_count = ?", PostContentFiltered_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostMimeTypeAndCommentCount Get Postses via PostContentFilteredAndPostMimeTypeAndCommentCount
func GetPostsesByPostContentFilteredAndPostMimeTypeAndCommentCount(offset int, limit int, PostContentFiltered_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_mime_type = ? and comment_count = ?", PostContentFiltered_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndGuidAndMenuOrder Get Postses via PostParentAndGuidAndMenuOrder
func GetPostsesByPostParentAndGuidAndMenuOrder(offset int, limit int, PostParent_ int64, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and guid = ? and menu_order = ?", PostParent_, Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndGuidAndPostType Get Postses via PostParentAndGuidAndPostType
func GetPostsesByPostParentAndGuidAndPostType(offset int, limit int, PostParent_ int64, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and guid = ? and post_type = ?", PostParent_, Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndGuidAndPostMimeType Get Postses via PostParentAndGuidAndPostMimeType
func GetPostsesByPostParentAndGuidAndPostMimeType(offset int, limit int, PostParent_ int64, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and guid = ? and post_mime_type = ?", PostParent_, Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndGuidAndCommentCount Get Postses via PostParentAndGuidAndCommentCount
func GetPostsesByPostParentAndGuidAndCommentCount(offset int, limit int, PostParent_ int64, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and guid = ? and comment_count = ?", PostParent_, Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndMenuOrderAndPostType Get Postses via PostParentAndMenuOrderAndPostType
func GetPostsesByPostParentAndMenuOrderAndPostType(offset int, limit int, PostParent_ int64, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and menu_order = ? and post_type = ?", PostParent_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndMenuOrderAndPostMimeType Get Postses via PostParentAndMenuOrderAndPostMimeType
func GetPostsesByPostParentAndMenuOrderAndPostMimeType(offset int, limit int, PostParent_ int64, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and menu_order = ? and post_mime_type = ?", PostParent_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndMenuOrderAndCommentCount Get Postses via PostParentAndMenuOrderAndCommentCount
func GetPostsesByPostParentAndMenuOrderAndCommentCount(offset int, limit int, PostParent_ int64, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and menu_order = ? and comment_count = ?", PostParent_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndPostTypeAndPostMimeType Get Postses via PostParentAndPostTypeAndPostMimeType
func GetPostsesByPostParentAndPostTypeAndPostMimeType(offset int, limit int, PostParent_ int64, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and post_type = ? and post_mime_type = ?", PostParent_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndPostTypeAndCommentCount Get Postses via PostParentAndPostTypeAndCommentCount
func GetPostsesByPostParentAndPostTypeAndCommentCount(offset int, limit int, PostParent_ int64, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and post_type = ? and comment_count = ?", PostParent_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndPostMimeTypeAndCommentCount Get Postses via PostParentAndPostMimeTypeAndCommentCount
func GetPostsesByPostParentAndPostMimeTypeAndCommentCount(offset int, limit int, PostParent_ int64, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and post_mime_type = ? and comment_count = ?", PostParent_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByGuidAndMenuOrderAndPostType Get Postses via GuidAndMenuOrderAndPostType
func GetPostsesByGuidAndMenuOrderAndPostType(offset int, limit int, Guid_ string, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ? and menu_order = ? and post_type = ?", Guid_, MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByGuidAndMenuOrderAndPostMimeType Get Postses via GuidAndMenuOrderAndPostMimeType
func GetPostsesByGuidAndMenuOrderAndPostMimeType(offset int, limit int, Guid_ string, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ? and menu_order = ? and post_mime_type = ?", Guid_, MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByGuidAndMenuOrderAndCommentCount Get Postses via GuidAndMenuOrderAndCommentCount
func GetPostsesByGuidAndMenuOrderAndCommentCount(offset int, limit int, Guid_ string, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ? and menu_order = ? and comment_count = ?", Guid_, MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByGuidAndPostTypeAndPostMimeType Get Postses via GuidAndPostTypeAndPostMimeType
func GetPostsesByGuidAndPostTypeAndPostMimeType(offset int, limit int, Guid_ string, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ? and post_type = ? and post_mime_type = ?", Guid_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByGuidAndPostTypeAndCommentCount Get Postses via GuidAndPostTypeAndCommentCount
func GetPostsesByGuidAndPostTypeAndCommentCount(offset int, limit int, Guid_ string, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ? and post_type = ? and comment_count = ?", Guid_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByGuidAndPostMimeTypeAndCommentCount Get Postses via GuidAndPostMimeTypeAndCommentCount
func GetPostsesByGuidAndPostMimeTypeAndCommentCount(offset int, limit int, Guid_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ? and post_mime_type = ? and comment_count = ?", Guid_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByMenuOrderAndPostTypeAndPostMimeType Get Postses via MenuOrderAndPostTypeAndPostMimeType
func GetPostsesByMenuOrderAndPostTypeAndPostMimeType(offset int, limit int, MenuOrder_ int, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("menu_order = ? and post_type = ? and post_mime_type = ?", MenuOrder_, PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByMenuOrderAndPostTypeAndCommentCount Get Postses via MenuOrderAndPostTypeAndCommentCount
func GetPostsesByMenuOrderAndPostTypeAndCommentCount(offset int, limit int, MenuOrder_ int, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("menu_order = ? and post_type = ? and comment_count = ?", MenuOrder_, PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByMenuOrderAndPostMimeTypeAndCommentCount Get Postses via MenuOrderAndPostMimeTypeAndCommentCount
func GetPostsesByMenuOrderAndPostMimeTypeAndCommentCount(offset int, limit int, MenuOrder_ int, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("menu_order = ? and post_mime_type = ? and comment_count = ?", MenuOrder_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTypeAndPostMimeTypeAndCommentCount Get Postses via PostTypeAndPostMimeTypeAndCommentCount
func GetPostsesByPostTypeAndPostMimeTypeAndCommentCount(offset int, limit int, PostType_ string, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_type = ? and post_mime_type = ? and comment_count = ?", PostType_, PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostAuthor Get Postses via IdAndPostAuthor
func GetPostsesByIdAndPostAuthor(offset int, limit int, Id_ int64, PostAuthor_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_author = ?", Id_, PostAuthor_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDate Get Postses via IdAndPostDate
func GetPostsesByIdAndPostDate(offset int, limit int, Id_ int64, PostDate_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date = ?", Id_, PostDate_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostDateGmt Get Postses via IdAndPostDateGmt
func GetPostsesByIdAndPostDateGmt(offset int, limit int, Id_ int64, PostDateGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_date_gmt = ?", Id_, PostDateGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContent Get Postses via IdAndPostContent
func GetPostsesByIdAndPostContent(offset int, limit int, Id_ int64, PostContent_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content = ?", Id_, PostContent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostTitle Get Postses via IdAndPostTitle
func GetPostsesByIdAndPostTitle(offset int, limit int, Id_ int64, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_title = ?", Id_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostExcerpt Get Postses via IdAndPostExcerpt
func GetPostsesByIdAndPostExcerpt(offset int, limit int, Id_ int64, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_excerpt = ?", Id_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostStatus Get Postses via IdAndPostStatus
func GetPostsesByIdAndPostStatus(offset int, limit int, Id_ int64, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_status = ?", Id_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentStatus Get Postses via IdAndCommentStatus
func GetPostsesByIdAndCommentStatus(offset int, limit int, Id_ int64, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_status = ?", Id_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPingStatus Get Postses via IdAndPingStatus
func GetPostsesByIdAndPingStatus(offset int, limit int, Id_ int64, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and ping_status = ?", Id_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostPassword Get Postses via IdAndPostPassword
func GetPostsesByIdAndPostPassword(offset int, limit int, Id_ int64, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_password = ?", Id_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostName Get Postses via IdAndPostName
func GetPostsesByIdAndPostName(offset int, limit int, Id_ int64, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_name = ?", Id_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndToPing Get Postses via IdAndToPing
func GetPostsesByIdAndToPing(offset int, limit int, Id_ int64, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and to_ping = ?", Id_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPinged Get Postses via IdAndPinged
func GetPostsesByIdAndPinged(offset int, limit int, Id_ int64, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and pinged = ?", Id_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModified Get Postses via IdAndPostModified
func GetPostsesByIdAndPostModified(offset int, limit int, Id_ int64, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified = ?", Id_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostModifiedGmt Get Postses via IdAndPostModifiedGmt
func GetPostsesByIdAndPostModifiedGmt(offset int, limit int, Id_ int64, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_modified_gmt = ?", Id_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostContentFiltered Get Postses via IdAndPostContentFiltered
func GetPostsesByIdAndPostContentFiltered(offset int, limit int, Id_ int64, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_content_filtered = ?", Id_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostParent Get Postses via IdAndPostParent
func GetPostsesByIdAndPostParent(offset int, limit int, Id_ int64, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_parent = ?", Id_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndGuid Get Postses via IdAndGuid
func GetPostsesByIdAndGuid(offset int, limit int, Id_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and guid = ?", Id_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndMenuOrder Get Postses via IdAndMenuOrder
func GetPostsesByIdAndMenuOrder(offset int, limit int, Id_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and menu_order = ?", Id_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostType Get Postses via IdAndPostType
func GetPostsesByIdAndPostType(offset int, limit int, Id_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_type = ?", Id_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndPostMimeType Get Postses via IdAndPostMimeType
func GetPostsesByIdAndPostMimeType(offset int, limit int, Id_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and post_mime_type = ?", Id_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByIdAndCommentCount Get Postses via IdAndCommentCount
func GetPostsesByIdAndCommentCount(offset int, limit int, Id_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("id = ? and comment_count = ?", Id_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDate Get Postses via PostAuthorAndPostDate
func GetPostsesByPostAuthorAndPostDate(offset int, limit int, PostAuthor_ int64, PostDate_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date = ?", PostAuthor_, PostDate_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostDateGmt Get Postses via PostAuthorAndPostDateGmt
func GetPostsesByPostAuthorAndPostDateGmt(offset int, limit int, PostAuthor_ int64, PostDateGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_date_gmt = ?", PostAuthor_, PostDateGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContent Get Postses via PostAuthorAndPostContent
func GetPostsesByPostAuthorAndPostContent(offset int, limit int, PostAuthor_ int64, PostContent_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content = ?", PostAuthor_, PostContent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostTitle Get Postses via PostAuthorAndPostTitle
func GetPostsesByPostAuthorAndPostTitle(offset int, limit int, PostAuthor_ int64, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_title = ?", PostAuthor_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostExcerpt Get Postses via PostAuthorAndPostExcerpt
func GetPostsesByPostAuthorAndPostExcerpt(offset int, limit int, PostAuthor_ int64, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_excerpt = ?", PostAuthor_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostStatus Get Postses via PostAuthorAndPostStatus
func GetPostsesByPostAuthorAndPostStatus(offset int, limit int, PostAuthor_ int64, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_status = ?", PostAuthor_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentStatus Get Postses via PostAuthorAndCommentStatus
func GetPostsesByPostAuthorAndCommentStatus(offset int, limit int, PostAuthor_ int64, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_status = ?", PostAuthor_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPingStatus Get Postses via PostAuthorAndPingStatus
func GetPostsesByPostAuthorAndPingStatus(offset int, limit int, PostAuthor_ int64, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and ping_status = ?", PostAuthor_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostPassword Get Postses via PostAuthorAndPostPassword
func GetPostsesByPostAuthorAndPostPassword(offset int, limit int, PostAuthor_ int64, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_password = ?", PostAuthor_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostName Get Postses via PostAuthorAndPostName
func GetPostsesByPostAuthorAndPostName(offset int, limit int, PostAuthor_ int64, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_name = ?", PostAuthor_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndToPing Get Postses via PostAuthorAndToPing
func GetPostsesByPostAuthorAndToPing(offset int, limit int, PostAuthor_ int64, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and to_ping = ?", PostAuthor_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPinged Get Postses via PostAuthorAndPinged
func GetPostsesByPostAuthorAndPinged(offset int, limit int, PostAuthor_ int64, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and pinged = ?", PostAuthor_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModified Get Postses via PostAuthorAndPostModified
func GetPostsesByPostAuthorAndPostModified(offset int, limit int, PostAuthor_ int64, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified = ?", PostAuthor_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostModifiedGmt Get Postses via PostAuthorAndPostModifiedGmt
func GetPostsesByPostAuthorAndPostModifiedGmt(offset int, limit int, PostAuthor_ int64, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_modified_gmt = ?", PostAuthor_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostContentFiltered Get Postses via PostAuthorAndPostContentFiltered
func GetPostsesByPostAuthorAndPostContentFiltered(offset int, limit int, PostAuthor_ int64, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_content_filtered = ?", PostAuthor_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostParent Get Postses via PostAuthorAndPostParent
func GetPostsesByPostAuthorAndPostParent(offset int, limit int, PostAuthor_ int64, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_parent = ?", PostAuthor_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndGuid Get Postses via PostAuthorAndGuid
func GetPostsesByPostAuthorAndGuid(offset int, limit int, PostAuthor_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and guid = ?", PostAuthor_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndMenuOrder Get Postses via PostAuthorAndMenuOrder
func GetPostsesByPostAuthorAndMenuOrder(offset int, limit int, PostAuthor_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and menu_order = ?", PostAuthor_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostType Get Postses via PostAuthorAndPostType
func GetPostsesByPostAuthorAndPostType(offset int, limit int, PostAuthor_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_type = ?", PostAuthor_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndPostMimeType Get Postses via PostAuthorAndPostMimeType
func GetPostsesByPostAuthorAndPostMimeType(offset int, limit int, PostAuthor_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and post_mime_type = ?", PostAuthor_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostAuthorAndCommentCount Get Postses via PostAuthorAndCommentCount
func GetPostsesByPostAuthorAndCommentCount(offset int, limit int, PostAuthor_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ? and comment_count = ?", PostAuthor_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostDateGmt Get Postses via PostDateAndPostDateGmt
func GetPostsesByPostDateAndPostDateGmt(offset int, limit int, PostDate_ time.Time, PostDateGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_date_gmt = ?", PostDate_, PostDateGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContent Get Postses via PostDateAndPostContent
func GetPostsesByPostDateAndPostContent(offset int, limit int, PostDate_ time.Time, PostContent_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content = ?", PostDate_, PostContent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostTitle Get Postses via PostDateAndPostTitle
func GetPostsesByPostDateAndPostTitle(offset int, limit int, PostDate_ time.Time, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_title = ?", PostDate_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostExcerpt Get Postses via PostDateAndPostExcerpt
func GetPostsesByPostDateAndPostExcerpt(offset int, limit int, PostDate_ time.Time, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_excerpt = ?", PostDate_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostStatus Get Postses via PostDateAndPostStatus
func GetPostsesByPostDateAndPostStatus(offset int, limit int, PostDate_ time.Time, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_status = ?", PostDate_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentStatus Get Postses via PostDateAndCommentStatus
func GetPostsesByPostDateAndCommentStatus(offset int, limit int, PostDate_ time.Time, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_status = ?", PostDate_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPingStatus Get Postses via PostDateAndPingStatus
func GetPostsesByPostDateAndPingStatus(offset int, limit int, PostDate_ time.Time, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and ping_status = ?", PostDate_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostPassword Get Postses via PostDateAndPostPassword
func GetPostsesByPostDateAndPostPassword(offset int, limit int, PostDate_ time.Time, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_password = ?", PostDate_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostName Get Postses via PostDateAndPostName
func GetPostsesByPostDateAndPostName(offset int, limit int, PostDate_ time.Time, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_name = ?", PostDate_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndToPing Get Postses via PostDateAndToPing
func GetPostsesByPostDateAndToPing(offset int, limit int, PostDate_ time.Time, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and to_ping = ?", PostDate_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPinged Get Postses via PostDateAndPinged
func GetPostsesByPostDateAndPinged(offset int, limit int, PostDate_ time.Time, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and pinged = ?", PostDate_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModified Get Postses via PostDateAndPostModified
func GetPostsesByPostDateAndPostModified(offset int, limit int, PostDate_ time.Time, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified = ?", PostDate_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostModifiedGmt Get Postses via PostDateAndPostModifiedGmt
func GetPostsesByPostDateAndPostModifiedGmt(offset int, limit int, PostDate_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_modified_gmt = ?", PostDate_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostContentFiltered Get Postses via PostDateAndPostContentFiltered
func GetPostsesByPostDateAndPostContentFiltered(offset int, limit int, PostDate_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_content_filtered = ?", PostDate_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostParent Get Postses via PostDateAndPostParent
func GetPostsesByPostDateAndPostParent(offset int, limit int, PostDate_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_parent = ?", PostDate_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndGuid Get Postses via PostDateAndGuid
func GetPostsesByPostDateAndGuid(offset int, limit int, PostDate_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and guid = ?", PostDate_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndMenuOrder Get Postses via PostDateAndMenuOrder
func GetPostsesByPostDateAndMenuOrder(offset int, limit int, PostDate_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and menu_order = ?", PostDate_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostType Get Postses via PostDateAndPostType
func GetPostsesByPostDateAndPostType(offset int, limit int, PostDate_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_type = ?", PostDate_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndPostMimeType Get Postses via PostDateAndPostMimeType
func GetPostsesByPostDateAndPostMimeType(offset int, limit int, PostDate_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and post_mime_type = ?", PostDate_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateAndCommentCount Get Postses via PostDateAndCommentCount
func GetPostsesByPostDateAndCommentCount(offset int, limit int, PostDate_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ? and comment_count = ?", PostDate_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContent Get Postses via PostDateGmtAndPostContent
func GetPostsesByPostDateGmtAndPostContent(offset int, limit int, PostDateGmt_ time.Time, PostContent_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content = ?", PostDateGmt_, PostContent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostTitle Get Postses via PostDateGmtAndPostTitle
func GetPostsesByPostDateGmtAndPostTitle(offset int, limit int, PostDateGmt_ time.Time, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_title = ?", PostDateGmt_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostExcerpt Get Postses via PostDateGmtAndPostExcerpt
func GetPostsesByPostDateGmtAndPostExcerpt(offset int, limit int, PostDateGmt_ time.Time, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_excerpt = ?", PostDateGmt_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostStatus Get Postses via PostDateGmtAndPostStatus
func GetPostsesByPostDateGmtAndPostStatus(offset int, limit int, PostDateGmt_ time.Time, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_status = ?", PostDateGmt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentStatus Get Postses via PostDateGmtAndCommentStatus
func GetPostsesByPostDateGmtAndCommentStatus(offset int, limit int, PostDateGmt_ time.Time, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_status = ?", PostDateGmt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPingStatus Get Postses via PostDateGmtAndPingStatus
func GetPostsesByPostDateGmtAndPingStatus(offset int, limit int, PostDateGmt_ time.Time, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and ping_status = ?", PostDateGmt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostPassword Get Postses via PostDateGmtAndPostPassword
func GetPostsesByPostDateGmtAndPostPassword(offset int, limit int, PostDateGmt_ time.Time, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_password = ?", PostDateGmt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostName Get Postses via PostDateGmtAndPostName
func GetPostsesByPostDateGmtAndPostName(offset int, limit int, PostDateGmt_ time.Time, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_name = ?", PostDateGmt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndToPing Get Postses via PostDateGmtAndToPing
func GetPostsesByPostDateGmtAndToPing(offset int, limit int, PostDateGmt_ time.Time, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and to_ping = ?", PostDateGmt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPinged Get Postses via PostDateGmtAndPinged
func GetPostsesByPostDateGmtAndPinged(offset int, limit int, PostDateGmt_ time.Time, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and pinged = ?", PostDateGmt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModified Get Postses via PostDateGmtAndPostModified
func GetPostsesByPostDateGmtAndPostModified(offset int, limit int, PostDateGmt_ time.Time, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified = ?", PostDateGmt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostModifiedGmt Get Postses via PostDateGmtAndPostModifiedGmt
func GetPostsesByPostDateGmtAndPostModifiedGmt(offset int, limit int, PostDateGmt_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_modified_gmt = ?", PostDateGmt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostContentFiltered Get Postses via PostDateGmtAndPostContentFiltered
func GetPostsesByPostDateGmtAndPostContentFiltered(offset int, limit int, PostDateGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_content_filtered = ?", PostDateGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostParent Get Postses via PostDateGmtAndPostParent
func GetPostsesByPostDateGmtAndPostParent(offset int, limit int, PostDateGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_parent = ?", PostDateGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndGuid Get Postses via PostDateGmtAndGuid
func GetPostsesByPostDateGmtAndGuid(offset int, limit int, PostDateGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and guid = ?", PostDateGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndMenuOrder Get Postses via PostDateGmtAndMenuOrder
func GetPostsesByPostDateGmtAndMenuOrder(offset int, limit int, PostDateGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and menu_order = ?", PostDateGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostType Get Postses via PostDateGmtAndPostType
func GetPostsesByPostDateGmtAndPostType(offset int, limit int, PostDateGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_type = ?", PostDateGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndPostMimeType Get Postses via PostDateGmtAndPostMimeType
func GetPostsesByPostDateGmtAndPostMimeType(offset int, limit int, PostDateGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and post_mime_type = ?", PostDateGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostDateGmtAndCommentCount Get Postses via PostDateGmtAndCommentCount
func GetPostsesByPostDateGmtAndCommentCount(offset int, limit int, PostDateGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ? and comment_count = ?", PostDateGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostTitle Get Postses via PostContentAndPostTitle
func GetPostsesByPostContentAndPostTitle(offset int, limit int, PostContent_ string, PostTitle_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_title = ?", PostContent_, PostTitle_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostExcerpt Get Postses via PostContentAndPostExcerpt
func GetPostsesByPostContentAndPostExcerpt(offset int, limit int, PostContent_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_excerpt = ?", PostContent_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostStatus Get Postses via PostContentAndPostStatus
func GetPostsesByPostContentAndPostStatus(offset int, limit int, PostContent_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_status = ?", PostContent_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentStatus Get Postses via PostContentAndCommentStatus
func GetPostsesByPostContentAndCommentStatus(offset int, limit int, PostContent_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_status = ?", PostContent_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPingStatus Get Postses via PostContentAndPingStatus
func GetPostsesByPostContentAndPingStatus(offset int, limit int, PostContent_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and ping_status = ?", PostContent_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostPassword Get Postses via PostContentAndPostPassword
func GetPostsesByPostContentAndPostPassword(offset int, limit int, PostContent_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_password = ?", PostContent_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostName Get Postses via PostContentAndPostName
func GetPostsesByPostContentAndPostName(offset int, limit int, PostContent_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_name = ?", PostContent_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndToPing Get Postses via PostContentAndToPing
func GetPostsesByPostContentAndToPing(offset int, limit int, PostContent_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and to_ping = ?", PostContent_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPinged Get Postses via PostContentAndPinged
func GetPostsesByPostContentAndPinged(offset int, limit int, PostContent_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and pinged = ?", PostContent_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModified Get Postses via PostContentAndPostModified
func GetPostsesByPostContentAndPostModified(offset int, limit int, PostContent_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified = ?", PostContent_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostModifiedGmt Get Postses via PostContentAndPostModifiedGmt
func GetPostsesByPostContentAndPostModifiedGmt(offset int, limit int, PostContent_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_modified_gmt = ?", PostContent_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostContentFiltered Get Postses via PostContentAndPostContentFiltered
func GetPostsesByPostContentAndPostContentFiltered(offset int, limit int, PostContent_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_content_filtered = ?", PostContent_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostParent Get Postses via PostContentAndPostParent
func GetPostsesByPostContentAndPostParent(offset int, limit int, PostContent_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_parent = ?", PostContent_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndGuid Get Postses via PostContentAndGuid
func GetPostsesByPostContentAndGuid(offset int, limit int, PostContent_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and guid = ?", PostContent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndMenuOrder Get Postses via PostContentAndMenuOrder
func GetPostsesByPostContentAndMenuOrder(offset int, limit int, PostContent_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and menu_order = ?", PostContent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostType Get Postses via PostContentAndPostType
func GetPostsesByPostContentAndPostType(offset int, limit int, PostContent_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_type = ?", PostContent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndPostMimeType Get Postses via PostContentAndPostMimeType
func GetPostsesByPostContentAndPostMimeType(offset int, limit int, PostContent_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and post_mime_type = ?", PostContent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentAndCommentCount Get Postses via PostContentAndCommentCount
func GetPostsesByPostContentAndCommentCount(offset int, limit int, PostContent_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ? and comment_count = ?", PostContent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostExcerpt Get Postses via PostTitleAndPostExcerpt
func GetPostsesByPostTitleAndPostExcerpt(offset int, limit int, PostTitle_ string, PostExcerpt_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_excerpt = ?", PostTitle_, PostExcerpt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostStatus Get Postses via PostTitleAndPostStatus
func GetPostsesByPostTitleAndPostStatus(offset int, limit int, PostTitle_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_status = ?", PostTitle_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentStatus Get Postses via PostTitleAndCommentStatus
func GetPostsesByPostTitleAndCommentStatus(offset int, limit int, PostTitle_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_status = ?", PostTitle_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPingStatus Get Postses via PostTitleAndPingStatus
func GetPostsesByPostTitleAndPingStatus(offset int, limit int, PostTitle_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and ping_status = ?", PostTitle_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostPassword Get Postses via PostTitleAndPostPassword
func GetPostsesByPostTitleAndPostPassword(offset int, limit int, PostTitle_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_password = ?", PostTitle_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostName Get Postses via PostTitleAndPostName
func GetPostsesByPostTitleAndPostName(offset int, limit int, PostTitle_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_name = ?", PostTitle_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndToPing Get Postses via PostTitleAndToPing
func GetPostsesByPostTitleAndToPing(offset int, limit int, PostTitle_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and to_ping = ?", PostTitle_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPinged Get Postses via PostTitleAndPinged
func GetPostsesByPostTitleAndPinged(offset int, limit int, PostTitle_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and pinged = ?", PostTitle_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModified Get Postses via PostTitleAndPostModified
func GetPostsesByPostTitleAndPostModified(offset int, limit int, PostTitle_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified = ?", PostTitle_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostModifiedGmt Get Postses via PostTitleAndPostModifiedGmt
func GetPostsesByPostTitleAndPostModifiedGmt(offset int, limit int, PostTitle_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_modified_gmt = ?", PostTitle_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostContentFiltered Get Postses via PostTitleAndPostContentFiltered
func GetPostsesByPostTitleAndPostContentFiltered(offset int, limit int, PostTitle_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_content_filtered = ?", PostTitle_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostParent Get Postses via PostTitleAndPostParent
func GetPostsesByPostTitleAndPostParent(offset int, limit int, PostTitle_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_parent = ?", PostTitle_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndGuid Get Postses via PostTitleAndGuid
func GetPostsesByPostTitleAndGuid(offset int, limit int, PostTitle_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and guid = ?", PostTitle_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndMenuOrder Get Postses via PostTitleAndMenuOrder
func GetPostsesByPostTitleAndMenuOrder(offset int, limit int, PostTitle_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and menu_order = ?", PostTitle_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostType Get Postses via PostTitleAndPostType
func GetPostsesByPostTitleAndPostType(offset int, limit int, PostTitle_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_type = ?", PostTitle_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndPostMimeType Get Postses via PostTitleAndPostMimeType
func GetPostsesByPostTitleAndPostMimeType(offset int, limit int, PostTitle_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and post_mime_type = ?", PostTitle_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTitleAndCommentCount Get Postses via PostTitleAndCommentCount
func GetPostsesByPostTitleAndCommentCount(offset int, limit int, PostTitle_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ? and comment_count = ?", PostTitle_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostStatus Get Postses via PostExcerptAndPostStatus
func GetPostsesByPostExcerptAndPostStatus(offset int, limit int, PostExcerpt_ string, PostStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_status = ?", PostExcerpt_, PostStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentStatus Get Postses via PostExcerptAndCommentStatus
func GetPostsesByPostExcerptAndCommentStatus(offset int, limit int, PostExcerpt_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_status = ?", PostExcerpt_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPingStatus Get Postses via PostExcerptAndPingStatus
func GetPostsesByPostExcerptAndPingStatus(offset int, limit int, PostExcerpt_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and ping_status = ?", PostExcerpt_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostPassword Get Postses via PostExcerptAndPostPassword
func GetPostsesByPostExcerptAndPostPassword(offset int, limit int, PostExcerpt_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_password = ?", PostExcerpt_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostName Get Postses via PostExcerptAndPostName
func GetPostsesByPostExcerptAndPostName(offset int, limit int, PostExcerpt_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_name = ?", PostExcerpt_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndToPing Get Postses via PostExcerptAndToPing
func GetPostsesByPostExcerptAndToPing(offset int, limit int, PostExcerpt_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and to_ping = ?", PostExcerpt_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPinged Get Postses via PostExcerptAndPinged
func GetPostsesByPostExcerptAndPinged(offset int, limit int, PostExcerpt_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and pinged = ?", PostExcerpt_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModified Get Postses via PostExcerptAndPostModified
func GetPostsesByPostExcerptAndPostModified(offset int, limit int, PostExcerpt_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified = ?", PostExcerpt_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostModifiedGmt Get Postses via PostExcerptAndPostModifiedGmt
func GetPostsesByPostExcerptAndPostModifiedGmt(offset int, limit int, PostExcerpt_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_modified_gmt = ?", PostExcerpt_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostContentFiltered Get Postses via PostExcerptAndPostContentFiltered
func GetPostsesByPostExcerptAndPostContentFiltered(offset int, limit int, PostExcerpt_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_content_filtered = ?", PostExcerpt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostParent Get Postses via PostExcerptAndPostParent
func GetPostsesByPostExcerptAndPostParent(offset int, limit int, PostExcerpt_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_parent = ?", PostExcerpt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndGuid Get Postses via PostExcerptAndGuid
func GetPostsesByPostExcerptAndGuid(offset int, limit int, PostExcerpt_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and guid = ?", PostExcerpt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndMenuOrder Get Postses via PostExcerptAndMenuOrder
func GetPostsesByPostExcerptAndMenuOrder(offset int, limit int, PostExcerpt_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and menu_order = ?", PostExcerpt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostType Get Postses via PostExcerptAndPostType
func GetPostsesByPostExcerptAndPostType(offset int, limit int, PostExcerpt_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_type = ?", PostExcerpt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndPostMimeType Get Postses via PostExcerptAndPostMimeType
func GetPostsesByPostExcerptAndPostMimeType(offset int, limit int, PostExcerpt_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and post_mime_type = ?", PostExcerpt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostExcerptAndCommentCount Get Postses via PostExcerptAndCommentCount
func GetPostsesByPostExcerptAndCommentCount(offset int, limit int, PostExcerpt_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ? and comment_count = ?", PostExcerpt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentStatus Get Postses via PostStatusAndCommentStatus
func GetPostsesByPostStatusAndCommentStatus(offset int, limit int, PostStatus_ string, CommentStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_status = ?", PostStatus_, CommentStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPingStatus Get Postses via PostStatusAndPingStatus
func GetPostsesByPostStatusAndPingStatus(offset int, limit int, PostStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and ping_status = ?", PostStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostPassword Get Postses via PostStatusAndPostPassword
func GetPostsesByPostStatusAndPostPassword(offset int, limit int, PostStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_password = ?", PostStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostName Get Postses via PostStatusAndPostName
func GetPostsesByPostStatusAndPostName(offset int, limit int, PostStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_name = ?", PostStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndToPing Get Postses via PostStatusAndToPing
func GetPostsesByPostStatusAndToPing(offset int, limit int, PostStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and to_ping = ?", PostStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPinged Get Postses via PostStatusAndPinged
func GetPostsesByPostStatusAndPinged(offset int, limit int, PostStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and pinged = ?", PostStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModified Get Postses via PostStatusAndPostModified
func GetPostsesByPostStatusAndPostModified(offset int, limit int, PostStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified = ?", PostStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostModifiedGmt Get Postses via PostStatusAndPostModifiedGmt
func GetPostsesByPostStatusAndPostModifiedGmt(offset int, limit int, PostStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_modified_gmt = ?", PostStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostContentFiltered Get Postses via PostStatusAndPostContentFiltered
func GetPostsesByPostStatusAndPostContentFiltered(offset int, limit int, PostStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_content_filtered = ?", PostStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostParent Get Postses via PostStatusAndPostParent
func GetPostsesByPostStatusAndPostParent(offset int, limit int, PostStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_parent = ?", PostStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndGuid Get Postses via PostStatusAndGuid
func GetPostsesByPostStatusAndGuid(offset int, limit int, PostStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and guid = ?", PostStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndMenuOrder Get Postses via PostStatusAndMenuOrder
func GetPostsesByPostStatusAndMenuOrder(offset int, limit int, PostStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and menu_order = ?", PostStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostType Get Postses via PostStatusAndPostType
func GetPostsesByPostStatusAndPostType(offset int, limit int, PostStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_type = ?", PostStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndPostMimeType Get Postses via PostStatusAndPostMimeType
func GetPostsesByPostStatusAndPostMimeType(offset int, limit int, PostStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and post_mime_type = ?", PostStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostStatusAndCommentCount Get Postses via PostStatusAndCommentCount
func GetPostsesByPostStatusAndCommentCount(offset int, limit int, PostStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ? and comment_count = ?", PostStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPingStatus Get Postses via CommentStatusAndPingStatus
func GetPostsesByCommentStatusAndPingStatus(offset int, limit int, CommentStatus_ string, PingStatus_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and ping_status = ?", CommentStatus_, PingStatus_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostPassword Get Postses via CommentStatusAndPostPassword
func GetPostsesByCommentStatusAndPostPassword(offset int, limit int, CommentStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_password = ?", CommentStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostName Get Postses via CommentStatusAndPostName
func GetPostsesByCommentStatusAndPostName(offset int, limit int, CommentStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_name = ?", CommentStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndToPing Get Postses via CommentStatusAndToPing
func GetPostsesByCommentStatusAndToPing(offset int, limit int, CommentStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and to_ping = ?", CommentStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPinged Get Postses via CommentStatusAndPinged
func GetPostsesByCommentStatusAndPinged(offset int, limit int, CommentStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and pinged = ?", CommentStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModified Get Postses via CommentStatusAndPostModified
func GetPostsesByCommentStatusAndPostModified(offset int, limit int, CommentStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified = ?", CommentStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostModifiedGmt Get Postses via CommentStatusAndPostModifiedGmt
func GetPostsesByCommentStatusAndPostModifiedGmt(offset int, limit int, CommentStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_modified_gmt = ?", CommentStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostContentFiltered Get Postses via CommentStatusAndPostContentFiltered
func GetPostsesByCommentStatusAndPostContentFiltered(offset int, limit int, CommentStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_content_filtered = ?", CommentStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostParent Get Postses via CommentStatusAndPostParent
func GetPostsesByCommentStatusAndPostParent(offset int, limit int, CommentStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_parent = ?", CommentStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndGuid Get Postses via CommentStatusAndGuid
func GetPostsesByCommentStatusAndGuid(offset int, limit int, CommentStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and guid = ?", CommentStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndMenuOrder Get Postses via CommentStatusAndMenuOrder
func GetPostsesByCommentStatusAndMenuOrder(offset int, limit int, CommentStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and menu_order = ?", CommentStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostType Get Postses via CommentStatusAndPostType
func GetPostsesByCommentStatusAndPostType(offset int, limit int, CommentStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_type = ?", CommentStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndPostMimeType Get Postses via CommentStatusAndPostMimeType
func GetPostsesByCommentStatusAndPostMimeType(offset int, limit int, CommentStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and post_mime_type = ?", CommentStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByCommentStatusAndCommentCount Get Postses via CommentStatusAndCommentCount
func GetPostsesByCommentStatusAndCommentCount(offset int, limit int, CommentStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ? and comment_count = ?", CommentStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostPassword Get Postses via PingStatusAndPostPassword
func GetPostsesByPingStatusAndPostPassword(offset int, limit int, PingStatus_ string, PostPassword_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_password = ?", PingStatus_, PostPassword_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostName Get Postses via PingStatusAndPostName
func GetPostsesByPingStatusAndPostName(offset int, limit int, PingStatus_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_name = ?", PingStatus_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndToPing Get Postses via PingStatusAndToPing
func GetPostsesByPingStatusAndToPing(offset int, limit int, PingStatus_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and to_ping = ?", PingStatus_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPinged Get Postses via PingStatusAndPinged
func GetPostsesByPingStatusAndPinged(offset int, limit int, PingStatus_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and pinged = ?", PingStatus_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModified Get Postses via PingStatusAndPostModified
func GetPostsesByPingStatusAndPostModified(offset int, limit int, PingStatus_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified = ?", PingStatus_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostModifiedGmt Get Postses via PingStatusAndPostModifiedGmt
func GetPostsesByPingStatusAndPostModifiedGmt(offset int, limit int, PingStatus_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_modified_gmt = ?", PingStatus_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostContentFiltered Get Postses via PingStatusAndPostContentFiltered
func GetPostsesByPingStatusAndPostContentFiltered(offset int, limit int, PingStatus_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_content_filtered = ?", PingStatus_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostParent Get Postses via PingStatusAndPostParent
func GetPostsesByPingStatusAndPostParent(offset int, limit int, PingStatus_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_parent = ?", PingStatus_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndGuid Get Postses via PingStatusAndGuid
func GetPostsesByPingStatusAndGuid(offset int, limit int, PingStatus_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and guid = ?", PingStatus_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndMenuOrder Get Postses via PingStatusAndMenuOrder
func GetPostsesByPingStatusAndMenuOrder(offset int, limit int, PingStatus_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and menu_order = ?", PingStatus_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostType Get Postses via PingStatusAndPostType
func GetPostsesByPingStatusAndPostType(offset int, limit int, PingStatus_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_type = ?", PingStatus_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndPostMimeType Get Postses via PingStatusAndPostMimeType
func GetPostsesByPingStatusAndPostMimeType(offset int, limit int, PingStatus_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and post_mime_type = ?", PingStatus_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingStatusAndCommentCount Get Postses via PingStatusAndCommentCount
func GetPostsesByPingStatusAndCommentCount(offset int, limit int, PingStatus_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ? and comment_count = ?", PingStatus_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostName Get Postses via PostPasswordAndPostName
func GetPostsesByPostPasswordAndPostName(offset int, limit int, PostPassword_ string, PostName_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_name = ?", PostPassword_, PostName_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndToPing Get Postses via PostPasswordAndToPing
func GetPostsesByPostPasswordAndToPing(offset int, limit int, PostPassword_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and to_ping = ?", PostPassword_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPinged Get Postses via PostPasswordAndPinged
func GetPostsesByPostPasswordAndPinged(offset int, limit int, PostPassword_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and pinged = ?", PostPassword_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModified Get Postses via PostPasswordAndPostModified
func GetPostsesByPostPasswordAndPostModified(offset int, limit int, PostPassword_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified = ?", PostPassword_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostModifiedGmt Get Postses via PostPasswordAndPostModifiedGmt
func GetPostsesByPostPasswordAndPostModifiedGmt(offset int, limit int, PostPassword_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_modified_gmt = ?", PostPassword_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostContentFiltered Get Postses via PostPasswordAndPostContentFiltered
func GetPostsesByPostPasswordAndPostContentFiltered(offset int, limit int, PostPassword_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_content_filtered = ?", PostPassword_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostParent Get Postses via PostPasswordAndPostParent
func GetPostsesByPostPasswordAndPostParent(offset int, limit int, PostPassword_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_parent = ?", PostPassword_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndGuid Get Postses via PostPasswordAndGuid
func GetPostsesByPostPasswordAndGuid(offset int, limit int, PostPassword_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and guid = ?", PostPassword_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndMenuOrder Get Postses via PostPasswordAndMenuOrder
func GetPostsesByPostPasswordAndMenuOrder(offset int, limit int, PostPassword_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and menu_order = ?", PostPassword_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostType Get Postses via PostPasswordAndPostType
func GetPostsesByPostPasswordAndPostType(offset int, limit int, PostPassword_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_type = ?", PostPassword_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndPostMimeType Get Postses via PostPasswordAndPostMimeType
func GetPostsesByPostPasswordAndPostMimeType(offset int, limit int, PostPassword_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and post_mime_type = ?", PostPassword_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostPasswordAndCommentCount Get Postses via PostPasswordAndCommentCount
func GetPostsesByPostPasswordAndCommentCount(offset int, limit int, PostPassword_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ? and comment_count = ?", PostPassword_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndToPing Get Postses via PostNameAndToPing
func GetPostsesByPostNameAndToPing(offset int, limit int, PostName_ string, ToPing_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and to_ping = ?", PostName_, ToPing_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPinged Get Postses via PostNameAndPinged
func GetPostsesByPostNameAndPinged(offset int, limit int, PostName_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and pinged = ?", PostName_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModified Get Postses via PostNameAndPostModified
func GetPostsesByPostNameAndPostModified(offset int, limit int, PostName_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified = ?", PostName_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostModifiedGmt Get Postses via PostNameAndPostModifiedGmt
func GetPostsesByPostNameAndPostModifiedGmt(offset int, limit int, PostName_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_modified_gmt = ?", PostName_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostContentFiltered Get Postses via PostNameAndPostContentFiltered
func GetPostsesByPostNameAndPostContentFiltered(offset int, limit int, PostName_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_content_filtered = ?", PostName_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostParent Get Postses via PostNameAndPostParent
func GetPostsesByPostNameAndPostParent(offset int, limit int, PostName_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_parent = ?", PostName_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndGuid Get Postses via PostNameAndGuid
func GetPostsesByPostNameAndGuid(offset int, limit int, PostName_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and guid = ?", PostName_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndMenuOrder Get Postses via PostNameAndMenuOrder
func GetPostsesByPostNameAndMenuOrder(offset int, limit int, PostName_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and menu_order = ?", PostName_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostType Get Postses via PostNameAndPostType
func GetPostsesByPostNameAndPostType(offset int, limit int, PostName_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_type = ?", PostName_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndPostMimeType Get Postses via PostNameAndPostMimeType
func GetPostsesByPostNameAndPostMimeType(offset int, limit int, PostName_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and post_mime_type = ?", PostName_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostNameAndCommentCount Get Postses via PostNameAndCommentCount
func GetPostsesByPostNameAndCommentCount(offset int, limit int, PostName_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ? and comment_count = ?", PostName_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPinged Get Postses via ToPingAndPinged
func GetPostsesByToPingAndPinged(offset int, limit int, ToPing_ string, Pinged_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and pinged = ?", ToPing_, Pinged_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModified Get Postses via ToPingAndPostModified
func GetPostsesByToPingAndPostModified(offset int, limit int, ToPing_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified = ?", ToPing_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostModifiedGmt Get Postses via ToPingAndPostModifiedGmt
func GetPostsesByToPingAndPostModifiedGmt(offset int, limit int, ToPing_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_modified_gmt = ?", ToPing_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostContentFiltered Get Postses via ToPingAndPostContentFiltered
func GetPostsesByToPingAndPostContentFiltered(offset int, limit int, ToPing_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_content_filtered = ?", ToPing_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostParent Get Postses via ToPingAndPostParent
func GetPostsesByToPingAndPostParent(offset int, limit int, ToPing_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_parent = ?", ToPing_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndGuid Get Postses via ToPingAndGuid
func GetPostsesByToPingAndGuid(offset int, limit int, ToPing_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and guid = ?", ToPing_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndMenuOrder Get Postses via ToPingAndMenuOrder
func GetPostsesByToPingAndMenuOrder(offset int, limit int, ToPing_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and menu_order = ?", ToPing_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostType Get Postses via ToPingAndPostType
func GetPostsesByToPingAndPostType(offset int, limit int, ToPing_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_type = ?", ToPing_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndPostMimeType Get Postses via ToPingAndPostMimeType
func GetPostsesByToPingAndPostMimeType(offset int, limit int, ToPing_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and post_mime_type = ?", ToPing_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByToPingAndCommentCount Get Postses via ToPingAndCommentCount
func GetPostsesByToPingAndCommentCount(offset int, limit int, ToPing_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ? and comment_count = ?", ToPing_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModified Get Postses via PingedAndPostModified
func GetPostsesByPingedAndPostModified(offset int, limit int, Pinged_ string, PostModified_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified = ?", Pinged_, PostModified_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostModifiedGmt Get Postses via PingedAndPostModifiedGmt
func GetPostsesByPingedAndPostModifiedGmt(offset int, limit int, Pinged_ string, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_modified_gmt = ?", Pinged_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostContentFiltered Get Postses via PingedAndPostContentFiltered
func GetPostsesByPingedAndPostContentFiltered(offset int, limit int, Pinged_ string, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_content_filtered = ?", Pinged_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostParent Get Postses via PingedAndPostParent
func GetPostsesByPingedAndPostParent(offset int, limit int, Pinged_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_parent = ?", Pinged_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndGuid Get Postses via PingedAndGuid
func GetPostsesByPingedAndGuid(offset int, limit int, Pinged_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and guid = ?", Pinged_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndMenuOrder Get Postses via PingedAndMenuOrder
func GetPostsesByPingedAndMenuOrder(offset int, limit int, Pinged_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and menu_order = ?", Pinged_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostType Get Postses via PingedAndPostType
func GetPostsesByPingedAndPostType(offset int, limit int, Pinged_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_type = ?", Pinged_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndPostMimeType Get Postses via PingedAndPostMimeType
func GetPostsesByPingedAndPostMimeType(offset int, limit int, Pinged_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and post_mime_type = ?", Pinged_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPingedAndCommentCount Get Postses via PingedAndCommentCount
func GetPostsesByPingedAndCommentCount(offset int, limit int, Pinged_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ? and comment_count = ?", Pinged_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostModifiedGmt Get Postses via PostModifiedAndPostModifiedGmt
func GetPostsesByPostModifiedAndPostModifiedGmt(offset int, limit int, PostModified_ time.Time, PostModifiedGmt_ time.Time) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_modified_gmt = ?", PostModified_, PostModifiedGmt_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostContentFiltered Get Postses via PostModifiedAndPostContentFiltered
func GetPostsesByPostModifiedAndPostContentFiltered(offset int, limit int, PostModified_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_content_filtered = ?", PostModified_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostParent Get Postses via PostModifiedAndPostParent
func GetPostsesByPostModifiedAndPostParent(offset int, limit int, PostModified_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_parent = ?", PostModified_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndGuid Get Postses via PostModifiedAndGuid
func GetPostsesByPostModifiedAndGuid(offset int, limit int, PostModified_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and guid = ?", PostModified_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndMenuOrder Get Postses via PostModifiedAndMenuOrder
func GetPostsesByPostModifiedAndMenuOrder(offset int, limit int, PostModified_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and menu_order = ?", PostModified_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostType Get Postses via PostModifiedAndPostType
func GetPostsesByPostModifiedAndPostType(offset int, limit int, PostModified_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_type = ?", PostModified_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndPostMimeType Get Postses via PostModifiedAndPostMimeType
func GetPostsesByPostModifiedAndPostMimeType(offset int, limit int, PostModified_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and post_mime_type = ?", PostModified_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedAndCommentCount Get Postses via PostModifiedAndCommentCount
func GetPostsesByPostModifiedAndCommentCount(offset int, limit int, PostModified_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ? and comment_count = ?", PostModified_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostContentFiltered Get Postses via PostModifiedGmtAndPostContentFiltered
func GetPostsesByPostModifiedGmtAndPostContentFiltered(offset int, limit int, PostModifiedGmt_ time.Time, PostContentFiltered_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_content_filtered = ?", PostModifiedGmt_, PostContentFiltered_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostParent Get Postses via PostModifiedGmtAndPostParent
func GetPostsesByPostModifiedGmtAndPostParent(offset int, limit int, PostModifiedGmt_ time.Time, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_parent = ?", PostModifiedGmt_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndGuid Get Postses via PostModifiedGmtAndGuid
func GetPostsesByPostModifiedGmtAndGuid(offset int, limit int, PostModifiedGmt_ time.Time, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and guid = ?", PostModifiedGmt_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndMenuOrder Get Postses via PostModifiedGmtAndMenuOrder
func GetPostsesByPostModifiedGmtAndMenuOrder(offset int, limit int, PostModifiedGmt_ time.Time, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and menu_order = ?", PostModifiedGmt_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostType Get Postses via PostModifiedGmtAndPostType
func GetPostsesByPostModifiedGmtAndPostType(offset int, limit int, PostModifiedGmt_ time.Time, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_type = ?", PostModifiedGmt_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndPostMimeType Get Postses via PostModifiedGmtAndPostMimeType
func GetPostsesByPostModifiedGmtAndPostMimeType(offset int, limit int, PostModifiedGmt_ time.Time, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and post_mime_type = ?", PostModifiedGmt_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostModifiedGmtAndCommentCount Get Postses via PostModifiedGmtAndCommentCount
func GetPostsesByPostModifiedGmtAndCommentCount(offset int, limit int, PostModifiedGmt_ time.Time, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ? and comment_count = ?", PostModifiedGmt_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostParent Get Postses via PostContentFilteredAndPostParent
func GetPostsesByPostContentFilteredAndPostParent(offset int, limit int, PostContentFiltered_ string, PostParent_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_parent = ?", PostContentFiltered_, PostParent_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndGuid Get Postses via PostContentFilteredAndGuid
func GetPostsesByPostContentFilteredAndGuid(offset int, limit int, PostContentFiltered_ string, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and guid = ?", PostContentFiltered_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndMenuOrder Get Postses via PostContentFilteredAndMenuOrder
func GetPostsesByPostContentFilteredAndMenuOrder(offset int, limit int, PostContentFiltered_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and menu_order = ?", PostContentFiltered_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostType Get Postses via PostContentFilteredAndPostType
func GetPostsesByPostContentFilteredAndPostType(offset int, limit int, PostContentFiltered_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_type = ?", PostContentFiltered_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndPostMimeType Get Postses via PostContentFilteredAndPostMimeType
func GetPostsesByPostContentFilteredAndPostMimeType(offset int, limit int, PostContentFiltered_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and post_mime_type = ?", PostContentFiltered_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostContentFilteredAndCommentCount Get Postses via PostContentFilteredAndCommentCount
func GetPostsesByPostContentFilteredAndCommentCount(offset int, limit int, PostContentFiltered_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ? and comment_count = ?", PostContentFiltered_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndGuid Get Postses via PostParentAndGuid
func GetPostsesByPostParentAndGuid(offset int, limit int, PostParent_ int64, Guid_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and guid = ?", PostParent_, Guid_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndMenuOrder Get Postses via PostParentAndMenuOrder
func GetPostsesByPostParentAndMenuOrder(offset int, limit int, PostParent_ int64, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and menu_order = ?", PostParent_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndPostType Get Postses via PostParentAndPostType
func GetPostsesByPostParentAndPostType(offset int, limit int, PostParent_ int64, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and post_type = ?", PostParent_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndPostMimeType Get Postses via PostParentAndPostMimeType
func GetPostsesByPostParentAndPostMimeType(offset int, limit int, PostParent_ int64, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and post_mime_type = ?", PostParent_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostParentAndCommentCount Get Postses via PostParentAndCommentCount
func GetPostsesByPostParentAndCommentCount(offset int, limit int, PostParent_ int64, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ? and comment_count = ?", PostParent_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByGuidAndMenuOrder Get Postses via GuidAndMenuOrder
func GetPostsesByGuidAndMenuOrder(offset int, limit int, Guid_ string, MenuOrder_ int) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ? and menu_order = ?", Guid_, MenuOrder_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByGuidAndPostType Get Postses via GuidAndPostType
func GetPostsesByGuidAndPostType(offset int, limit int, Guid_ string, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ? and post_type = ?", Guid_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByGuidAndPostMimeType Get Postses via GuidAndPostMimeType
func GetPostsesByGuidAndPostMimeType(offset int, limit int, Guid_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ? and post_mime_type = ?", Guid_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByGuidAndCommentCount Get Postses via GuidAndCommentCount
func GetPostsesByGuidAndCommentCount(offset int, limit int, Guid_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ? and comment_count = ?", Guid_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByMenuOrderAndPostType Get Postses via MenuOrderAndPostType
func GetPostsesByMenuOrderAndPostType(offset int, limit int, MenuOrder_ int, PostType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("menu_order = ? and post_type = ?", MenuOrder_, PostType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByMenuOrderAndPostMimeType Get Postses via MenuOrderAndPostMimeType
func GetPostsesByMenuOrderAndPostMimeType(offset int, limit int, MenuOrder_ int, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("menu_order = ? and post_mime_type = ?", MenuOrder_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByMenuOrderAndCommentCount Get Postses via MenuOrderAndCommentCount
func GetPostsesByMenuOrderAndCommentCount(offset int, limit int, MenuOrder_ int, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("menu_order = ? and comment_count = ?", MenuOrder_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTypeAndPostMimeType Get Postses via PostTypeAndPostMimeType
func GetPostsesByPostTypeAndPostMimeType(offset int, limit int, PostType_ string, PostMimeType_ string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_type = ? and post_mime_type = ?", PostType_, PostMimeType_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostTypeAndCommentCount Get Postses via PostTypeAndCommentCount
func GetPostsesByPostTypeAndCommentCount(offset int, limit int, PostType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_type = ? and comment_count = ?", PostType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostsesByPostMimeTypeAndCommentCount Get Postses via PostMimeTypeAndCommentCount
func GetPostsesByPostMimeTypeAndCommentCount(offset int, limit int, PostMimeType_ string, CommentCount_ int64) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_mime_type = ? and comment_count = ?", PostMimeType_, CommentCount_).Limit(limit, offset).Find(_Posts)
	return _Posts, err
}

// GetPostses Get Postses via field
func GetPostses(offset int, limit int, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaId Get Postss via Id
func GetPostsesViaId(offset int, limit int, Id_ int64, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ID = ?", Id_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostAuthor Get Postss via PostAuthor
func GetPostsesViaPostAuthor(offset int, limit int, PostAuthor_ int64, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_author = ?", PostAuthor_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostDate Get Postss via PostDate
func GetPostsesViaPostDate(offset int, limit int, PostDate_ time.Time, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date = ?", PostDate_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostDateGmt Get Postss via PostDateGmt
func GetPostsesViaPostDateGmt(offset int, limit int, PostDateGmt_ time.Time, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_date_gmt = ?", PostDateGmt_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostContent Get Postss via PostContent
func GetPostsesViaPostContent(offset int, limit int, PostContent_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content = ?", PostContent_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostTitle Get Postss via PostTitle
func GetPostsesViaPostTitle(offset int, limit int, PostTitle_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_title = ?", PostTitle_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostExcerpt Get Postss via PostExcerpt
func GetPostsesViaPostExcerpt(offset int, limit int, PostExcerpt_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_excerpt = ?", PostExcerpt_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostStatus Get Postss via PostStatus
func GetPostsesViaPostStatus(offset int, limit int, PostStatus_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_status = ?", PostStatus_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaCommentStatus Get Postss via CommentStatus
func GetPostsesViaCommentStatus(offset int, limit int, CommentStatus_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_status = ?", CommentStatus_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPingStatus Get Postss via PingStatus
func GetPostsesViaPingStatus(offset int, limit int, PingStatus_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("ping_status = ?", PingStatus_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostPassword Get Postss via PostPassword
func GetPostsesViaPostPassword(offset int, limit int, PostPassword_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_password = ?", PostPassword_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostName Get Postss via PostName
func GetPostsesViaPostName(offset int, limit int, PostName_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_name = ?", PostName_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaToPing Get Postss via ToPing
func GetPostsesViaToPing(offset int, limit int, ToPing_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("to_ping = ?", ToPing_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPinged Get Postss via Pinged
func GetPostsesViaPinged(offset int, limit int, Pinged_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("pinged = ?", Pinged_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostModified Get Postss via PostModified
func GetPostsesViaPostModified(offset int, limit int, PostModified_ time.Time, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified = ?", PostModified_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostModifiedGmt Get Postss via PostModifiedGmt
func GetPostsesViaPostModifiedGmt(offset int, limit int, PostModifiedGmt_ time.Time, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_modified_gmt = ?", PostModifiedGmt_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostContentFiltered Get Postss via PostContentFiltered
func GetPostsesViaPostContentFiltered(offset int, limit int, PostContentFiltered_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_content_filtered = ?", PostContentFiltered_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostParent Get Postss via PostParent
func GetPostsesViaPostParent(offset int, limit int, PostParent_ int64, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_parent = ?", PostParent_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaGuid Get Postss via Guid
func GetPostsesViaGuid(offset int, limit int, Guid_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("guid = ?", Guid_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaMenuOrder Get Postss via MenuOrder
func GetPostsesViaMenuOrder(offset int, limit int, MenuOrder_ int, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("menu_order = ?", MenuOrder_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostType Get Postss via PostType
func GetPostsesViaPostType(offset int, limit int, PostType_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_type = ?", PostType_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaPostMimeType Get Postss via PostMimeType
func GetPostsesViaPostMimeType(offset int, limit int, PostMimeType_ string, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("post_mime_type = ?", PostMimeType_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// GetPostsesViaCommentCount Get Postss via CommentCount
func GetPostsesViaCommentCount(offset int, limit int, CommentCount_ int64, field string) (*[]*Posts, error) {
	var _Posts = new([]*Posts)
	err := Engine.Table("posts").Where("comment_count = ?", CommentCount_).Limit(limit, offset).Desc(field).Find(_Posts)
	return _Posts, err
}

// HasPostsViaId Has Posts via Id
func HasPostsViaId(iId int64) bool {
	if has, err := Engine.Where("ID = ?", iId).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostAuthor Has Posts via PostAuthor
func HasPostsViaPostAuthor(iPostAuthor int64) bool {
	if has, err := Engine.Where("post_author = ?", iPostAuthor).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostDate Has Posts via PostDate
func HasPostsViaPostDate(iPostDate time.Time) bool {
	if has, err := Engine.Where("post_date = ?", iPostDate).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostDateGmt Has Posts via PostDateGmt
func HasPostsViaPostDateGmt(iPostDateGmt time.Time) bool {
	if has, err := Engine.Where("post_date_gmt = ?", iPostDateGmt).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostContent Has Posts via PostContent
func HasPostsViaPostContent(iPostContent string) bool {
	if has, err := Engine.Where("post_content = ?", iPostContent).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostTitle Has Posts via PostTitle
func HasPostsViaPostTitle(iPostTitle string) bool {
	if has, err := Engine.Where("post_title = ?", iPostTitle).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostExcerpt Has Posts via PostExcerpt
func HasPostsViaPostExcerpt(iPostExcerpt string) bool {
	if has, err := Engine.Where("post_excerpt = ?", iPostExcerpt).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostStatus Has Posts via PostStatus
func HasPostsViaPostStatus(iPostStatus string) bool {
	if has, err := Engine.Where("post_status = ?", iPostStatus).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaCommentStatus Has Posts via CommentStatus
func HasPostsViaCommentStatus(iCommentStatus string) bool {
	if has, err := Engine.Where("comment_status = ?", iCommentStatus).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPingStatus Has Posts via PingStatus
func HasPostsViaPingStatus(iPingStatus string) bool {
	if has, err := Engine.Where("ping_status = ?", iPingStatus).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostPassword Has Posts via PostPassword
func HasPostsViaPostPassword(iPostPassword string) bool {
	if has, err := Engine.Where("post_password = ?", iPostPassword).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostName Has Posts via PostName
func HasPostsViaPostName(iPostName string) bool {
	if has, err := Engine.Where("post_name = ?", iPostName).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaToPing Has Posts via ToPing
func HasPostsViaToPing(iToPing string) bool {
	if has, err := Engine.Where("to_ping = ?", iToPing).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPinged Has Posts via Pinged
func HasPostsViaPinged(iPinged string) bool {
	if has, err := Engine.Where("pinged = ?", iPinged).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostModified Has Posts via PostModified
func HasPostsViaPostModified(iPostModified time.Time) bool {
	if has, err := Engine.Where("post_modified = ?", iPostModified).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostModifiedGmt Has Posts via PostModifiedGmt
func HasPostsViaPostModifiedGmt(iPostModifiedGmt time.Time) bool {
	if has, err := Engine.Where("post_modified_gmt = ?", iPostModifiedGmt).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostContentFiltered Has Posts via PostContentFiltered
func HasPostsViaPostContentFiltered(iPostContentFiltered string) bool {
	if has, err := Engine.Where("post_content_filtered = ?", iPostContentFiltered).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostParent Has Posts via PostParent
func HasPostsViaPostParent(iPostParent int64) bool {
	if has, err := Engine.Where("post_parent = ?", iPostParent).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaGuid Has Posts via Guid
func HasPostsViaGuid(iGuid string) bool {
	if has, err := Engine.Where("guid = ?", iGuid).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaMenuOrder Has Posts via MenuOrder
func HasPostsViaMenuOrder(iMenuOrder int) bool {
	if has, err := Engine.Where("menu_order = ?", iMenuOrder).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostType Has Posts via PostType
func HasPostsViaPostType(iPostType string) bool {
	if has, err := Engine.Where("post_type = ?", iPostType).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaPostMimeType Has Posts via PostMimeType
func HasPostsViaPostMimeType(iPostMimeType string) bool {
	if has, err := Engine.Where("post_mime_type = ?", iPostMimeType).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasPostsViaCommentCount Has Posts via CommentCount
func HasPostsViaCommentCount(iCommentCount int64) bool {
	if has, err := Engine.Where("comment_count = ?", iCommentCount).Get(new(Posts)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// GetPostsViaId Get Posts via Id
func GetPostsViaId(iId int64) (*Posts, error) {
	var _Posts = &Posts{Id: iId}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostAuthor Get Posts via PostAuthor
func GetPostsViaPostAuthor(iPostAuthor int64) (*Posts, error) {
	var _Posts = &Posts{PostAuthor: iPostAuthor}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostDate Get Posts via PostDate
func GetPostsViaPostDate(iPostDate time.Time) (*Posts, error) {
	var _Posts = &Posts{PostDate: iPostDate}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostDateGmt Get Posts via PostDateGmt
func GetPostsViaPostDateGmt(iPostDateGmt time.Time) (*Posts, error) {
	var _Posts = &Posts{PostDateGmt: iPostDateGmt}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostContent Get Posts via PostContent
func GetPostsViaPostContent(iPostContent string) (*Posts, error) {
	var _Posts = &Posts{PostContent: iPostContent}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostTitle Get Posts via PostTitle
func GetPostsViaPostTitle(iPostTitle string) (*Posts, error) {
	var _Posts = &Posts{PostTitle: iPostTitle}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostExcerpt Get Posts via PostExcerpt
func GetPostsViaPostExcerpt(iPostExcerpt string) (*Posts, error) {
	var _Posts = &Posts{PostExcerpt: iPostExcerpt}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostStatus Get Posts via PostStatus
func GetPostsViaPostStatus(iPostStatus string) (*Posts, error) {
	var _Posts = &Posts{PostStatus: iPostStatus}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaCommentStatus Get Posts via CommentStatus
func GetPostsViaCommentStatus(iCommentStatus string) (*Posts, error) {
	var _Posts = &Posts{CommentStatus: iCommentStatus}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPingStatus Get Posts via PingStatus
func GetPostsViaPingStatus(iPingStatus string) (*Posts, error) {
	var _Posts = &Posts{PingStatus: iPingStatus}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostPassword Get Posts via PostPassword
func GetPostsViaPostPassword(iPostPassword string) (*Posts, error) {
	var _Posts = &Posts{PostPassword: iPostPassword}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostName Get Posts via PostName
func GetPostsViaPostName(iPostName string) (*Posts, error) {
	var _Posts = &Posts{PostName: iPostName}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaToPing Get Posts via ToPing
func GetPostsViaToPing(iToPing string) (*Posts, error) {
	var _Posts = &Posts{ToPing: iToPing}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPinged Get Posts via Pinged
func GetPostsViaPinged(iPinged string) (*Posts, error) {
	var _Posts = &Posts{Pinged: iPinged}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostModified Get Posts via PostModified
func GetPostsViaPostModified(iPostModified time.Time) (*Posts, error) {
	var _Posts = &Posts{PostModified: iPostModified}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostModifiedGmt Get Posts via PostModifiedGmt
func GetPostsViaPostModifiedGmt(iPostModifiedGmt time.Time) (*Posts, error) {
	var _Posts = &Posts{PostModifiedGmt: iPostModifiedGmt}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostContentFiltered Get Posts via PostContentFiltered
func GetPostsViaPostContentFiltered(iPostContentFiltered string) (*Posts, error) {
	var _Posts = &Posts{PostContentFiltered: iPostContentFiltered}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostParent Get Posts via PostParent
func GetPostsViaPostParent(iPostParent int64) (*Posts, error) {
	var _Posts = &Posts{PostParent: iPostParent}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaGuid Get Posts via Guid
func GetPostsViaGuid(iGuid string) (*Posts, error) {
	var _Posts = &Posts{Guid: iGuid}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaMenuOrder Get Posts via MenuOrder
func GetPostsViaMenuOrder(iMenuOrder int) (*Posts, error) {
	var _Posts = &Posts{MenuOrder: iMenuOrder}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostType Get Posts via PostType
func GetPostsViaPostType(iPostType string) (*Posts, error) {
	var _Posts = &Posts{PostType: iPostType}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaPostMimeType Get Posts via PostMimeType
func GetPostsViaPostMimeType(iPostMimeType string) (*Posts, error) {
	var _Posts = &Posts{PostMimeType: iPostMimeType}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// GetPostsViaCommentCount Get Posts via CommentCount
func GetPostsViaCommentCount(iCommentCount int64) (*Posts, error) {
	var _Posts = &Posts{CommentCount: iCommentCount}
	has, err := Engine.Get(_Posts)
	if has {
		return _Posts, err
	} else {
		return nil, err
	}
}

// SetPostsViaId Set Posts via Id
func SetPostsViaId(iId int64, posts *Posts) (int64, error) {
	posts.Id = iId
	return Engine.Insert(posts)
}

// SetPostsViaPostAuthor Set Posts via PostAuthor
func SetPostsViaPostAuthor(iPostAuthor int64, posts *Posts) (int64, error) {
	posts.PostAuthor = iPostAuthor
	return Engine.Insert(posts)
}

// SetPostsViaPostDate Set Posts via PostDate
func SetPostsViaPostDate(iPostDate time.Time, posts *Posts) (int64, error) {
	posts.PostDate = iPostDate
	return Engine.Insert(posts)
}

// SetPostsViaPostDateGmt Set Posts via PostDateGmt
func SetPostsViaPostDateGmt(iPostDateGmt time.Time, posts *Posts) (int64, error) {
	posts.PostDateGmt = iPostDateGmt
	return Engine.Insert(posts)
}

// SetPostsViaPostContent Set Posts via PostContent
func SetPostsViaPostContent(iPostContent string, posts *Posts) (int64, error) {
	posts.PostContent = iPostContent
	return Engine.Insert(posts)
}

// SetPostsViaPostTitle Set Posts via PostTitle
func SetPostsViaPostTitle(iPostTitle string, posts *Posts) (int64, error) {
	posts.PostTitle = iPostTitle
	return Engine.Insert(posts)
}

// SetPostsViaPostExcerpt Set Posts via PostExcerpt
func SetPostsViaPostExcerpt(iPostExcerpt string, posts *Posts) (int64, error) {
	posts.PostExcerpt = iPostExcerpt
	return Engine.Insert(posts)
}

// SetPostsViaPostStatus Set Posts via PostStatus
func SetPostsViaPostStatus(iPostStatus string, posts *Posts) (int64, error) {
	posts.PostStatus = iPostStatus
	return Engine.Insert(posts)
}

// SetPostsViaCommentStatus Set Posts via CommentStatus
func SetPostsViaCommentStatus(iCommentStatus string, posts *Posts) (int64, error) {
	posts.CommentStatus = iCommentStatus
	return Engine.Insert(posts)
}

// SetPostsViaPingStatus Set Posts via PingStatus
func SetPostsViaPingStatus(iPingStatus string, posts *Posts) (int64, error) {
	posts.PingStatus = iPingStatus
	return Engine.Insert(posts)
}

// SetPostsViaPostPassword Set Posts via PostPassword
func SetPostsViaPostPassword(iPostPassword string, posts *Posts) (int64, error) {
	posts.PostPassword = iPostPassword
	return Engine.Insert(posts)
}

// SetPostsViaPostName Set Posts via PostName
func SetPostsViaPostName(iPostName string, posts *Posts) (int64, error) {
	posts.PostName = iPostName
	return Engine.Insert(posts)
}

// SetPostsViaToPing Set Posts via ToPing
func SetPostsViaToPing(iToPing string, posts *Posts) (int64, error) {
	posts.ToPing = iToPing
	return Engine.Insert(posts)
}

// SetPostsViaPinged Set Posts via Pinged
func SetPostsViaPinged(iPinged string, posts *Posts) (int64, error) {
	posts.Pinged = iPinged
	return Engine.Insert(posts)
}

// SetPostsViaPostModified Set Posts via PostModified
func SetPostsViaPostModified(iPostModified time.Time, posts *Posts) (int64, error) {
	posts.PostModified = iPostModified
	return Engine.Insert(posts)
}

// SetPostsViaPostModifiedGmt Set Posts via PostModifiedGmt
func SetPostsViaPostModifiedGmt(iPostModifiedGmt time.Time, posts *Posts) (int64, error) {
	posts.PostModifiedGmt = iPostModifiedGmt
	return Engine.Insert(posts)
}

// SetPostsViaPostContentFiltered Set Posts via PostContentFiltered
func SetPostsViaPostContentFiltered(iPostContentFiltered string, posts *Posts) (int64, error) {
	posts.PostContentFiltered = iPostContentFiltered
	return Engine.Insert(posts)
}

// SetPostsViaPostParent Set Posts via PostParent
func SetPostsViaPostParent(iPostParent int64, posts *Posts) (int64, error) {
	posts.PostParent = iPostParent
	return Engine.Insert(posts)
}

// SetPostsViaGuid Set Posts via Guid
func SetPostsViaGuid(iGuid string, posts *Posts) (int64, error) {
	posts.Guid = iGuid
	return Engine.Insert(posts)
}

// SetPostsViaMenuOrder Set Posts via MenuOrder
func SetPostsViaMenuOrder(iMenuOrder int, posts *Posts) (int64, error) {
	posts.MenuOrder = iMenuOrder
	return Engine.Insert(posts)
}

// SetPostsViaPostType Set Posts via PostType
func SetPostsViaPostType(iPostType string, posts *Posts) (int64, error) {
	posts.PostType = iPostType
	return Engine.Insert(posts)
}

// SetPostsViaPostMimeType Set Posts via PostMimeType
func SetPostsViaPostMimeType(iPostMimeType string, posts *Posts) (int64, error) {
	posts.PostMimeType = iPostMimeType
	return Engine.Insert(posts)
}

// SetPostsViaCommentCount Set Posts via CommentCount
func SetPostsViaCommentCount(iCommentCount int64, posts *Posts) (int64, error) {
	posts.CommentCount = iCommentCount
	return Engine.Insert(posts)
}

// AddPosts Add Posts via all columns
func AddPosts(iId int64, iPostAuthor int64, iPostDate time.Time, iPostDateGmt time.Time, iPostContent string, iPostTitle string, iPostExcerpt string, iPostStatus string, iCommentStatus string, iPingStatus string, iPostPassword string, iPostName string, iToPing string, iPinged string, iPostModified time.Time, iPostModifiedGmt time.Time, iPostContentFiltered string, iPostParent int64, iGuid string, iMenuOrder int, iPostType string, iPostMimeType string, iCommentCount int64) error {
	_Posts := &Posts{Id: iId, PostAuthor: iPostAuthor, PostDate: iPostDate, PostDateGmt: iPostDateGmt, PostContent: iPostContent, PostTitle: iPostTitle, PostExcerpt: iPostExcerpt, PostStatus: iPostStatus, CommentStatus: iCommentStatus, PingStatus: iPingStatus, PostPassword: iPostPassword, PostName: iPostName, ToPing: iToPing, Pinged: iPinged, PostModified: iPostModified, PostModifiedGmt: iPostModifiedGmt, PostContentFiltered: iPostContentFiltered, PostParent: iPostParent, Guid: iGuid, MenuOrder: iMenuOrder, PostType: iPostType, PostMimeType: iPostMimeType, CommentCount: iCommentCount}
	if _, err := Engine.Insert(_Posts); err != nil {
		return err
	} else {
		return nil
	}
}

// PostPosts Post Posts via iPosts
func PostPosts(iPosts *Posts) (int64, error) {
	_, err := Engine.Insert(iPosts)
	return iPosts.Id, err
}

// PutPosts Put Posts
func PutPosts(iPosts *Posts) (int64, error) {
	_, err := Engine.Id(iPosts.Id).Update(iPosts)
	return iPosts.Id, err
}

// PutPostsViaId Put Posts via Id
func PutPostsViaId(Id_ int64, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{Id: Id_})
	return row, err
}

// PutPostsViaPostAuthor Put Posts via PostAuthor
func PutPostsViaPostAuthor(PostAuthor_ int64, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostAuthor: PostAuthor_})
	return row, err
}

// PutPostsViaPostDate Put Posts via PostDate
func PutPostsViaPostDate(PostDate_ time.Time, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostDate: PostDate_})
	return row, err
}

// PutPostsViaPostDateGmt Put Posts via PostDateGmt
func PutPostsViaPostDateGmt(PostDateGmt_ time.Time, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostDateGmt: PostDateGmt_})
	return row, err
}

// PutPostsViaPostContent Put Posts via PostContent
func PutPostsViaPostContent(PostContent_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostContent: PostContent_})
	return row, err
}

// PutPostsViaPostTitle Put Posts via PostTitle
func PutPostsViaPostTitle(PostTitle_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostTitle: PostTitle_})
	return row, err
}

// PutPostsViaPostExcerpt Put Posts via PostExcerpt
func PutPostsViaPostExcerpt(PostExcerpt_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostExcerpt: PostExcerpt_})
	return row, err
}

// PutPostsViaPostStatus Put Posts via PostStatus
func PutPostsViaPostStatus(PostStatus_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostStatus: PostStatus_})
	return row, err
}

// PutPostsViaCommentStatus Put Posts via CommentStatus
func PutPostsViaCommentStatus(CommentStatus_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{CommentStatus: CommentStatus_})
	return row, err
}

// PutPostsViaPingStatus Put Posts via PingStatus
func PutPostsViaPingStatus(PingStatus_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PingStatus: PingStatus_})
	return row, err
}

// PutPostsViaPostPassword Put Posts via PostPassword
func PutPostsViaPostPassword(PostPassword_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostPassword: PostPassword_})
	return row, err
}

// PutPostsViaPostName Put Posts via PostName
func PutPostsViaPostName(PostName_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostName: PostName_})
	return row, err
}

// PutPostsViaToPing Put Posts via ToPing
func PutPostsViaToPing(ToPing_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{ToPing: ToPing_})
	return row, err
}

// PutPostsViaPinged Put Posts via Pinged
func PutPostsViaPinged(Pinged_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{Pinged: Pinged_})
	return row, err
}

// PutPostsViaPostModified Put Posts via PostModified
func PutPostsViaPostModified(PostModified_ time.Time, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostModified: PostModified_})
	return row, err
}

// PutPostsViaPostModifiedGmt Put Posts via PostModifiedGmt
func PutPostsViaPostModifiedGmt(PostModifiedGmt_ time.Time, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostModifiedGmt: PostModifiedGmt_})
	return row, err
}

// PutPostsViaPostContentFiltered Put Posts via PostContentFiltered
func PutPostsViaPostContentFiltered(PostContentFiltered_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostContentFiltered: PostContentFiltered_})
	return row, err
}

// PutPostsViaPostParent Put Posts via PostParent
func PutPostsViaPostParent(PostParent_ int64, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostParent: PostParent_})
	return row, err
}

// PutPostsViaGuid Put Posts via Guid
func PutPostsViaGuid(Guid_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{Guid: Guid_})
	return row, err
}

// PutPostsViaMenuOrder Put Posts via MenuOrder
func PutPostsViaMenuOrder(MenuOrder_ int, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{MenuOrder: MenuOrder_})
	return row, err
}

// PutPostsViaPostType Put Posts via PostType
func PutPostsViaPostType(PostType_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostType: PostType_})
	return row, err
}

// PutPostsViaPostMimeType Put Posts via PostMimeType
func PutPostsViaPostMimeType(PostMimeType_ string, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{PostMimeType: PostMimeType_})
	return row, err
}

// PutPostsViaCommentCount Put Posts via CommentCount
func PutPostsViaCommentCount(CommentCount_ int64, iPosts *Posts) (int64, error) {
	row, err := Engine.Update(iPosts, &Posts{CommentCount: CommentCount_})
	return row, err
}

// UpdatePostsViaId via map[string]interface{}{}
func UpdatePostsViaId(iId int64, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("ID = ?", iId).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostAuthor via map[string]interface{}{}
func UpdatePostsViaPostAuthor(iPostAuthor int64, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_author = ?", iPostAuthor).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostDate via map[string]interface{}{}
func UpdatePostsViaPostDate(iPostDate time.Time, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_date = ?", iPostDate).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostDateGmt via map[string]interface{}{}
func UpdatePostsViaPostDateGmt(iPostDateGmt time.Time, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_date_gmt = ?", iPostDateGmt).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostContent via map[string]interface{}{}
func UpdatePostsViaPostContent(iPostContent string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_content = ?", iPostContent).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostTitle via map[string]interface{}{}
func UpdatePostsViaPostTitle(iPostTitle string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_title = ?", iPostTitle).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostExcerpt via map[string]interface{}{}
func UpdatePostsViaPostExcerpt(iPostExcerpt string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_excerpt = ?", iPostExcerpt).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostStatus via map[string]interface{}{}
func UpdatePostsViaPostStatus(iPostStatus string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_status = ?", iPostStatus).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaCommentStatus via map[string]interface{}{}
func UpdatePostsViaCommentStatus(iCommentStatus string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("comment_status = ?", iCommentStatus).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPingStatus via map[string]interface{}{}
func UpdatePostsViaPingStatus(iPingStatus string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("ping_status = ?", iPingStatus).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostPassword via map[string]interface{}{}
func UpdatePostsViaPostPassword(iPostPassword string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_password = ?", iPostPassword).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostName via map[string]interface{}{}
func UpdatePostsViaPostName(iPostName string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_name = ?", iPostName).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaToPing via map[string]interface{}{}
func UpdatePostsViaToPing(iToPing string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("to_ping = ?", iToPing).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPinged via map[string]interface{}{}
func UpdatePostsViaPinged(iPinged string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("pinged = ?", iPinged).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostModified via map[string]interface{}{}
func UpdatePostsViaPostModified(iPostModified time.Time, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_modified = ?", iPostModified).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostModifiedGmt via map[string]interface{}{}
func UpdatePostsViaPostModifiedGmt(iPostModifiedGmt time.Time, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_modified_gmt = ?", iPostModifiedGmt).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostContentFiltered via map[string]interface{}{}
func UpdatePostsViaPostContentFiltered(iPostContentFiltered string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_content_filtered = ?", iPostContentFiltered).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostParent via map[string]interface{}{}
func UpdatePostsViaPostParent(iPostParent int64, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_parent = ?", iPostParent).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaGuid via map[string]interface{}{}
func UpdatePostsViaGuid(iGuid string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("guid = ?", iGuid).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaMenuOrder via map[string]interface{}{}
func UpdatePostsViaMenuOrder(iMenuOrder int, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("menu_order = ?", iMenuOrder).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostType via map[string]interface{}{}
func UpdatePostsViaPostType(iPostType string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_type = ?", iPostType).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaPostMimeType via map[string]interface{}{}
func UpdatePostsViaPostMimeType(iPostMimeType string, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("post_mime_type = ?", iPostMimeType).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdatePostsViaCommentCount via map[string]interface{}{}
func UpdatePostsViaCommentCount(iCommentCount int64, iPostsMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(Posts)).Where("comment_count = ?", iCommentCount).Update(iPostsMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// DeletePosts Delete Posts
func DeletePosts(iId int64) (int64, error) {
	row, err := Engine.Id(iId).Delete(new(Posts))
	return row, err
}

// DeletePostsViaId Delete Posts via Id
func DeletePostsViaId(iId int64) (err error) {
	var has bool
	var _Posts = &Posts{Id: iId}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("ID = ?", iId).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostAuthor Delete Posts via PostAuthor
func DeletePostsViaPostAuthor(iPostAuthor int64) (err error) {
	var has bool
	var _Posts = &Posts{PostAuthor: iPostAuthor}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_author = ?", iPostAuthor).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostDate Delete Posts via PostDate
func DeletePostsViaPostDate(iPostDate time.Time) (err error) {
	var has bool
	var _Posts = &Posts{PostDate: iPostDate}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_date = ?", iPostDate).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostDateGmt Delete Posts via PostDateGmt
func DeletePostsViaPostDateGmt(iPostDateGmt time.Time) (err error) {
	var has bool
	var _Posts = &Posts{PostDateGmt: iPostDateGmt}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_date_gmt = ?", iPostDateGmt).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostContent Delete Posts via PostContent
func DeletePostsViaPostContent(iPostContent string) (err error) {
	var has bool
	var _Posts = &Posts{PostContent: iPostContent}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_content = ?", iPostContent).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostTitle Delete Posts via PostTitle
func DeletePostsViaPostTitle(iPostTitle string) (err error) {
	var has bool
	var _Posts = &Posts{PostTitle: iPostTitle}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_title = ?", iPostTitle).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostExcerpt Delete Posts via PostExcerpt
func DeletePostsViaPostExcerpt(iPostExcerpt string) (err error) {
	var has bool
	var _Posts = &Posts{PostExcerpt: iPostExcerpt}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_excerpt = ?", iPostExcerpt).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostStatus Delete Posts via PostStatus
func DeletePostsViaPostStatus(iPostStatus string) (err error) {
	var has bool
	var _Posts = &Posts{PostStatus: iPostStatus}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_status = ?", iPostStatus).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaCommentStatus Delete Posts via CommentStatus
func DeletePostsViaCommentStatus(iCommentStatus string) (err error) {
	var has bool
	var _Posts = &Posts{CommentStatus: iCommentStatus}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("comment_status = ?", iCommentStatus).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPingStatus Delete Posts via PingStatus
func DeletePostsViaPingStatus(iPingStatus string) (err error) {
	var has bool
	var _Posts = &Posts{PingStatus: iPingStatus}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("ping_status = ?", iPingStatus).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostPassword Delete Posts via PostPassword
func DeletePostsViaPostPassword(iPostPassword string) (err error) {
	var has bool
	var _Posts = &Posts{PostPassword: iPostPassword}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_password = ?", iPostPassword).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostName Delete Posts via PostName
func DeletePostsViaPostName(iPostName string) (err error) {
	var has bool
	var _Posts = &Posts{PostName: iPostName}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_name = ?", iPostName).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaToPing Delete Posts via ToPing
func DeletePostsViaToPing(iToPing string) (err error) {
	var has bool
	var _Posts = &Posts{ToPing: iToPing}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("to_ping = ?", iToPing).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPinged Delete Posts via Pinged
func DeletePostsViaPinged(iPinged string) (err error) {
	var has bool
	var _Posts = &Posts{Pinged: iPinged}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("pinged = ?", iPinged).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostModified Delete Posts via PostModified
func DeletePostsViaPostModified(iPostModified time.Time) (err error) {
	var has bool
	var _Posts = &Posts{PostModified: iPostModified}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_modified = ?", iPostModified).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostModifiedGmt Delete Posts via PostModifiedGmt
func DeletePostsViaPostModifiedGmt(iPostModifiedGmt time.Time) (err error) {
	var has bool
	var _Posts = &Posts{PostModifiedGmt: iPostModifiedGmt}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_modified_gmt = ?", iPostModifiedGmt).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostContentFiltered Delete Posts via PostContentFiltered
func DeletePostsViaPostContentFiltered(iPostContentFiltered string) (err error) {
	var has bool
	var _Posts = &Posts{PostContentFiltered: iPostContentFiltered}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_content_filtered = ?", iPostContentFiltered).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostParent Delete Posts via PostParent
func DeletePostsViaPostParent(iPostParent int64) (err error) {
	var has bool
	var _Posts = &Posts{PostParent: iPostParent}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_parent = ?", iPostParent).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaGuid Delete Posts via Guid
func DeletePostsViaGuid(iGuid string) (err error) {
	var has bool
	var _Posts = &Posts{Guid: iGuid}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("guid = ?", iGuid).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaMenuOrder Delete Posts via MenuOrder
func DeletePostsViaMenuOrder(iMenuOrder int) (err error) {
	var has bool
	var _Posts = &Posts{MenuOrder: iMenuOrder}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("menu_order = ?", iMenuOrder).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostType Delete Posts via PostType
func DeletePostsViaPostType(iPostType string) (err error) {
	var has bool
	var _Posts = &Posts{PostType: iPostType}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_type = ?", iPostType).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaPostMimeType Delete Posts via PostMimeType
func DeletePostsViaPostMimeType(iPostMimeType string) (err error) {
	var has bool
	var _Posts = &Posts{PostMimeType: iPostMimeType}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("post_mime_type = ?", iPostMimeType).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeletePostsViaCommentCount Delete Posts via CommentCount
func DeletePostsViaCommentCount(iCommentCount int64) (err error) {
	var has bool
	var _Posts = &Posts{CommentCount: iCommentCount}
	if has, err = Engine.Get(_Posts); (has == true) && (err == nil) {
		if row, err := Engine.Where("comment_count = ?", iCommentCount).Delete(new(Posts)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}
