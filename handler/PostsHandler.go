package handler

import (
	"github.com/insionng/zenpress/helper"
	"github.com/insionng/zenpress/model"
	"github.com/insionng/macross"
)

func GetPostsesCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()

	if offset > 0 {
		var m = map[string]interface{}{}
		_int64, _error := model.GetPostsesCount(offset, limit)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		m["postssCount"] = _int64
		return self.JSON(m)
	}
	herr.Message = "Can't get to the GetPostsesCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsCountByIdHandler(self *macross.Context) error {
	Id_ := self.Args("ID").MustInt64()
	_int64 := model.GetPostsCountById(Id_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostAuthorHandler(self *macross.Context) error {
	PostAuthor_ := self.Args("post_author").MustInt64()
	_int64 := model.GetPostsCountByPostAuthor(PostAuthor_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostDateHandler(self *macross.Context) error {
	PostDate_ := self.Args("post_date").Time()
	_int64 := model.GetPostsCountByPostDate(PostDate_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostDateGmtHandler(self *macross.Context) error {
	PostDateGmt_ := self.Args("post_date_gmt").Time()
	_int64 := model.GetPostsCountByPostDateGmt(PostDateGmt_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostContentHandler(self *macross.Context) error {
	PostContent_ := self.Args("post_content").String()
	_int64 := model.GetPostsCountByPostContent(PostContent_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostTitleHandler(self *macross.Context) error {
	PostTitle_ := self.Args("post_title").String()
	_int64 := model.GetPostsCountByPostTitle(PostTitle_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostExcerptHandler(self *macross.Context) error {
	PostExcerpt_ := self.Args("post_excerpt").String()
	_int64 := model.GetPostsCountByPostExcerpt(PostExcerpt_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostStatusHandler(self *macross.Context) error {
	PostStatus_ := self.Args("post_status").String()
	_int64 := model.GetPostsCountByPostStatus(PostStatus_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByCommentStatusHandler(self *macross.Context) error {
	CommentStatus_ := self.Args("comment_status").String()
	_int64 := model.GetPostsCountByCommentStatus(CommentStatus_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPingStatusHandler(self *macross.Context) error {
	PingStatus_ := self.Args("ping_status").String()
	_int64 := model.GetPostsCountByPingStatus(PingStatus_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostPasswordHandler(self *macross.Context) error {
	PostPassword_ := self.Args("post_password").String()
	_int64 := model.GetPostsCountByPostPassword(PostPassword_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostNameHandler(self *macross.Context) error {
	PostName_ := self.Args("post_name").String()
	_int64 := model.GetPostsCountByPostName(PostName_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByToPingHandler(self *macross.Context) error {
	ToPing_ := self.Args("to_ping").String()
	_int64 := model.GetPostsCountByToPing(ToPing_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPingedHandler(self *macross.Context) error {
	Pinged_ := self.Args("pinged").String()
	_int64 := model.GetPostsCountByPinged(Pinged_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostModifiedHandler(self *macross.Context) error {
	PostModified_ := self.Args("post_modified").Time()
	_int64 := model.GetPostsCountByPostModified(PostModified_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostModifiedGmtHandler(self *macross.Context) error {
	PostModifiedGmt_ := self.Args("post_modified_gmt").Time()
	_int64 := model.GetPostsCountByPostModifiedGmt(PostModifiedGmt_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostContentFilteredHandler(self *macross.Context) error {
	PostContentFiltered_ := self.Args("post_content_filtered").String()
	_int64 := model.GetPostsCountByPostContentFiltered(PostContentFiltered_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostParentHandler(self *macross.Context) error {
	PostParent_ := self.Args("post_parent").MustInt64()
	_int64 := model.GetPostsCountByPostParent(PostParent_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByGuidHandler(self *macross.Context) error {
	Guid_ := self.Args("guid").String()
	_int64 := model.GetPostsCountByGuid(Guid_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByMenuOrderHandler(self *macross.Context) error {
	MenuOrder_ := self.Args("menu_order").MustInt()
	_int64 := model.GetPostsCountByMenuOrder(MenuOrder_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostTypeHandler(self *macross.Context) error {
	PostType_ := self.Args("post_type").String()
	_int64 := model.GetPostsCountByPostType(PostType_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByPostMimeTypeHandler(self *macross.Context) error {
	PostMimeType_ := self.Args("post_mime_type").String()
	_int64 := model.GetPostsCountByPostMimeType(PostMimeType_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsCountByCommentCountHandler(self *macross.Context) error {
	CommentCount_ := self.Args("comment_count").MustInt64()
	_int64 := model.GetPostsCountByCommentCount(CommentCount_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["postsCount"] = 0
	}
	m["postsCount"] = _int64
	return self.JSON(m)
}

func GetPostsesByIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iId := self.Args("ID").MustInt64()
	if (offset > 0) && helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesById(offset, limit, iId, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesById's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostAuthor := self.Args("post_author").MustInt64()
	if (offset > 0) && helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthor(offset, limit, iPostAuthor, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthor's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostDate := self.Args("post_date").Time()
	if (offset > 0) && helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDate(offset, limit, iPostDate, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDate's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	if (offset > 0) && helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmt(offset, limit, iPostDateGmt, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostContent := self.Args("post_content").String()
	if (offset > 0) && helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContent(offset, limit, iPostContent, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostTitle := self.Args("post_title").String()
	if (offset > 0) && helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitle(offset, limit, iPostTitle, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	if (offset > 0) && helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerpt(offset, limit, iPostExcerpt, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostStatus := self.Args("post_status").String()
	if (offset > 0) && helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatus(offset, limit, iPostStatus, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iCommentStatus := self.Args("comment_status").String()
	if (offset > 0) && helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatus(offset, limit, iCommentStatus, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPingStatus := self.Args("ping_status").String()
	if (offset > 0) && helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatus(offset, limit, iPingStatus, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostPassword := self.Args("post_password").String()
	if (offset > 0) && helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPassword(offset, limit, iPostPassword, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostName := self.Args("post_name").String()
	if (offset > 0) && helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostName(offset, limit, iPostName, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iToPing := self.Args("to_ping").String()
	if (offset > 0) && helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPing(offset, limit, iToPing, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPinged := self.Args("pinged").String()
	if (offset > 0) && helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPinged(offset, limit, iPinged, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostModified := self.Args("post_modified").Time()
	if (offset > 0) && helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModified(offset, limit, iPostModified, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	if (offset > 0) && helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmt(offset, limit, iPostModifiedGmt, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	if (offset > 0) && helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFiltered(offset, limit, iPostContentFiltered, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostParent := self.Args("post_parent").MustInt64()
	if (offset > 0) && helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParent(offset, limit, iPostParent, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iGuid := self.Args("guid").String()
	if (offset > 0) && helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuid(offset, limit, iGuid, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	if (offset > 0) && helper.IsHas(iMenuOrder) {
		_Posts, _error := model.GetPostsesByMenuOrder(offset, limit, iMenuOrder, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostType := self.Args("post_type").String()
	if (offset > 0) && helper.IsHas(iPostType) {
		_Posts, _error := model.GetPostsesByPostType(offset, limit, iPostType, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iPostMimeType := self.Args("post_mime_type").String()
	if (offset > 0) && helper.IsHas(iPostMimeType) {
		_Posts, _error := model.GetPostsesByPostMimeType(offset, limit, iPostMimeType, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iCommentCount := self.Args("comment_count").MustInt64()
	if (offset > 0) && helper.IsHas(iCommentCount) {
		_Posts, _error := model.GetPostsesByCommentCount(offset, limit, iCommentCount, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostDateHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostDate(offset, limit, iId,iPostAuthor,iPostDate)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostDate's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostDateGmt(offset, limit, iId,iPostAuthor,iPostDateGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostDateGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostContent(offset, limit, iId,iPostAuthor,iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostTitle(offset, limit, iId,iPostAuthor,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostExcerpt(offset, limit, iId,iPostAuthor,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostStatus(offset, limit, iId,iPostAuthor,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndCommentStatus(offset, limit, iId,iPostAuthor,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPingStatus(offset, limit, iId,iPostAuthor,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostPassword(offset, limit, iId,iPostAuthor,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostName(offset, limit, iId,iPostAuthor,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndToPing(offset, limit, iId,iPostAuthor,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPinged(offset, limit, iId,iPostAuthor,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostModified(offset, limit, iId,iPostAuthor,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostModifiedGmt(offset, limit, iId,iPostAuthor,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostContentFiltered(offset, limit, iId,iPostAuthor,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostParent(offset, limit, iId,iPostAuthor,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndGuid(offset, limit, iId,iPostAuthor,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndMenuOrder(offset, limit, iId,iPostAuthor,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostType(offset, limit, iId,iPostAuthor,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndPostMimeType(offset, limit, iId,iPostAuthor,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthorAndCommentCount(offset, limit, iId,iPostAuthor,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthorAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostDateGmt(offset, limit, iId,iPostDate,iPostDateGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostDateGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostContent(offset, limit, iId,iPostDate,iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostTitle(offset, limit, iId,iPostDate,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostExcerpt(offset, limit, iId,iPostDate,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostStatus(offset, limit, iId,iPostDate,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndCommentStatus(offset, limit, iId,iPostDate,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPingStatus(offset, limit, iId,iPostDate,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostPassword(offset, limit, iId,iPostDate,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostName(offset, limit, iId,iPostDate,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndToPing(offset, limit, iId,iPostDate,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPinged(offset, limit, iId,iPostDate,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostModified(offset, limit, iId,iPostDate,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostModifiedGmt(offset, limit, iId,iPostDate,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostContentFiltered(offset, limit, iId,iPostDate,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostParent(offset, limit, iId,iPostDate,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndGuid(offset, limit, iId,iPostDate,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndMenuOrder(offset, limit, iId,iPostDate,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostType(offset, limit, iId,iPostDate,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndPostMimeType(offset, limit, iId,iPostDate,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateAndCommentCount(offset, limit, iId,iPostDate,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostContent(offset, limit, iId,iPostDateGmt,iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostTitle(offset, limit, iId,iPostDateGmt,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostExcerpt(offset, limit, iId,iPostDateGmt,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostStatus(offset, limit, iId,iPostDateGmt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndCommentStatus(offset, limit, iId,iPostDateGmt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPingStatus(offset, limit, iId,iPostDateGmt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostPassword(offset, limit, iId,iPostDateGmt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostName(offset, limit, iId,iPostDateGmt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndToPing(offset, limit, iId,iPostDateGmt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPinged(offset, limit, iId,iPostDateGmt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostModified(offset, limit, iId,iPostDateGmt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostModifiedGmt(offset, limit, iId,iPostDateGmt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostContentFiltered(offset, limit, iId,iPostDateGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostParent(offset, limit, iId,iPostDateGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndGuid(offset, limit, iId,iPostDateGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndMenuOrder(offset, limit, iId,iPostDateGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostType(offset, limit, iId,iPostDateGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndPostMimeType(offset, limit, iId,iPostDateGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmtAndCommentCount(offset, limit, iId,iPostDateGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostTitle(offset, limit, iId,iPostContent,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostExcerpt(offset, limit, iId,iPostContent,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostStatus(offset, limit, iId,iPostContent,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndCommentStatus(offset, limit, iId,iPostContent,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPingStatus(offset, limit, iId,iPostContent,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostPassword(offset, limit, iId,iPostContent,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostName(offset, limit, iId,iPostContent,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndToPing(offset, limit, iId,iPostContent,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPinged(offset, limit, iId,iPostContent,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostModified(offset, limit, iId,iPostContent,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostModifiedGmt(offset, limit, iId,iPostContent,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostContentFiltered(offset, limit, iId,iPostContent,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostParent(offset, limit, iId,iPostContent,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndGuid(offset, limit, iId,iPostContent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndMenuOrder(offset, limit, iId,iPostContent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostType(offset, limit, iId,iPostContent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndPostMimeType(offset, limit, iId,iPostContent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentAndCommentCount(offset, limit, iId,iPostContent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPostExcerpt(offset, limit, iId,iPostTitle,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPostStatus(offset, limit, iId,iPostTitle,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndCommentStatus(offset, limit, iId,iPostTitle,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPingStatus(offset, limit, iId,iPostTitle,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPostPassword(offset, limit, iId,iPostTitle,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPostName(offset, limit, iId,iPostTitle,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndToPing(offset, limit, iId,iPostTitle,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPinged(offset, limit, iId,iPostTitle,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPostModified(offset, limit, iId,iPostTitle,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPostModifiedGmt(offset, limit, iId,iPostTitle,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPostContentFiltered(offset, limit, iId,iPostTitle,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPostParent(offset, limit, iId,iPostTitle,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndGuid(offset, limit, iId,iPostTitle,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndMenuOrder(offset, limit, iId,iPostTitle,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPostType(offset, limit, iId,iPostTitle,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndPostMimeType(offset, limit, iId,iPostTitle,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitleAndCommentCount(offset, limit, iId,iPostTitle,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitleAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPostStatus(offset, limit, iId,iPostExcerpt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndCommentStatus(offset, limit, iId,iPostExcerpt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPingStatus(offset, limit, iId,iPostExcerpt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPostPassword(offset, limit, iId,iPostExcerpt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPostName(offset, limit, iId,iPostExcerpt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndToPing(offset, limit, iId,iPostExcerpt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPinged(offset, limit, iId,iPostExcerpt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPostModified(offset, limit, iId,iPostExcerpt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPostModifiedGmt(offset, limit, iId,iPostExcerpt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPostContentFiltered(offset, limit, iId,iPostExcerpt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPostParent(offset, limit, iId,iPostExcerpt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndGuid(offset, limit, iId,iPostExcerpt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndMenuOrder(offset, limit, iId,iPostExcerpt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPostType(offset, limit, iId,iPostExcerpt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndPostMimeType(offset, limit, iId,iPostExcerpt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerptAndCommentCount(offset, limit, iId,iPostExcerpt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerptAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndCommentStatus(offset, limit, iId,iPostStatus,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndPingStatus(offset, limit, iId,iPostStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndPostPassword(offset, limit, iId,iPostStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndPostName(offset, limit, iId,iPostStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndToPing(offset, limit, iId,iPostStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndPinged(offset, limit, iId,iPostStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndPostModified(offset, limit, iId,iPostStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndPostModifiedGmt(offset, limit, iId,iPostStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndPostContentFiltered(offset, limit, iId,iPostStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndPostParent(offset, limit, iId,iPostStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndGuid(offset, limit, iId,iPostStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndMenuOrder(offset, limit, iId,iPostStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndPostType(offset, limit, iId,iPostStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndPostMimeType(offset, limit, iId,iPostStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatusAndCommentCount(offset, limit, iId,iPostStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndPingStatus(offset, limit, iId,iCommentStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndPostPassword(offset, limit, iId,iCommentStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndPostName(offset, limit, iId,iCommentStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndToPing(offset, limit, iId,iCommentStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndPinged(offset, limit, iId,iCommentStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndPostModified(offset, limit, iId,iCommentStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndPostModifiedGmt(offset, limit, iId,iCommentStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndPostContentFiltered(offset, limit, iId,iCommentStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndPostParent(offset, limit, iId,iCommentStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndGuid(offset, limit, iId,iCommentStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndMenuOrder(offset, limit, iId,iCommentStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndPostType(offset, limit, iId,iCommentStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndPostMimeType(offset, limit, iId,iCommentStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatusAndCommentCount(offset, limit, iId,iCommentStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndPostPassword(offset, limit, iId,iPingStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndPostName(offset, limit, iId,iPingStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndToPing(offset, limit, iId,iPingStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndPinged(offset, limit, iId,iPingStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndPostModified(offset, limit, iId,iPingStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndPostModifiedGmt(offset, limit, iId,iPingStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndPostContentFiltered(offset, limit, iId,iPingStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndPostParent(offset, limit, iId,iPingStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndGuid(offset, limit, iId,iPingStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndMenuOrder(offset, limit, iId,iPingStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndPostType(offset, limit, iId,iPingStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndPostMimeType(offset, limit, iId,iPingStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatusAndCommentCount(offset, limit, iId,iPingStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndPostName(offset, limit, iId,iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndToPing(offset, limit, iId,iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndPinged(offset, limit, iId,iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndPostModified(offset, limit, iId,iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndPostModifiedGmt(offset, limit, iId,iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndPostContentFiltered(offset, limit, iId,iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndPostParent(offset, limit, iId,iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndGuid(offset, limit, iId,iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndMenuOrder(offset, limit, iId,iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndPostType(offset, limit, iId,iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndPostMimeType(offset, limit, iId,iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPasswordAndCommentCount(offset, limit, iId,iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndToPing(offset, limit, iId,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndPinged(offset, limit, iId,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndPostModified(offset, limit, iId,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndPostModifiedGmt(offset, limit, iId,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndPostContentFiltered(offset, limit, iId,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndPostParent(offset, limit, iId,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndGuid(offset, limit, iId,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndMenuOrder(offset, limit, iId,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndPostType(offset, limit, iId,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndPostMimeType(offset, limit, iId,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostNameAndCommentCount(offset, limit, iId,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPingAndPinged(offset, limit, iId,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPingAndPostModified(offset, limit, iId,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPingAndPostModifiedGmt(offset, limit, iId,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPingAndPostContentFiltered(offset, limit, iId,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPingAndPostParent(offset, limit, iId,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPingAndGuid(offset, limit, iId,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPingAndMenuOrder(offset, limit, iId,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPingAndPostType(offset, limit, iId,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPingAndPostMimeType(offset, limit, iId,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPingAndCommentCount(offset, limit, iId,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingedAndPostModified(offset, limit, iId,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingedAndPostModifiedGmt(offset, limit, iId,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingedAndPostContentFiltered(offset, limit, iId,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingedAndPostParent(offset, limit, iId,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingedAndGuid(offset, limit, iId,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingedAndMenuOrder(offset, limit, iId,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingedAndPostType(offset, limit, iId,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingedAndPostMimeType(offset, limit, iId,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingedAndCommentCount(offset, limit, iId,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedAndPostModifiedGmt(offset, limit, iId,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedAndPostContentFiltered(offset, limit, iId,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedAndPostParent(offset, limit, iId,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedAndGuid(offset, limit, iId,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedAndMenuOrder(offset, limit, iId,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedAndPostType(offset, limit, iId,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedAndPostMimeType(offset, limit, iId,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedAndCommentCount(offset, limit, iId,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedGmtAndPostContentFiltered(offset, limit, iId,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedGmtAndPostParent(offset, limit, iId,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedGmtAndGuid(offset, limit, iId,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedGmtAndMenuOrder(offset, limit, iId,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedGmtAndPostType(offset, limit, iId,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedGmtAndPostMimeType(offset, limit, iId,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedGmtAndCommentCount(offset, limit, iId,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentFilteredAndPostParent(offset, limit, iId,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentFilteredAndGuid(offset, limit, iId,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentFilteredAndMenuOrder(offset, limit, iId,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentFilteredAndPostType(offset, limit, iId,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentFilteredAndPostMimeType(offset, limit, iId,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentFilteredAndCommentCount(offset, limit, iId,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostParentAndGuid(offset, limit, iId,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostParentAndMenuOrder(offset, limit, iId,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostParentAndPostType(offset, limit, iId,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostParentAndPostMimeType(offset, limit, iId,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostParentAndCommentCount(offset, limit, iId,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndGuidAndMenuOrder(offset, limit, iId,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndGuidAndPostType(offset, limit, iId,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndGuidAndPostMimeType(offset, limit, iId,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndGuidAndCommentCount(offset, limit, iId,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndMenuOrderAndPostType(offset, limit, iId,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndMenuOrderAndPostMimeType(offset, limit, iId,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndMenuOrderAndCommentCount(offset, limit, iId,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTypeAndPostMimeType(offset, limit, iId,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTypeAndCommentCount(offset, limit, iId,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostMimeTypeAndCommentCount(offset, limit, iId,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostDateGmt(offset, limit, iPostAuthor,iPostDate,iPostDateGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostDateGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostContent(offset, limit, iPostAuthor,iPostDate,iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostTitle(offset, limit, iPostAuthor,iPostDate,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostExcerpt(offset, limit, iPostAuthor,iPostDate,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostStatus(offset, limit, iPostAuthor,iPostDate,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndCommentStatus(offset, limit, iPostAuthor,iPostDate,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPingStatus(offset, limit, iPostAuthor,iPostDate,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostPassword(offset, limit, iPostAuthor,iPostDate,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostName(offset, limit, iPostAuthor,iPostDate,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndToPing(offset, limit, iPostAuthor,iPostDate,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPinged(offset, limit, iPostAuthor,iPostDate,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostModified(offset, limit, iPostAuthor,iPostDate,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostModifiedGmt(offset, limit, iPostAuthor,iPostDate,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostContentFiltered(offset, limit, iPostAuthor,iPostDate,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostParent(offset, limit, iPostAuthor,iPostDate,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndGuid(offset, limit, iPostAuthor,iPostDate,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndMenuOrder(offset, limit, iPostAuthor,iPostDate,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostType(offset, limit, iPostAuthor,iPostDate,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndPostMimeType(offset, limit, iPostAuthor,iPostDate,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateAndCommentCount(offset, limit, iPostAuthor,iPostDate,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostContent(offset, limit, iPostAuthor,iPostDateGmt,iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostTitle(offset, limit, iPostAuthor,iPostDateGmt,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostExcerpt(offset, limit, iPostAuthor,iPostDateGmt,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostStatus(offset, limit, iPostAuthor,iPostDateGmt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndCommentStatus(offset, limit, iPostAuthor,iPostDateGmt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPingStatus(offset, limit, iPostAuthor,iPostDateGmt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostPassword(offset, limit, iPostAuthor,iPostDateGmt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostName(offset, limit, iPostAuthor,iPostDateGmt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndToPing(offset, limit, iPostAuthor,iPostDateGmt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPinged(offset, limit, iPostAuthor,iPostDateGmt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostModified(offset, limit, iPostAuthor,iPostDateGmt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostModifiedGmt(offset, limit, iPostAuthor,iPostDateGmt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostContentFiltered(offset, limit, iPostAuthor,iPostDateGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostParent(offset, limit, iPostAuthor,iPostDateGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndGuid(offset, limit, iPostAuthor,iPostDateGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndMenuOrder(offset, limit, iPostAuthor,iPostDateGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostType(offset, limit, iPostAuthor,iPostDateGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndPostMimeType(offset, limit, iPostAuthor,iPostDateGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmtAndCommentCount(offset, limit, iPostAuthor,iPostDateGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostTitle(offset, limit, iPostAuthor,iPostContent,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostExcerpt(offset, limit, iPostAuthor,iPostContent,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostStatus(offset, limit, iPostAuthor,iPostContent,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndCommentStatus(offset, limit, iPostAuthor,iPostContent,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPingStatus(offset, limit, iPostAuthor,iPostContent,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostPassword(offset, limit, iPostAuthor,iPostContent,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostName(offset, limit, iPostAuthor,iPostContent,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndToPing(offset, limit, iPostAuthor,iPostContent,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPinged(offset, limit, iPostAuthor,iPostContent,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostModified(offset, limit, iPostAuthor,iPostContent,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostModifiedGmt(offset, limit, iPostAuthor,iPostContent,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostContentFiltered(offset, limit, iPostAuthor,iPostContent,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostParent(offset, limit, iPostAuthor,iPostContent,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndGuid(offset, limit, iPostAuthor,iPostContent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndMenuOrder(offset, limit, iPostAuthor,iPostContent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostType(offset, limit, iPostAuthor,iPostContent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndPostMimeType(offset, limit, iPostAuthor,iPostContent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentAndCommentCount(offset, limit, iPostAuthor,iPostContent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPostExcerpt(offset, limit, iPostAuthor,iPostTitle,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPostStatus(offset, limit, iPostAuthor,iPostTitle,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndCommentStatus(offset, limit, iPostAuthor,iPostTitle,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPingStatus(offset, limit, iPostAuthor,iPostTitle,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPostPassword(offset, limit, iPostAuthor,iPostTitle,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPostName(offset, limit, iPostAuthor,iPostTitle,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndToPing(offset, limit, iPostAuthor,iPostTitle,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPinged(offset, limit, iPostAuthor,iPostTitle,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPostModified(offset, limit, iPostAuthor,iPostTitle,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPostModifiedGmt(offset, limit, iPostAuthor,iPostTitle,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPostContentFiltered(offset, limit, iPostAuthor,iPostTitle,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPostParent(offset, limit, iPostAuthor,iPostTitle,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndGuid(offset, limit, iPostAuthor,iPostTitle,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndMenuOrder(offset, limit, iPostAuthor,iPostTitle,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPostType(offset, limit, iPostAuthor,iPostTitle,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndPostMimeType(offset, limit, iPostAuthor,iPostTitle,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitleAndCommentCount(offset, limit, iPostAuthor,iPostTitle,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitleAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPostStatus(offset, limit, iPostAuthor,iPostExcerpt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndCommentStatus(offset, limit, iPostAuthor,iPostExcerpt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPingStatus(offset, limit, iPostAuthor,iPostExcerpt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPostPassword(offset, limit, iPostAuthor,iPostExcerpt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPostName(offset, limit, iPostAuthor,iPostExcerpt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndToPing(offset, limit, iPostAuthor,iPostExcerpt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPinged(offset, limit, iPostAuthor,iPostExcerpt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPostModified(offset, limit, iPostAuthor,iPostExcerpt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPostModifiedGmt(offset, limit, iPostAuthor,iPostExcerpt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPostContentFiltered(offset, limit, iPostAuthor,iPostExcerpt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPostParent(offset, limit, iPostAuthor,iPostExcerpt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndGuid(offset, limit, iPostAuthor,iPostExcerpt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndMenuOrder(offset, limit, iPostAuthor,iPostExcerpt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPostType(offset, limit, iPostAuthor,iPostExcerpt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndPostMimeType(offset, limit, iPostAuthor,iPostExcerpt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerptAndCommentCount(offset, limit, iPostAuthor,iPostExcerpt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerptAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndCommentStatus(offset, limit, iPostAuthor,iPostStatus,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndPingStatus(offset, limit, iPostAuthor,iPostStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndPostPassword(offset, limit, iPostAuthor,iPostStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndPostName(offset, limit, iPostAuthor,iPostStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndToPing(offset, limit, iPostAuthor,iPostStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndPinged(offset, limit, iPostAuthor,iPostStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndPostModified(offset, limit, iPostAuthor,iPostStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndPostModifiedGmt(offset, limit, iPostAuthor,iPostStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndPostContentFiltered(offset, limit, iPostAuthor,iPostStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndPostParent(offset, limit, iPostAuthor,iPostStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndGuid(offset, limit, iPostAuthor,iPostStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndMenuOrder(offset, limit, iPostAuthor,iPostStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndPostType(offset, limit, iPostAuthor,iPostStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndPostMimeType(offset, limit, iPostAuthor,iPostStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatusAndCommentCount(offset, limit, iPostAuthor,iPostStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndPingStatus(offset, limit, iPostAuthor,iCommentStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndPostPassword(offset, limit, iPostAuthor,iCommentStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndPostName(offset, limit, iPostAuthor,iCommentStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndToPing(offset, limit, iPostAuthor,iCommentStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndPinged(offset, limit, iPostAuthor,iCommentStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndPostModified(offset, limit, iPostAuthor,iCommentStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndPostModifiedGmt(offset, limit, iPostAuthor,iCommentStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndPostContentFiltered(offset, limit, iPostAuthor,iCommentStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndPostParent(offset, limit, iPostAuthor,iCommentStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndGuid(offset, limit, iPostAuthor,iCommentStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndMenuOrder(offset, limit, iPostAuthor,iCommentStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndPostType(offset, limit, iPostAuthor,iCommentStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndPostMimeType(offset, limit, iPostAuthor,iCommentStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatusAndCommentCount(offset, limit, iPostAuthor,iCommentStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndPostPassword(offset, limit, iPostAuthor,iPingStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndPostName(offset, limit, iPostAuthor,iPingStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndToPing(offset, limit, iPostAuthor,iPingStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndPinged(offset, limit, iPostAuthor,iPingStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndPostModified(offset, limit, iPostAuthor,iPingStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndPostModifiedGmt(offset, limit, iPostAuthor,iPingStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndPostContentFiltered(offset, limit, iPostAuthor,iPingStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndPostParent(offset, limit, iPostAuthor,iPingStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndGuid(offset, limit, iPostAuthor,iPingStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndMenuOrder(offset, limit, iPostAuthor,iPingStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndPostType(offset, limit, iPostAuthor,iPingStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndPostMimeType(offset, limit, iPostAuthor,iPingStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatusAndCommentCount(offset, limit, iPostAuthor,iPingStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndPostName(offset, limit, iPostAuthor,iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndToPing(offset, limit, iPostAuthor,iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndPinged(offset, limit, iPostAuthor,iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndPostModified(offset, limit, iPostAuthor,iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndPostModifiedGmt(offset, limit, iPostAuthor,iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndPostContentFiltered(offset, limit, iPostAuthor,iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndPostParent(offset, limit, iPostAuthor,iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndGuid(offset, limit, iPostAuthor,iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndMenuOrder(offset, limit, iPostAuthor,iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndPostType(offset, limit, iPostAuthor,iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndPostMimeType(offset, limit, iPostAuthor,iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPasswordAndCommentCount(offset, limit, iPostAuthor,iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndToPing(offset, limit, iPostAuthor,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndPinged(offset, limit, iPostAuthor,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndPostModified(offset, limit, iPostAuthor,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndPostModifiedGmt(offset, limit, iPostAuthor,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndPostContentFiltered(offset, limit, iPostAuthor,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndPostParent(offset, limit, iPostAuthor,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndGuid(offset, limit, iPostAuthor,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndMenuOrder(offset, limit, iPostAuthor,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndPostType(offset, limit, iPostAuthor,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndPostMimeType(offset, limit, iPostAuthor,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostNameAndCommentCount(offset, limit, iPostAuthor,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPingAndPinged(offset, limit, iPostAuthor,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPingAndPostModified(offset, limit, iPostAuthor,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPingAndPostModifiedGmt(offset, limit, iPostAuthor,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPingAndPostContentFiltered(offset, limit, iPostAuthor,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPingAndPostParent(offset, limit, iPostAuthor,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPingAndGuid(offset, limit, iPostAuthor,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPingAndMenuOrder(offset, limit, iPostAuthor,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPingAndPostType(offset, limit, iPostAuthor,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPingAndPostMimeType(offset, limit, iPostAuthor,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPingAndCommentCount(offset, limit, iPostAuthor,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingedAndPostModified(offset, limit, iPostAuthor,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingedAndPostModifiedGmt(offset, limit, iPostAuthor,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingedAndPostContentFiltered(offset, limit, iPostAuthor,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingedAndPostParent(offset, limit, iPostAuthor,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingedAndGuid(offset, limit, iPostAuthor,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingedAndMenuOrder(offset, limit, iPostAuthor,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingedAndPostType(offset, limit, iPostAuthor,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingedAndPostMimeType(offset, limit, iPostAuthor,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingedAndCommentCount(offset, limit, iPostAuthor,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedAndPostModifiedGmt(offset, limit, iPostAuthor,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedAndPostContentFiltered(offset, limit, iPostAuthor,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedAndPostParent(offset, limit, iPostAuthor,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedAndGuid(offset, limit, iPostAuthor,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedAndMenuOrder(offset, limit, iPostAuthor,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedAndPostType(offset, limit, iPostAuthor,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedAndPostMimeType(offset, limit, iPostAuthor,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedAndCommentCount(offset, limit, iPostAuthor,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPostAuthor,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedGmtAndPostParent(offset, limit, iPostAuthor,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedGmtAndGuid(offset, limit, iPostAuthor,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedGmtAndMenuOrder(offset, limit, iPostAuthor,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedGmtAndPostType(offset, limit, iPostAuthor,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedGmtAndPostMimeType(offset, limit, iPostAuthor,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedGmtAndCommentCount(offset, limit, iPostAuthor,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentFilteredAndPostParent(offset, limit, iPostAuthor,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentFilteredAndGuid(offset, limit, iPostAuthor,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentFilteredAndMenuOrder(offset, limit, iPostAuthor,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentFilteredAndPostType(offset, limit, iPostAuthor,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentFilteredAndPostMimeType(offset, limit, iPostAuthor,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentFilteredAndCommentCount(offset, limit, iPostAuthor,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostParentAndGuid(offset, limit, iPostAuthor,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostParentAndMenuOrder(offset, limit, iPostAuthor,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostParentAndPostType(offset, limit, iPostAuthor,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostParentAndPostMimeType(offset, limit, iPostAuthor,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostParentAndCommentCount(offset, limit, iPostAuthor,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndGuidAndMenuOrder(offset, limit, iPostAuthor,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndGuidAndPostType(offset, limit, iPostAuthor,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndGuidAndPostMimeType(offset, limit, iPostAuthor,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndGuidAndCommentCount(offset, limit, iPostAuthor,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndMenuOrderAndPostType(offset, limit, iPostAuthor,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndMenuOrderAndPostMimeType(offset, limit, iPostAuthor,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndMenuOrderAndCommentCount(offset, limit, iPostAuthor,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTypeAndPostMimeType(offset, limit, iPostAuthor,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTypeAndCommentCount(offset, limit, iPostAuthor,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostMimeTypeAndCommentCount(offset, limit, iPostAuthor,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostContent(offset, limit, iPostDate,iPostDateGmt,iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostTitle(offset, limit, iPostDate,iPostDateGmt,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostExcerpt(offset, limit, iPostDate,iPostDateGmt,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostStatus(offset, limit, iPostDate,iPostDateGmt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndCommentStatus(offset, limit, iPostDate,iPostDateGmt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPingStatus(offset, limit, iPostDate,iPostDateGmt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostPassword(offset, limit, iPostDate,iPostDateGmt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostName(offset, limit, iPostDate,iPostDateGmt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndToPing(offset, limit, iPostDate,iPostDateGmt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPinged(offset, limit, iPostDate,iPostDateGmt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostModified(offset, limit, iPostDate,iPostDateGmt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostModifiedGmt(offset, limit, iPostDate,iPostDateGmt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostContentFiltered(offset, limit, iPostDate,iPostDateGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostParent(offset, limit, iPostDate,iPostDateGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndGuid(offset, limit, iPostDate,iPostDateGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndMenuOrder(offset, limit, iPostDate,iPostDateGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostType(offset, limit, iPostDate,iPostDateGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndPostMimeType(offset, limit, iPostDate,iPostDateGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmtAndCommentCount(offset, limit, iPostDate,iPostDateGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostTitle(offset, limit, iPostDate,iPostContent,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostExcerpt(offset, limit, iPostDate,iPostContent,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostStatus(offset, limit, iPostDate,iPostContent,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndCommentStatus(offset, limit, iPostDate,iPostContent,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPingStatus(offset, limit, iPostDate,iPostContent,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostPassword(offset, limit, iPostDate,iPostContent,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostName(offset, limit, iPostDate,iPostContent,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndToPing(offset, limit, iPostDate,iPostContent,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPinged(offset, limit, iPostDate,iPostContent,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostModified(offset, limit, iPostDate,iPostContent,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostModifiedGmt(offset, limit, iPostDate,iPostContent,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostContentFiltered(offset, limit, iPostDate,iPostContent,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostParent(offset, limit, iPostDate,iPostContent,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndGuid(offset, limit, iPostDate,iPostContent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndMenuOrder(offset, limit, iPostDate,iPostContent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostType(offset, limit, iPostDate,iPostContent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndPostMimeType(offset, limit, iPostDate,iPostContent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentAndCommentCount(offset, limit, iPostDate,iPostContent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPostExcerpt(offset, limit, iPostDate,iPostTitle,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPostStatus(offset, limit, iPostDate,iPostTitle,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndCommentStatus(offset, limit, iPostDate,iPostTitle,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPingStatus(offset, limit, iPostDate,iPostTitle,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPostPassword(offset, limit, iPostDate,iPostTitle,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPostName(offset, limit, iPostDate,iPostTitle,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndToPing(offset, limit, iPostDate,iPostTitle,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPinged(offset, limit, iPostDate,iPostTitle,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPostModified(offset, limit, iPostDate,iPostTitle,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPostModifiedGmt(offset, limit, iPostDate,iPostTitle,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPostContentFiltered(offset, limit, iPostDate,iPostTitle,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPostParent(offset, limit, iPostDate,iPostTitle,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndGuid(offset, limit, iPostDate,iPostTitle,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndMenuOrder(offset, limit, iPostDate,iPostTitle,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPostType(offset, limit, iPostDate,iPostTitle,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndPostMimeType(offset, limit, iPostDate,iPostTitle,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitleAndCommentCount(offset, limit, iPostDate,iPostTitle,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitleAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPostStatus(offset, limit, iPostDate,iPostExcerpt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndCommentStatus(offset, limit, iPostDate,iPostExcerpt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPingStatus(offset, limit, iPostDate,iPostExcerpt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPostPassword(offset, limit, iPostDate,iPostExcerpt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPostName(offset, limit, iPostDate,iPostExcerpt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndToPing(offset, limit, iPostDate,iPostExcerpt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPinged(offset, limit, iPostDate,iPostExcerpt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPostModified(offset, limit, iPostDate,iPostExcerpt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPostModifiedGmt(offset, limit, iPostDate,iPostExcerpt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPostContentFiltered(offset, limit, iPostDate,iPostExcerpt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPostParent(offset, limit, iPostDate,iPostExcerpt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndGuid(offset, limit, iPostDate,iPostExcerpt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndMenuOrder(offset, limit, iPostDate,iPostExcerpt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPostType(offset, limit, iPostDate,iPostExcerpt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndPostMimeType(offset, limit, iPostDate,iPostExcerpt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerptAndCommentCount(offset, limit, iPostDate,iPostExcerpt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerptAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndCommentStatus(offset, limit, iPostDate,iPostStatus,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndPingStatus(offset, limit, iPostDate,iPostStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndPostPassword(offset, limit, iPostDate,iPostStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndPostName(offset, limit, iPostDate,iPostStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndToPing(offset, limit, iPostDate,iPostStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndPinged(offset, limit, iPostDate,iPostStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndPostModified(offset, limit, iPostDate,iPostStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndPostModifiedGmt(offset, limit, iPostDate,iPostStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndPostContentFiltered(offset, limit, iPostDate,iPostStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndPostParent(offset, limit, iPostDate,iPostStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndGuid(offset, limit, iPostDate,iPostStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndMenuOrder(offset, limit, iPostDate,iPostStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndPostType(offset, limit, iPostDate,iPostStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndPostMimeType(offset, limit, iPostDate,iPostStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatusAndCommentCount(offset, limit, iPostDate,iPostStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndPingStatus(offset, limit, iPostDate,iCommentStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndPostPassword(offset, limit, iPostDate,iCommentStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndPostName(offset, limit, iPostDate,iCommentStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndToPing(offset, limit, iPostDate,iCommentStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndPinged(offset, limit, iPostDate,iCommentStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndPostModified(offset, limit, iPostDate,iCommentStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndPostModifiedGmt(offset, limit, iPostDate,iCommentStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndPostContentFiltered(offset, limit, iPostDate,iCommentStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndPostParent(offset, limit, iPostDate,iCommentStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndGuid(offset, limit, iPostDate,iCommentStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndMenuOrder(offset, limit, iPostDate,iCommentStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndPostType(offset, limit, iPostDate,iCommentStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndPostMimeType(offset, limit, iPostDate,iCommentStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatusAndCommentCount(offset, limit, iPostDate,iCommentStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndPostPassword(offset, limit, iPostDate,iPingStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndPostName(offset, limit, iPostDate,iPingStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndToPing(offset, limit, iPostDate,iPingStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndPinged(offset, limit, iPostDate,iPingStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndPostModified(offset, limit, iPostDate,iPingStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndPostModifiedGmt(offset, limit, iPostDate,iPingStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndPostContentFiltered(offset, limit, iPostDate,iPingStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndPostParent(offset, limit, iPostDate,iPingStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndGuid(offset, limit, iPostDate,iPingStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndMenuOrder(offset, limit, iPostDate,iPingStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndPostType(offset, limit, iPostDate,iPingStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndPostMimeType(offset, limit, iPostDate,iPingStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatusAndCommentCount(offset, limit, iPostDate,iPingStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndPostName(offset, limit, iPostDate,iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndToPing(offset, limit, iPostDate,iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndPinged(offset, limit, iPostDate,iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndPostModified(offset, limit, iPostDate,iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndPostModifiedGmt(offset, limit, iPostDate,iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndPostContentFiltered(offset, limit, iPostDate,iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndPostParent(offset, limit, iPostDate,iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndGuid(offset, limit, iPostDate,iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndMenuOrder(offset, limit, iPostDate,iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndPostType(offset, limit, iPostDate,iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndPostMimeType(offset, limit, iPostDate,iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPasswordAndCommentCount(offset, limit, iPostDate,iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndToPing(offset, limit, iPostDate,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndPinged(offset, limit, iPostDate,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndPostModified(offset, limit, iPostDate,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndPostModifiedGmt(offset, limit, iPostDate,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndPostContentFiltered(offset, limit, iPostDate,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndPostParent(offset, limit, iPostDate,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndGuid(offset, limit, iPostDate,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndMenuOrder(offset, limit, iPostDate,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndPostType(offset, limit, iPostDate,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndPostMimeType(offset, limit, iPostDate,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostNameAndCommentCount(offset, limit, iPostDate,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPingAndPinged(offset, limit, iPostDate,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPingAndPostModified(offset, limit, iPostDate,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPingAndPostModifiedGmt(offset, limit, iPostDate,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPingAndPostContentFiltered(offset, limit, iPostDate,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPingAndPostParent(offset, limit, iPostDate,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPingAndGuid(offset, limit, iPostDate,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPingAndMenuOrder(offset, limit, iPostDate,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPingAndPostType(offset, limit, iPostDate,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPingAndPostMimeType(offset, limit, iPostDate,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPingAndCommentCount(offset, limit, iPostDate,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingedAndPostModified(offset, limit, iPostDate,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingedAndPostModifiedGmt(offset, limit, iPostDate,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingedAndPostContentFiltered(offset, limit, iPostDate,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingedAndPostParent(offset, limit, iPostDate,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingedAndGuid(offset, limit, iPostDate,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingedAndMenuOrder(offset, limit, iPostDate,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingedAndPostType(offset, limit, iPostDate,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingedAndPostMimeType(offset, limit, iPostDate,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingedAndCommentCount(offset, limit, iPostDate,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedAndPostModifiedGmt(offset, limit, iPostDate,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedAndPostContentFiltered(offset, limit, iPostDate,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedAndPostParent(offset, limit, iPostDate,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedAndGuid(offset, limit, iPostDate,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedAndMenuOrder(offset, limit, iPostDate,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedAndPostType(offset, limit, iPostDate,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedAndPostMimeType(offset, limit, iPostDate,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedAndCommentCount(offset, limit, iPostDate,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPostDate,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedGmtAndPostParent(offset, limit, iPostDate,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedGmtAndGuid(offset, limit, iPostDate,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedGmtAndMenuOrder(offset, limit, iPostDate,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedGmtAndPostType(offset, limit, iPostDate,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedGmtAndPostMimeType(offset, limit, iPostDate,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedGmtAndCommentCount(offset, limit, iPostDate,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentFilteredAndPostParent(offset, limit, iPostDate,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentFilteredAndGuid(offset, limit, iPostDate,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentFilteredAndMenuOrder(offset, limit, iPostDate,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentFilteredAndPostType(offset, limit, iPostDate,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentFilteredAndPostMimeType(offset, limit, iPostDate,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentFilteredAndCommentCount(offset, limit, iPostDate,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostParentAndGuid(offset, limit, iPostDate,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostParentAndMenuOrder(offset, limit, iPostDate,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostParentAndPostType(offset, limit, iPostDate,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostParentAndPostMimeType(offset, limit, iPostDate,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostParentAndCommentCount(offset, limit, iPostDate,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndGuidAndMenuOrder(offset, limit, iPostDate,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndGuidAndPostType(offset, limit, iPostDate,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndGuidAndPostMimeType(offset, limit, iPostDate,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndGuidAndCommentCount(offset, limit, iPostDate,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndMenuOrderAndPostType(offset, limit, iPostDate,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndMenuOrderAndPostMimeType(offset, limit, iPostDate,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndMenuOrderAndCommentCount(offset, limit, iPostDate,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTypeAndPostMimeType(offset, limit, iPostDate,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTypeAndCommentCount(offset, limit, iPostDate,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostMimeTypeAndCommentCount(offset, limit, iPostDate,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostTitle(offset, limit, iPostDateGmt,iPostContent,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostExcerpt(offset, limit, iPostDateGmt,iPostContent,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostStatus(offset, limit, iPostDateGmt,iPostContent,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndCommentStatus(offset, limit, iPostDateGmt,iPostContent,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPingStatus(offset, limit, iPostDateGmt,iPostContent,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostPassword(offset, limit, iPostDateGmt,iPostContent,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostName(offset, limit, iPostDateGmt,iPostContent,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndToPing(offset, limit, iPostDateGmt,iPostContent,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPinged(offset, limit, iPostDateGmt,iPostContent,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostModified(offset, limit, iPostDateGmt,iPostContent,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostModifiedGmt(offset, limit, iPostDateGmt,iPostContent,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostContentFiltered(offset, limit, iPostDateGmt,iPostContent,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostParent(offset, limit, iPostDateGmt,iPostContent,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndGuid(offset, limit, iPostDateGmt,iPostContent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndMenuOrder(offset, limit, iPostDateGmt,iPostContent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostType(offset, limit, iPostDateGmt,iPostContent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndPostMimeType(offset, limit, iPostDateGmt,iPostContent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentAndCommentCount(offset, limit, iPostDateGmt,iPostContent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPostExcerpt(offset, limit, iPostDateGmt,iPostTitle,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPostStatus(offset, limit, iPostDateGmt,iPostTitle,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndCommentStatus(offset, limit, iPostDateGmt,iPostTitle,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPingStatus(offset, limit, iPostDateGmt,iPostTitle,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPostPassword(offset, limit, iPostDateGmt,iPostTitle,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPostName(offset, limit, iPostDateGmt,iPostTitle,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndToPing(offset, limit, iPostDateGmt,iPostTitle,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPinged(offset, limit, iPostDateGmt,iPostTitle,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPostModified(offset, limit, iPostDateGmt,iPostTitle,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPostModifiedGmt(offset, limit, iPostDateGmt,iPostTitle,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPostContentFiltered(offset, limit, iPostDateGmt,iPostTitle,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPostParent(offset, limit, iPostDateGmt,iPostTitle,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndGuid(offset, limit, iPostDateGmt,iPostTitle,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndMenuOrder(offset, limit, iPostDateGmt,iPostTitle,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPostType(offset, limit, iPostDateGmt,iPostTitle,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndPostMimeType(offset, limit, iPostDateGmt,iPostTitle,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitleAndCommentCount(offset, limit, iPostDateGmt,iPostTitle,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitleAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPostStatus(offset, limit, iPostDateGmt,iPostExcerpt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndCommentStatus(offset, limit, iPostDateGmt,iPostExcerpt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPingStatus(offset, limit, iPostDateGmt,iPostExcerpt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPostPassword(offset, limit, iPostDateGmt,iPostExcerpt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPostName(offset, limit, iPostDateGmt,iPostExcerpt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndToPing(offset, limit, iPostDateGmt,iPostExcerpt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPinged(offset, limit, iPostDateGmt,iPostExcerpt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPostModified(offset, limit, iPostDateGmt,iPostExcerpt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPostModifiedGmt(offset, limit, iPostDateGmt,iPostExcerpt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPostContentFiltered(offset, limit, iPostDateGmt,iPostExcerpt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPostParent(offset, limit, iPostDateGmt,iPostExcerpt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndGuid(offset, limit, iPostDateGmt,iPostExcerpt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndMenuOrder(offset, limit, iPostDateGmt,iPostExcerpt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPostType(offset, limit, iPostDateGmt,iPostExcerpt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndPostMimeType(offset, limit, iPostDateGmt,iPostExcerpt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerptAndCommentCount(offset, limit, iPostDateGmt,iPostExcerpt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerptAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndCommentStatus(offset, limit, iPostDateGmt,iPostStatus,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndPingStatus(offset, limit, iPostDateGmt,iPostStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndPostPassword(offset, limit, iPostDateGmt,iPostStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndPostName(offset, limit, iPostDateGmt,iPostStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndToPing(offset, limit, iPostDateGmt,iPostStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndPinged(offset, limit, iPostDateGmt,iPostStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndPostModified(offset, limit, iPostDateGmt,iPostStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndPostModifiedGmt(offset, limit, iPostDateGmt,iPostStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndPostContentFiltered(offset, limit, iPostDateGmt,iPostStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndPostParent(offset, limit, iPostDateGmt,iPostStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndGuid(offset, limit, iPostDateGmt,iPostStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndMenuOrder(offset, limit, iPostDateGmt,iPostStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndPostType(offset, limit, iPostDateGmt,iPostStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndPostMimeType(offset, limit, iPostDateGmt,iPostStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatusAndCommentCount(offset, limit, iPostDateGmt,iPostStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndPingStatus(offset, limit, iPostDateGmt,iCommentStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndPostPassword(offset, limit, iPostDateGmt,iCommentStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndPostName(offset, limit, iPostDateGmt,iCommentStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndToPing(offset, limit, iPostDateGmt,iCommentStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndPinged(offset, limit, iPostDateGmt,iCommentStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndPostModified(offset, limit, iPostDateGmt,iCommentStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndPostModifiedGmt(offset, limit, iPostDateGmt,iCommentStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndPostContentFiltered(offset, limit, iPostDateGmt,iCommentStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndPostParent(offset, limit, iPostDateGmt,iCommentStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndGuid(offset, limit, iPostDateGmt,iCommentStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndMenuOrder(offset, limit, iPostDateGmt,iCommentStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndPostType(offset, limit, iPostDateGmt,iCommentStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndPostMimeType(offset, limit, iPostDateGmt,iCommentStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatusAndCommentCount(offset, limit, iPostDateGmt,iCommentStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndPostPassword(offset, limit, iPostDateGmt,iPingStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndPostName(offset, limit, iPostDateGmt,iPingStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndToPing(offset, limit, iPostDateGmt,iPingStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndPinged(offset, limit, iPostDateGmt,iPingStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndPostModified(offset, limit, iPostDateGmt,iPingStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndPostModifiedGmt(offset, limit, iPostDateGmt,iPingStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndPostContentFiltered(offset, limit, iPostDateGmt,iPingStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndPostParent(offset, limit, iPostDateGmt,iPingStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndGuid(offset, limit, iPostDateGmt,iPingStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndMenuOrder(offset, limit, iPostDateGmt,iPingStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndPostType(offset, limit, iPostDateGmt,iPingStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndPostMimeType(offset, limit, iPostDateGmt,iPingStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatusAndCommentCount(offset, limit, iPostDateGmt,iPingStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndPostName(offset, limit, iPostDateGmt,iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndToPing(offset, limit, iPostDateGmt,iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndPinged(offset, limit, iPostDateGmt,iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndPostModified(offset, limit, iPostDateGmt,iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndPostModifiedGmt(offset, limit, iPostDateGmt,iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndPostContentFiltered(offset, limit, iPostDateGmt,iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndPostParent(offset, limit, iPostDateGmt,iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndGuid(offset, limit, iPostDateGmt,iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndMenuOrder(offset, limit, iPostDateGmt,iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndPostType(offset, limit, iPostDateGmt,iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndPostMimeType(offset, limit, iPostDateGmt,iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPasswordAndCommentCount(offset, limit, iPostDateGmt,iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndToPing(offset, limit, iPostDateGmt,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndPinged(offset, limit, iPostDateGmt,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndPostModified(offset, limit, iPostDateGmt,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndPostModifiedGmt(offset, limit, iPostDateGmt,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndPostContentFiltered(offset, limit, iPostDateGmt,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndPostParent(offset, limit, iPostDateGmt,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndGuid(offset, limit, iPostDateGmt,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndMenuOrder(offset, limit, iPostDateGmt,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndPostType(offset, limit, iPostDateGmt,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndPostMimeType(offset, limit, iPostDateGmt,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostNameAndCommentCount(offset, limit, iPostDateGmt,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPingAndPinged(offset, limit, iPostDateGmt,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPingAndPostModified(offset, limit, iPostDateGmt,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPingAndPostModifiedGmt(offset, limit, iPostDateGmt,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPingAndPostContentFiltered(offset, limit, iPostDateGmt,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPingAndPostParent(offset, limit, iPostDateGmt,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPingAndGuid(offset, limit, iPostDateGmt,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPingAndMenuOrder(offset, limit, iPostDateGmt,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPingAndPostType(offset, limit, iPostDateGmt,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPingAndPostMimeType(offset, limit, iPostDateGmt,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPingAndCommentCount(offset, limit, iPostDateGmt,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingedAndPostModified(offset, limit, iPostDateGmt,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingedAndPostModifiedGmt(offset, limit, iPostDateGmt,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingedAndPostContentFiltered(offset, limit, iPostDateGmt,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingedAndPostParent(offset, limit, iPostDateGmt,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingedAndGuid(offset, limit, iPostDateGmt,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingedAndMenuOrder(offset, limit, iPostDateGmt,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingedAndPostType(offset, limit, iPostDateGmt,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingedAndPostMimeType(offset, limit, iPostDateGmt,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingedAndCommentCount(offset, limit, iPostDateGmt,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedAndPostModifiedGmt(offset, limit, iPostDateGmt,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedAndPostContentFiltered(offset, limit, iPostDateGmt,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedAndPostParent(offset, limit, iPostDateGmt,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedAndGuid(offset, limit, iPostDateGmt,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedAndMenuOrder(offset, limit, iPostDateGmt,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedAndPostType(offset, limit, iPostDateGmt,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedAndPostMimeType(offset, limit, iPostDateGmt,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedAndCommentCount(offset, limit, iPostDateGmt,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPostDateGmt,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedGmtAndPostParent(offset, limit, iPostDateGmt,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedGmtAndGuid(offset, limit, iPostDateGmt,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedGmtAndMenuOrder(offset, limit, iPostDateGmt,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedGmtAndPostType(offset, limit, iPostDateGmt,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedGmtAndPostMimeType(offset, limit, iPostDateGmt,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedGmtAndCommentCount(offset, limit, iPostDateGmt,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentFilteredAndPostParent(offset, limit, iPostDateGmt,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentFilteredAndGuid(offset, limit, iPostDateGmt,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentFilteredAndMenuOrder(offset, limit, iPostDateGmt,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentFilteredAndPostType(offset, limit, iPostDateGmt,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentFilteredAndPostMimeType(offset, limit, iPostDateGmt,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentFilteredAndCommentCount(offset, limit, iPostDateGmt,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostParentAndGuid(offset, limit, iPostDateGmt,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostParentAndMenuOrder(offset, limit, iPostDateGmt,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostParentAndPostType(offset, limit, iPostDateGmt,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostParentAndPostMimeType(offset, limit, iPostDateGmt,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostParentAndCommentCount(offset, limit, iPostDateGmt,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndGuidAndMenuOrder(offset, limit, iPostDateGmt,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndGuidAndPostType(offset, limit, iPostDateGmt,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndGuidAndPostMimeType(offset, limit, iPostDateGmt,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndGuidAndCommentCount(offset, limit, iPostDateGmt,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndMenuOrderAndPostType(offset, limit, iPostDateGmt,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndMenuOrderAndPostMimeType(offset, limit, iPostDateGmt,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndMenuOrderAndCommentCount(offset, limit, iPostDateGmt,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTypeAndPostMimeType(offset, limit, iPostDateGmt,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTypeAndCommentCount(offset, limit, iPostDateGmt,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostMimeTypeAndCommentCount(offset, limit, iPostDateGmt,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPostExcerpt(offset, limit, iPostContent,iPostTitle,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPostStatus(offset, limit, iPostContent,iPostTitle,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndCommentStatus(offset, limit, iPostContent,iPostTitle,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPingStatus(offset, limit, iPostContent,iPostTitle,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPostPassword(offset, limit, iPostContent,iPostTitle,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPostName(offset, limit, iPostContent,iPostTitle,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndToPing(offset, limit, iPostContent,iPostTitle,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPinged(offset, limit, iPostContent,iPostTitle,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPostModified(offset, limit, iPostContent,iPostTitle,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPostModifiedGmt(offset, limit, iPostContent,iPostTitle,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPostContentFiltered(offset, limit, iPostContent,iPostTitle,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPostParent(offset, limit, iPostContent,iPostTitle,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndGuid(offset, limit, iPostContent,iPostTitle,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndMenuOrder(offset, limit, iPostContent,iPostTitle,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPostType(offset, limit, iPostContent,iPostTitle,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndPostMimeType(offset, limit, iPostContent,iPostTitle,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitleAndCommentCount(offset, limit, iPostContent,iPostTitle,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitleAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPostStatus(offset, limit, iPostContent,iPostExcerpt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndCommentStatus(offset, limit, iPostContent,iPostExcerpt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPingStatus(offset, limit, iPostContent,iPostExcerpt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPostPassword(offset, limit, iPostContent,iPostExcerpt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPostName(offset, limit, iPostContent,iPostExcerpt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndToPing(offset, limit, iPostContent,iPostExcerpt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPinged(offset, limit, iPostContent,iPostExcerpt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPostModified(offset, limit, iPostContent,iPostExcerpt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPostModifiedGmt(offset, limit, iPostContent,iPostExcerpt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPostContentFiltered(offset, limit, iPostContent,iPostExcerpt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPostParent(offset, limit, iPostContent,iPostExcerpt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndGuid(offset, limit, iPostContent,iPostExcerpt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndMenuOrder(offset, limit, iPostContent,iPostExcerpt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPostType(offset, limit, iPostContent,iPostExcerpt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndPostMimeType(offset, limit, iPostContent,iPostExcerpt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerptAndCommentCount(offset, limit, iPostContent,iPostExcerpt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerptAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndCommentStatus(offset, limit, iPostContent,iPostStatus,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndPingStatus(offset, limit, iPostContent,iPostStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndPostPassword(offset, limit, iPostContent,iPostStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndPostName(offset, limit, iPostContent,iPostStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndToPing(offset, limit, iPostContent,iPostStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndPinged(offset, limit, iPostContent,iPostStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndPostModified(offset, limit, iPostContent,iPostStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndPostModifiedGmt(offset, limit, iPostContent,iPostStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndPostContentFiltered(offset, limit, iPostContent,iPostStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndPostParent(offset, limit, iPostContent,iPostStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndGuid(offset, limit, iPostContent,iPostStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndMenuOrder(offset, limit, iPostContent,iPostStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndPostType(offset, limit, iPostContent,iPostStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndPostMimeType(offset, limit, iPostContent,iPostStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatusAndCommentCount(offset, limit, iPostContent,iPostStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndPingStatus(offset, limit, iPostContent,iCommentStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndPostPassword(offset, limit, iPostContent,iCommentStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndPostName(offset, limit, iPostContent,iCommentStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndToPing(offset, limit, iPostContent,iCommentStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndPinged(offset, limit, iPostContent,iCommentStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndPostModified(offset, limit, iPostContent,iCommentStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndPostModifiedGmt(offset, limit, iPostContent,iCommentStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndPostContentFiltered(offset, limit, iPostContent,iCommentStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndPostParent(offset, limit, iPostContent,iCommentStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndGuid(offset, limit, iPostContent,iCommentStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndMenuOrder(offset, limit, iPostContent,iCommentStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndPostType(offset, limit, iPostContent,iCommentStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndPostMimeType(offset, limit, iPostContent,iCommentStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatusAndCommentCount(offset, limit, iPostContent,iCommentStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndPostPassword(offset, limit, iPostContent,iPingStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndPostName(offset, limit, iPostContent,iPingStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndToPing(offset, limit, iPostContent,iPingStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndPinged(offset, limit, iPostContent,iPingStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndPostModified(offset, limit, iPostContent,iPingStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndPostModifiedGmt(offset, limit, iPostContent,iPingStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndPostContentFiltered(offset, limit, iPostContent,iPingStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndPostParent(offset, limit, iPostContent,iPingStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndGuid(offset, limit, iPostContent,iPingStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndMenuOrder(offset, limit, iPostContent,iPingStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndPostType(offset, limit, iPostContent,iPingStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndPostMimeType(offset, limit, iPostContent,iPingStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatusAndCommentCount(offset, limit, iPostContent,iPingStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndPostName(offset, limit, iPostContent,iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndToPing(offset, limit, iPostContent,iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndPinged(offset, limit, iPostContent,iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndPostModified(offset, limit, iPostContent,iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndPostModifiedGmt(offset, limit, iPostContent,iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndPostContentFiltered(offset, limit, iPostContent,iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndPostParent(offset, limit, iPostContent,iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndGuid(offset, limit, iPostContent,iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndMenuOrder(offset, limit, iPostContent,iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndPostType(offset, limit, iPostContent,iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndPostMimeType(offset, limit, iPostContent,iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPasswordAndCommentCount(offset, limit, iPostContent,iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndToPing(offset, limit, iPostContent,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndPinged(offset, limit, iPostContent,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndPostModified(offset, limit, iPostContent,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndPostModifiedGmt(offset, limit, iPostContent,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndPostContentFiltered(offset, limit, iPostContent,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndPostParent(offset, limit, iPostContent,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndGuid(offset, limit, iPostContent,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndMenuOrder(offset, limit, iPostContent,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndPostType(offset, limit, iPostContent,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndPostMimeType(offset, limit, iPostContent,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostNameAndCommentCount(offset, limit, iPostContent,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPingAndPinged(offset, limit, iPostContent,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPingAndPostModified(offset, limit, iPostContent,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPingAndPostModifiedGmt(offset, limit, iPostContent,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPingAndPostContentFiltered(offset, limit, iPostContent,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPingAndPostParent(offset, limit, iPostContent,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPingAndGuid(offset, limit, iPostContent,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPingAndMenuOrder(offset, limit, iPostContent,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPingAndPostType(offset, limit, iPostContent,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPingAndPostMimeType(offset, limit, iPostContent,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPingAndCommentCount(offset, limit, iPostContent,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingedAndPostModified(offset, limit, iPostContent,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingedAndPostModifiedGmt(offset, limit, iPostContent,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingedAndPostContentFiltered(offset, limit, iPostContent,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingedAndPostParent(offset, limit, iPostContent,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingedAndGuid(offset, limit, iPostContent,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingedAndMenuOrder(offset, limit, iPostContent,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingedAndPostType(offset, limit, iPostContent,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingedAndPostMimeType(offset, limit, iPostContent,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingedAndCommentCount(offset, limit, iPostContent,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedAndPostModifiedGmt(offset, limit, iPostContent,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedAndPostContentFiltered(offset, limit, iPostContent,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedAndPostParent(offset, limit, iPostContent,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedAndGuid(offset, limit, iPostContent,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedAndMenuOrder(offset, limit, iPostContent,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedAndPostType(offset, limit, iPostContent,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedAndPostMimeType(offset, limit, iPostContent,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedAndCommentCount(offset, limit, iPostContent,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPostContent,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedGmtAndPostParent(offset, limit, iPostContent,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedGmtAndGuid(offset, limit, iPostContent,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedGmtAndMenuOrder(offset, limit, iPostContent,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedGmtAndPostType(offset, limit, iPostContent,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedGmtAndPostMimeType(offset, limit, iPostContent,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedGmtAndCommentCount(offset, limit, iPostContent,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostContentFilteredAndPostParent(offset, limit, iPostContent,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostContentFilteredAndGuid(offset, limit, iPostContent,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostContentFilteredAndMenuOrder(offset, limit, iPostContent,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostContentFilteredAndPostType(offset, limit, iPostContent,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostContentFilteredAndPostMimeType(offset, limit, iPostContent,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostContentFilteredAndCommentCount(offset, limit, iPostContent,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostParentAndGuid(offset, limit, iPostContent,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostParentAndMenuOrder(offset, limit, iPostContent,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostParentAndPostType(offset, limit, iPostContent,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostParentAndPostMimeType(offset, limit, iPostContent,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostParentAndCommentCount(offset, limit, iPostContent,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndGuidAndMenuOrder(offset, limit, iPostContent,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndGuidAndPostType(offset, limit, iPostContent,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndGuidAndPostMimeType(offset, limit, iPostContent,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndGuidAndCommentCount(offset, limit, iPostContent,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndMenuOrderAndPostType(offset, limit, iPostContent,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndMenuOrderAndPostMimeType(offset, limit, iPostContent,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndMenuOrderAndCommentCount(offset, limit, iPostContent,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTypeAndPostMimeType(offset, limit, iPostContent,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTypeAndCommentCount(offset, limit, iPostContent,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostMimeTypeAndCommentCount(offset, limit, iPostContent,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPostStatus(offset, limit, iPostTitle,iPostExcerpt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndCommentStatus(offset, limit, iPostTitle,iPostExcerpt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPingStatus(offset, limit, iPostTitle,iPostExcerpt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPostPassword(offset, limit, iPostTitle,iPostExcerpt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPostName(offset, limit, iPostTitle,iPostExcerpt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndToPing(offset, limit, iPostTitle,iPostExcerpt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPinged(offset, limit, iPostTitle,iPostExcerpt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPostModified(offset, limit, iPostTitle,iPostExcerpt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPostModifiedGmt(offset, limit, iPostTitle,iPostExcerpt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPostContentFiltered(offset, limit, iPostTitle,iPostExcerpt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPostParent(offset, limit, iPostTitle,iPostExcerpt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndGuid(offset, limit, iPostTitle,iPostExcerpt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndMenuOrder(offset, limit, iPostTitle,iPostExcerpt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPostType(offset, limit, iPostTitle,iPostExcerpt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndPostMimeType(offset, limit, iPostTitle,iPostExcerpt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerptAndCommentCount(offset, limit, iPostTitle,iPostExcerpt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerptAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndCommentStatus(offset, limit, iPostTitle,iPostStatus,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndPingStatus(offset, limit, iPostTitle,iPostStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndPostPassword(offset, limit, iPostTitle,iPostStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndPostName(offset, limit, iPostTitle,iPostStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndToPing(offset, limit, iPostTitle,iPostStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndPinged(offset, limit, iPostTitle,iPostStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndPostModified(offset, limit, iPostTitle,iPostStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndPostModifiedGmt(offset, limit, iPostTitle,iPostStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndPostContentFiltered(offset, limit, iPostTitle,iPostStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndPostParent(offset, limit, iPostTitle,iPostStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndGuid(offset, limit, iPostTitle,iPostStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndMenuOrder(offset, limit, iPostTitle,iPostStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndPostType(offset, limit, iPostTitle,iPostStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndPostMimeType(offset, limit, iPostTitle,iPostStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatusAndCommentCount(offset, limit, iPostTitle,iPostStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndPingStatus(offset, limit, iPostTitle,iCommentStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndPostPassword(offset, limit, iPostTitle,iCommentStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndPostName(offset, limit, iPostTitle,iCommentStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndToPing(offset, limit, iPostTitle,iCommentStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndPinged(offset, limit, iPostTitle,iCommentStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndPostModified(offset, limit, iPostTitle,iCommentStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndPostModifiedGmt(offset, limit, iPostTitle,iCommentStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndPostContentFiltered(offset, limit, iPostTitle,iCommentStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndPostParent(offset, limit, iPostTitle,iCommentStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndGuid(offset, limit, iPostTitle,iCommentStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndMenuOrder(offset, limit, iPostTitle,iCommentStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndPostType(offset, limit, iPostTitle,iCommentStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndPostMimeType(offset, limit, iPostTitle,iCommentStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatusAndCommentCount(offset, limit, iPostTitle,iCommentStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndPostPassword(offset, limit, iPostTitle,iPingStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndPostName(offset, limit, iPostTitle,iPingStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndToPing(offset, limit, iPostTitle,iPingStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndPinged(offset, limit, iPostTitle,iPingStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndPostModified(offset, limit, iPostTitle,iPingStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndPostModifiedGmt(offset, limit, iPostTitle,iPingStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndPostContentFiltered(offset, limit, iPostTitle,iPingStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndPostParent(offset, limit, iPostTitle,iPingStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndGuid(offset, limit, iPostTitle,iPingStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndMenuOrder(offset, limit, iPostTitle,iPingStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndPostType(offset, limit, iPostTitle,iPingStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndPostMimeType(offset, limit, iPostTitle,iPingStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatusAndCommentCount(offset, limit, iPostTitle,iPingStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndPostName(offset, limit, iPostTitle,iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndToPing(offset, limit, iPostTitle,iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndPinged(offset, limit, iPostTitle,iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndPostModified(offset, limit, iPostTitle,iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndPostModifiedGmt(offset, limit, iPostTitle,iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndPostContentFiltered(offset, limit, iPostTitle,iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndPostParent(offset, limit, iPostTitle,iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndGuid(offset, limit, iPostTitle,iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndMenuOrder(offset, limit, iPostTitle,iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndPostType(offset, limit, iPostTitle,iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndPostMimeType(offset, limit, iPostTitle,iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPasswordAndCommentCount(offset, limit, iPostTitle,iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndToPing(offset, limit, iPostTitle,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndPinged(offset, limit, iPostTitle,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndPostModified(offset, limit, iPostTitle,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndPostModifiedGmt(offset, limit, iPostTitle,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndPostContentFiltered(offset, limit, iPostTitle,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndPostParent(offset, limit, iPostTitle,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndGuid(offset, limit, iPostTitle,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndMenuOrder(offset, limit, iPostTitle,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndPostType(offset, limit, iPostTitle,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndPostMimeType(offset, limit, iPostTitle,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostNameAndCommentCount(offset, limit, iPostTitle,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPingAndPinged(offset, limit, iPostTitle,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPingAndPostModified(offset, limit, iPostTitle,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPingAndPostModifiedGmt(offset, limit, iPostTitle,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPingAndPostContentFiltered(offset, limit, iPostTitle,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPingAndPostParent(offset, limit, iPostTitle,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPingAndGuid(offset, limit, iPostTitle,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPingAndMenuOrder(offset, limit, iPostTitle,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPingAndPostType(offset, limit, iPostTitle,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPingAndPostMimeType(offset, limit, iPostTitle,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPingAndCommentCount(offset, limit, iPostTitle,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingedAndPostModified(offset, limit, iPostTitle,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingedAndPostModifiedGmt(offset, limit, iPostTitle,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingedAndPostContentFiltered(offset, limit, iPostTitle,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingedAndPostParent(offset, limit, iPostTitle,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingedAndGuid(offset, limit, iPostTitle,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingedAndMenuOrder(offset, limit, iPostTitle,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingedAndPostType(offset, limit, iPostTitle,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingedAndPostMimeType(offset, limit, iPostTitle,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingedAndCommentCount(offset, limit, iPostTitle,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedAndPostModifiedGmt(offset, limit, iPostTitle,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedAndPostContentFiltered(offset, limit, iPostTitle,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedAndPostParent(offset, limit, iPostTitle,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedAndGuid(offset, limit, iPostTitle,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedAndMenuOrder(offset, limit, iPostTitle,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedAndPostType(offset, limit, iPostTitle,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedAndPostMimeType(offset, limit, iPostTitle,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedAndCommentCount(offset, limit, iPostTitle,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPostTitle,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedGmtAndPostParent(offset, limit, iPostTitle,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedGmtAndGuid(offset, limit, iPostTitle,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedGmtAndMenuOrder(offset, limit, iPostTitle,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedGmtAndPostType(offset, limit, iPostTitle,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedGmtAndPostMimeType(offset, limit, iPostTitle,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedGmtAndCommentCount(offset, limit, iPostTitle,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostContentFilteredAndPostParent(offset, limit, iPostTitle,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostContentFilteredAndGuid(offset, limit, iPostTitle,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostContentFilteredAndMenuOrder(offset, limit, iPostTitle,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostContentFilteredAndPostType(offset, limit, iPostTitle,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostContentFilteredAndPostMimeType(offset, limit, iPostTitle,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostContentFilteredAndCommentCount(offset, limit, iPostTitle,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostParentAndGuid(offset, limit, iPostTitle,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostParentAndMenuOrder(offset, limit, iPostTitle,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostParentAndPostType(offset, limit, iPostTitle,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostParentAndPostMimeType(offset, limit, iPostTitle,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostParentAndCommentCount(offset, limit, iPostTitle,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndGuidAndMenuOrder(offset, limit, iPostTitle,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndGuidAndPostType(offset, limit, iPostTitle,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndGuidAndPostMimeType(offset, limit, iPostTitle,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndGuidAndCommentCount(offset, limit, iPostTitle,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndMenuOrderAndPostType(offset, limit, iPostTitle,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndMenuOrderAndPostMimeType(offset, limit, iPostTitle,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndMenuOrderAndCommentCount(offset, limit, iPostTitle,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostTypeAndPostMimeType(offset, limit, iPostTitle,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostTypeAndCommentCount(offset, limit, iPostTitle,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostMimeTypeAndCommentCount(offset, limit, iPostTitle,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndCommentStatus(offset, limit, iPostExcerpt,iPostStatus,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndPingStatus(offset, limit, iPostExcerpt,iPostStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndPostPassword(offset, limit, iPostExcerpt,iPostStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndPostName(offset, limit, iPostExcerpt,iPostStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndToPing(offset, limit, iPostExcerpt,iPostStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndPinged(offset, limit, iPostExcerpt,iPostStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndPostModified(offset, limit, iPostExcerpt,iPostStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndPostModifiedGmt(offset, limit, iPostExcerpt,iPostStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndPostContentFiltered(offset, limit, iPostExcerpt,iPostStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndPostParent(offset, limit, iPostExcerpt,iPostStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndGuid(offset, limit, iPostExcerpt,iPostStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndMenuOrder(offset, limit, iPostExcerpt,iPostStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndPostType(offset, limit, iPostExcerpt,iPostStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndPostMimeType(offset, limit, iPostExcerpt,iPostStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatusAndCommentCount(offset, limit, iPostExcerpt,iPostStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndPingStatus(offset, limit, iPostExcerpt,iCommentStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndPostPassword(offset, limit, iPostExcerpt,iCommentStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndPostName(offset, limit, iPostExcerpt,iCommentStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndToPing(offset, limit, iPostExcerpt,iCommentStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndPinged(offset, limit, iPostExcerpt,iCommentStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndPostModified(offset, limit, iPostExcerpt,iCommentStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndPostModifiedGmt(offset, limit, iPostExcerpt,iCommentStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndPostContentFiltered(offset, limit, iPostExcerpt,iCommentStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndPostParent(offset, limit, iPostExcerpt,iCommentStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndGuid(offset, limit, iPostExcerpt,iCommentStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndMenuOrder(offset, limit, iPostExcerpt,iCommentStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndPostType(offset, limit, iPostExcerpt,iCommentStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndPostMimeType(offset, limit, iPostExcerpt,iCommentStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatusAndCommentCount(offset, limit, iPostExcerpt,iCommentStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndPostPassword(offset, limit, iPostExcerpt,iPingStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndPostName(offset, limit, iPostExcerpt,iPingStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndToPing(offset, limit, iPostExcerpt,iPingStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndPinged(offset, limit, iPostExcerpt,iPingStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndPostModified(offset, limit, iPostExcerpt,iPingStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndPostModifiedGmt(offset, limit, iPostExcerpt,iPingStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndPostContentFiltered(offset, limit, iPostExcerpt,iPingStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndPostParent(offset, limit, iPostExcerpt,iPingStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndGuid(offset, limit, iPostExcerpt,iPingStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndMenuOrder(offset, limit, iPostExcerpt,iPingStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndPostType(offset, limit, iPostExcerpt,iPingStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndPostMimeType(offset, limit, iPostExcerpt,iPingStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatusAndCommentCount(offset, limit, iPostExcerpt,iPingStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndPostName(offset, limit, iPostExcerpt,iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndToPing(offset, limit, iPostExcerpt,iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndPinged(offset, limit, iPostExcerpt,iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndPostModified(offset, limit, iPostExcerpt,iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndPostModifiedGmt(offset, limit, iPostExcerpt,iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndPostContentFiltered(offset, limit, iPostExcerpt,iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndPostParent(offset, limit, iPostExcerpt,iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndGuid(offset, limit, iPostExcerpt,iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndMenuOrder(offset, limit, iPostExcerpt,iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndPostType(offset, limit, iPostExcerpt,iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndPostMimeType(offset, limit, iPostExcerpt,iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPasswordAndCommentCount(offset, limit, iPostExcerpt,iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndToPing(offset, limit, iPostExcerpt,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndPinged(offset, limit, iPostExcerpt,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndPostModified(offset, limit, iPostExcerpt,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndPostModifiedGmt(offset, limit, iPostExcerpt,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndPostContentFiltered(offset, limit, iPostExcerpt,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndPostParent(offset, limit, iPostExcerpt,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndGuid(offset, limit, iPostExcerpt,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndMenuOrder(offset, limit, iPostExcerpt,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndPostType(offset, limit, iPostExcerpt,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndPostMimeType(offset, limit, iPostExcerpt,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostNameAndCommentCount(offset, limit, iPostExcerpt,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPingAndPinged(offset, limit, iPostExcerpt,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPingAndPostModified(offset, limit, iPostExcerpt,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPingAndPostModifiedGmt(offset, limit, iPostExcerpt,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPingAndPostContentFiltered(offset, limit, iPostExcerpt,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPingAndPostParent(offset, limit, iPostExcerpt,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPingAndGuid(offset, limit, iPostExcerpt,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPingAndMenuOrder(offset, limit, iPostExcerpt,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPingAndPostType(offset, limit, iPostExcerpt,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPingAndPostMimeType(offset, limit, iPostExcerpt,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPingAndCommentCount(offset, limit, iPostExcerpt,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingedAndPostModified(offset, limit, iPostExcerpt,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingedAndPostModifiedGmt(offset, limit, iPostExcerpt,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingedAndPostContentFiltered(offset, limit, iPostExcerpt,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingedAndPostParent(offset, limit, iPostExcerpt,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingedAndGuid(offset, limit, iPostExcerpt,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingedAndMenuOrder(offset, limit, iPostExcerpt,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingedAndPostType(offset, limit, iPostExcerpt,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingedAndPostMimeType(offset, limit, iPostExcerpt,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingedAndCommentCount(offset, limit, iPostExcerpt,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedAndPostModifiedGmt(offset, limit, iPostExcerpt,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedAndPostContentFiltered(offset, limit, iPostExcerpt,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedAndPostParent(offset, limit, iPostExcerpt,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedAndGuid(offset, limit, iPostExcerpt,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedAndMenuOrder(offset, limit, iPostExcerpt,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedAndPostType(offset, limit, iPostExcerpt,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedAndPostMimeType(offset, limit, iPostExcerpt,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedAndCommentCount(offset, limit, iPostExcerpt,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPostExcerpt,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedGmtAndPostParent(offset, limit, iPostExcerpt,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedGmtAndGuid(offset, limit, iPostExcerpt,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedGmtAndMenuOrder(offset, limit, iPostExcerpt,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedGmtAndPostType(offset, limit, iPostExcerpt,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedGmtAndPostMimeType(offset, limit, iPostExcerpt,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedGmtAndCommentCount(offset, limit, iPostExcerpt,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostContentFilteredAndPostParent(offset, limit, iPostExcerpt,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostContentFilteredAndGuid(offset, limit, iPostExcerpt,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostContentFilteredAndMenuOrder(offset, limit, iPostExcerpt,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostContentFilteredAndPostType(offset, limit, iPostExcerpt,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostContentFilteredAndPostMimeType(offset, limit, iPostExcerpt,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostContentFilteredAndCommentCount(offset, limit, iPostExcerpt,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostParentAndGuid(offset, limit, iPostExcerpt,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostParentAndMenuOrder(offset, limit, iPostExcerpt,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostParentAndPostType(offset, limit, iPostExcerpt,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostParentAndPostMimeType(offset, limit, iPostExcerpt,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostParentAndCommentCount(offset, limit, iPostExcerpt,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndGuidAndMenuOrder(offset, limit, iPostExcerpt,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndGuidAndPostType(offset, limit, iPostExcerpt,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndGuidAndPostMimeType(offset, limit, iPostExcerpt,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndGuidAndCommentCount(offset, limit, iPostExcerpt,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndMenuOrderAndPostType(offset, limit, iPostExcerpt,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndMenuOrderAndPostMimeType(offset, limit, iPostExcerpt,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndMenuOrderAndCommentCount(offset, limit, iPostExcerpt,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostTypeAndPostMimeType(offset, limit, iPostExcerpt,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostTypeAndCommentCount(offset, limit, iPostExcerpt,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostMimeTypeAndCommentCount(offset, limit, iPostExcerpt,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndPingStatus(offset, limit, iPostStatus,iCommentStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndPostPassword(offset, limit, iPostStatus,iCommentStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndPostName(offset, limit, iPostStatus,iCommentStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndToPing(offset, limit, iPostStatus,iCommentStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndPinged(offset, limit, iPostStatus,iCommentStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndPostModified(offset, limit, iPostStatus,iCommentStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndPostModifiedGmt(offset, limit, iPostStatus,iCommentStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndPostContentFiltered(offset, limit, iPostStatus,iCommentStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndPostParent(offset, limit, iPostStatus,iCommentStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndGuid(offset, limit, iPostStatus,iCommentStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndMenuOrder(offset, limit, iPostStatus,iCommentStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndPostType(offset, limit, iPostStatus,iCommentStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndPostMimeType(offset, limit, iPostStatus,iCommentStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatusAndCommentCount(offset, limit, iPostStatus,iCommentStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndPostPassword(offset, limit, iPostStatus,iPingStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndPostName(offset, limit, iPostStatus,iPingStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndToPing(offset, limit, iPostStatus,iPingStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndPinged(offset, limit, iPostStatus,iPingStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndPostModified(offset, limit, iPostStatus,iPingStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndPostModifiedGmt(offset, limit, iPostStatus,iPingStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndPostContentFiltered(offset, limit, iPostStatus,iPingStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndPostParent(offset, limit, iPostStatus,iPingStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndGuid(offset, limit, iPostStatus,iPingStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndMenuOrder(offset, limit, iPostStatus,iPingStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndPostType(offset, limit, iPostStatus,iPingStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndPostMimeType(offset, limit, iPostStatus,iPingStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatusAndCommentCount(offset, limit, iPostStatus,iPingStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndPostName(offset, limit, iPostStatus,iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndToPing(offset, limit, iPostStatus,iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndPinged(offset, limit, iPostStatus,iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndPostModified(offset, limit, iPostStatus,iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndPostModifiedGmt(offset, limit, iPostStatus,iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndPostContentFiltered(offset, limit, iPostStatus,iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndPostParent(offset, limit, iPostStatus,iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndGuid(offset, limit, iPostStatus,iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndMenuOrder(offset, limit, iPostStatus,iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndPostType(offset, limit, iPostStatus,iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndPostMimeType(offset, limit, iPostStatus,iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPasswordAndCommentCount(offset, limit, iPostStatus,iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndToPing(offset, limit, iPostStatus,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndPinged(offset, limit, iPostStatus,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndPostModified(offset, limit, iPostStatus,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndPostModifiedGmt(offset, limit, iPostStatus,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndPostContentFiltered(offset, limit, iPostStatus,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndPostParent(offset, limit, iPostStatus,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndGuid(offset, limit, iPostStatus,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndMenuOrder(offset, limit, iPostStatus,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndPostType(offset, limit, iPostStatus,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndPostMimeType(offset, limit, iPostStatus,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostNameAndCommentCount(offset, limit, iPostStatus,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPingAndPinged(offset, limit, iPostStatus,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPingAndPostModified(offset, limit, iPostStatus,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPingAndPostModifiedGmt(offset, limit, iPostStatus,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPingAndPostContentFiltered(offset, limit, iPostStatus,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPingAndPostParent(offset, limit, iPostStatus,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPingAndGuid(offset, limit, iPostStatus,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPingAndMenuOrder(offset, limit, iPostStatus,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPingAndPostType(offset, limit, iPostStatus,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPingAndPostMimeType(offset, limit, iPostStatus,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPingAndCommentCount(offset, limit, iPostStatus,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingedAndPostModified(offset, limit, iPostStatus,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingedAndPostModifiedGmt(offset, limit, iPostStatus,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingedAndPostContentFiltered(offset, limit, iPostStatus,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingedAndPostParent(offset, limit, iPostStatus,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingedAndGuid(offset, limit, iPostStatus,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingedAndMenuOrder(offset, limit, iPostStatus,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingedAndPostType(offset, limit, iPostStatus,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingedAndPostMimeType(offset, limit, iPostStatus,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingedAndCommentCount(offset, limit, iPostStatus,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedAndPostModifiedGmt(offset, limit, iPostStatus,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedAndPostContentFiltered(offset, limit, iPostStatus,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedAndPostParent(offset, limit, iPostStatus,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedAndGuid(offset, limit, iPostStatus,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedAndMenuOrder(offset, limit, iPostStatus,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedAndPostType(offset, limit, iPostStatus,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedAndPostMimeType(offset, limit, iPostStatus,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedAndCommentCount(offset, limit, iPostStatus,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPostStatus,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedGmtAndPostParent(offset, limit, iPostStatus,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedGmtAndGuid(offset, limit, iPostStatus,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedGmtAndMenuOrder(offset, limit, iPostStatus,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedGmtAndPostType(offset, limit, iPostStatus,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedGmtAndPostMimeType(offset, limit, iPostStatus,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedGmtAndCommentCount(offset, limit, iPostStatus,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostContentFilteredAndPostParent(offset, limit, iPostStatus,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostContentFilteredAndGuid(offset, limit, iPostStatus,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostContentFilteredAndMenuOrder(offset, limit, iPostStatus,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostContentFilteredAndPostType(offset, limit, iPostStatus,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostContentFilteredAndPostMimeType(offset, limit, iPostStatus,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostContentFilteredAndCommentCount(offset, limit, iPostStatus,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostParentAndGuid(offset, limit, iPostStatus,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostParentAndMenuOrder(offset, limit, iPostStatus,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostParentAndPostType(offset, limit, iPostStatus,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostParentAndPostMimeType(offset, limit, iPostStatus,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostParentAndCommentCount(offset, limit, iPostStatus,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndGuidAndMenuOrder(offset, limit, iPostStatus,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndGuidAndPostType(offset, limit, iPostStatus,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndGuidAndPostMimeType(offset, limit, iPostStatus,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndGuidAndCommentCount(offset, limit, iPostStatus,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndMenuOrderAndPostType(offset, limit, iPostStatus,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndMenuOrderAndPostMimeType(offset, limit, iPostStatus,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndMenuOrderAndCommentCount(offset, limit, iPostStatus,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostTypeAndPostMimeType(offset, limit, iPostStatus,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostTypeAndCommentCount(offset, limit, iPostStatus,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostMimeTypeAndCommentCount(offset, limit, iPostStatus,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndPostPassword(offset, limit, iCommentStatus,iPingStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndPostName(offset, limit, iCommentStatus,iPingStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndToPing(offset, limit, iCommentStatus,iPingStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndPinged(offset, limit, iCommentStatus,iPingStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndPostModified(offset, limit, iCommentStatus,iPingStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndPostModifiedGmt(offset, limit, iCommentStatus,iPingStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndPostContentFiltered(offset, limit, iCommentStatus,iPingStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndPostParent(offset, limit, iCommentStatus,iPingStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndGuid(offset, limit, iCommentStatus,iPingStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndMenuOrder(offset, limit, iCommentStatus,iPingStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndPostType(offset, limit, iCommentStatus,iPingStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndPostMimeType(offset, limit, iCommentStatus,iPingStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatusAndCommentCount(offset, limit, iCommentStatus,iPingStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndPostName(offset, limit, iCommentStatus,iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndToPing(offset, limit, iCommentStatus,iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndPinged(offset, limit, iCommentStatus,iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndPostModified(offset, limit, iCommentStatus,iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndPostModifiedGmt(offset, limit, iCommentStatus,iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndPostContentFiltered(offset, limit, iCommentStatus,iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndPostParent(offset, limit, iCommentStatus,iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndGuid(offset, limit, iCommentStatus,iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndMenuOrder(offset, limit, iCommentStatus,iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndPostType(offset, limit, iCommentStatus,iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndPostMimeType(offset, limit, iCommentStatus,iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPasswordAndCommentCount(offset, limit, iCommentStatus,iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndToPing(offset, limit, iCommentStatus,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndPinged(offset, limit, iCommentStatus,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndPostModified(offset, limit, iCommentStatus,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndPostModifiedGmt(offset, limit, iCommentStatus,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndPostContentFiltered(offset, limit, iCommentStatus,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndPostParent(offset, limit, iCommentStatus,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndGuid(offset, limit, iCommentStatus,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndMenuOrder(offset, limit, iCommentStatus,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndPostType(offset, limit, iCommentStatus,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndPostMimeType(offset, limit, iCommentStatus,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostNameAndCommentCount(offset, limit, iCommentStatus,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPingAndPinged(offset, limit, iCommentStatus,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPingAndPostModified(offset, limit, iCommentStatus,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPingAndPostModifiedGmt(offset, limit, iCommentStatus,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPingAndPostContentFiltered(offset, limit, iCommentStatus,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPingAndPostParent(offset, limit, iCommentStatus,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPingAndGuid(offset, limit, iCommentStatus,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPingAndMenuOrder(offset, limit, iCommentStatus,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPingAndPostType(offset, limit, iCommentStatus,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPingAndPostMimeType(offset, limit, iCommentStatus,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPingAndCommentCount(offset, limit, iCommentStatus,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingedAndPostModified(offset, limit, iCommentStatus,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingedAndPostModifiedGmt(offset, limit, iCommentStatus,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingedAndPostContentFiltered(offset, limit, iCommentStatus,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingedAndPostParent(offset, limit, iCommentStatus,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingedAndGuid(offset, limit, iCommentStatus,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingedAndMenuOrder(offset, limit, iCommentStatus,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingedAndPostType(offset, limit, iCommentStatus,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingedAndPostMimeType(offset, limit, iCommentStatus,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingedAndCommentCount(offset, limit, iCommentStatus,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedAndPostModifiedGmt(offset, limit, iCommentStatus,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedAndPostContentFiltered(offset, limit, iCommentStatus,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedAndPostParent(offset, limit, iCommentStatus,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedAndGuid(offset, limit, iCommentStatus,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedAndMenuOrder(offset, limit, iCommentStatus,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedAndPostType(offset, limit, iCommentStatus,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedAndPostMimeType(offset, limit, iCommentStatus,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedAndCommentCount(offset, limit, iCommentStatus,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedGmtAndPostContentFiltered(offset, limit, iCommentStatus,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedGmtAndPostParent(offset, limit, iCommentStatus,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedGmtAndGuid(offset, limit, iCommentStatus,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedGmtAndMenuOrder(offset, limit, iCommentStatus,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedGmtAndPostType(offset, limit, iCommentStatus,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedGmtAndPostMimeType(offset, limit, iCommentStatus,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedGmtAndCommentCount(offset, limit, iCommentStatus,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostContentFilteredAndPostParent(offset, limit, iCommentStatus,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostContentFilteredAndGuid(offset, limit, iCommentStatus,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostContentFilteredAndMenuOrder(offset, limit, iCommentStatus,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostContentFilteredAndPostType(offset, limit, iCommentStatus,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostContentFilteredAndPostMimeType(offset, limit, iCommentStatus,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostContentFilteredAndCommentCount(offset, limit, iCommentStatus,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostParentAndGuid(offset, limit, iCommentStatus,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostParentAndMenuOrder(offset, limit, iCommentStatus,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostParentAndPostType(offset, limit, iCommentStatus,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostParentAndPostMimeType(offset, limit, iCommentStatus,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostParentAndCommentCount(offset, limit, iCommentStatus,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndGuidAndMenuOrder(offset, limit, iCommentStatus,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndGuidAndPostType(offset, limit, iCommentStatus,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndGuidAndPostMimeType(offset, limit, iCommentStatus,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndGuidAndCommentCount(offset, limit, iCommentStatus,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndMenuOrderAndPostType(offset, limit, iCommentStatus,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndMenuOrderAndPostMimeType(offset, limit, iCommentStatus,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndMenuOrderAndCommentCount(offset, limit, iCommentStatus,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostTypeAndPostMimeType(offset, limit, iCommentStatus,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostTypeAndCommentCount(offset, limit, iCommentStatus,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostMimeTypeAndCommentCount(offset, limit, iCommentStatus,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndPostName(offset, limit, iPingStatus,iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndToPing(offset, limit, iPingStatus,iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndPinged(offset, limit, iPingStatus,iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndPostModified(offset, limit, iPingStatus,iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndPostModifiedGmt(offset, limit, iPingStatus,iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndPostContentFiltered(offset, limit, iPingStatus,iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndPostParent(offset, limit, iPingStatus,iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndGuid(offset, limit, iPingStatus,iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndMenuOrder(offset, limit, iPingStatus,iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndPostType(offset, limit, iPingStatus,iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndPostMimeType(offset, limit, iPingStatus,iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPasswordAndCommentCount(offset, limit, iPingStatus,iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndToPing(offset, limit, iPingStatus,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndPinged(offset, limit, iPingStatus,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndPostModified(offset, limit, iPingStatus,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndPostModifiedGmt(offset, limit, iPingStatus,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndPostContentFiltered(offset, limit, iPingStatus,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndPostParent(offset, limit, iPingStatus,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndGuid(offset, limit, iPingStatus,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndMenuOrder(offset, limit, iPingStatus,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndPostType(offset, limit, iPingStatus,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndPostMimeType(offset, limit, iPingStatus,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostNameAndCommentCount(offset, limit, iPingStatus,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPingAndPinged(offset, limit, iPingStatus,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPingAndPostModified(offset, limit, iPingStatus,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPingAndPostModifiedGmt(offset, limit, iPingStatus,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPingAndPostContentFiltered(offset, limit, iPingStatus,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPingAndPostParent(offset, limit, iPingStatus,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPingAndGuid(offset, limit, iPingStatus,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPingAndMenuOrder(offset, limit, iPingStatus,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPingAndPostType(offset, limit, iPingStatus,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPingAndPostMimeType(offset, limit, iPingStatus,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPingAndCommentCount(offset, limit, iPingStatus,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPingedAndPostModified(offset, limit, iPingStatus,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPingedAndPostModifiedGmt(offset, limit, iPingStatus,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPingedAndPostContentFiltered(offset, limit, iPingStatus,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPingedAndPostParent(offset, limit, iPingStatus,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPingedAndGuid(offset, limit, iPingStatus,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPingedAndMenuOrder(offset, limit, iPingStatus,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPingedAndPostType(offset, limit, iPingStatus,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPingedAndPostMimeType(offset, limit, iPingStatus,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPingedAndCommentCount(offset, limit, iPingStatus,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedAndPostModifiedGmt(offset, limit, iPingStatus,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedAndPostContentFiltered(offset, limit, iPingStatus,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedAndPostParent(offset, limit, iPingStatus,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedAndGuid(offset, limit, iPingStatus,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedAndMenuOrder(offset, limit, iPingStatus,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedAndPostType(offset, limit, iPingStatus,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedAndPostMimeType(offset, limit, iPingStatus,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedAndCommentCount(offset, limit, iPingStatus,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPingStatus,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedGmtAndPostParent(offset, limit, iPingStatus,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedGmtAndGuid(offset, limit, iPingStatus,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedGmtAndMenuOrder(offset, limit, iPingStatus,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedGmtAndPostType(offset, limit, iPingStatus,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedGmtAndPostMimeType(offset, limit, iPingStatus,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedGmtAndCommentCount(offset, limit, iPingStatus,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostContentFilteredAndPostParent(offset, limit, iPingStatus,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostContentFilteredAndGuid(offset, limit, iPingStatus,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostContentFilteredAndMenuOrder(offset, limit, iPingStatus,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostContentFilteredAndPostType(offset, limit, iPingStatus,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostContentFilteredAndPostMimeType(offset, limit, iPingStatus,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostContentFilteredAndCommentCount(offset, limit, iPingStatus,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostParentAndGuid(offset, limit, iPingStatus,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostParentAndMenuOrder(offset, limit, iPingStatus,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostParentAndPostType(offset, limit, iPingStatus,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostParentAndPostMimeType(offset, limit, iPingStatus,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostParentAndCommentCount(offset, limit, iPingStatus,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndGuidAndMenuOrder(offset, limit, iPingStatus,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndGuidAndPostType(offset, limit, iPingStatus,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndGuidAndPostMimeType(offset, limit, iPingStatus,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndGuidAndCommentCount(offset, limit, iPingStatus,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndMenuOrderAndPostType(offset, limit, iPingStatus,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndMenuOrderAndPostMimeType(offset, limit, iPingStatus,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndMenuOrderAndCommentCount(offset, limit, iPingStatus,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostTypeAndPostMimeType(offset, limit, iPingStatus,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostTypeAndCommentCount(offset, limit, iPingStatus,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostMimeTypeAndCommentCount(offset, limit, iPingStatus,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndToPing(offset, limit, iPostPassword,iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndPinged(offset, limit, iPostPassword,iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndPostModified(offset, limit, iPostPassword,iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndPostModifiedGmt(offset, limit, iPostPassword,iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndPostContentFiltered(offset, limit, iPostPassword,iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndPostParent(offset, limit, iPostPassword,iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndGuid(offset, limit, iPostPassword,iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndMenuOrder(offset, limit, iPostPassword,iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndPostType(offset, limit, iPostPassword,iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndPostMimeType(offset, limit, iPostPassword,iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostNameAndCommentCount(offset, limit, iPostPassword,iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPingAndPinged(offset, limit, iPostPassword,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPingAndPostModified(offset, limit, iPostPassword,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPingAndPostModifiedGmt(offset, limit, iPostPassword,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPingAndPostContentFiltered(offset, limit, iPostPassword,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPingAndPostParent(offset, limit, iPostPassword,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPingAndGuid(offset, limit, iPostPassword,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPingAndMenuOrder(offset, limit, iPostPassword,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPingAndPostType(offset, limit, iPostPassword,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPingAndPostMimeType(offset, limit, iPostPassword,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPingAndCommentCount(offset, limit, iPostPassword,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPingedAndPostModified(offset, limit, iPostPassword,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPingedAndPostModifiedGmt(offset, limit, iPostPassword,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPingedAndPostContentFiltered(offset, limit, iPostPassword,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPingedAndPostParent(offset, limit, iPostPassword,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPingedAndGuid(offset, limit, iPostPassword,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPingedAndMenuOrder(offset, limit, iPostPassword,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPingedAndPostType(offset, limit, iPostPassword,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPingedAndPostMimeType(offset, limit, iPostPassword,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPingedAndCommentCount(offset, limit, iPostPassword,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedAndPostModifiedGmt(offset, limit, iPostPassword,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedAndPostContentFiltered(offset, limit, iPostPassword,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedAndPostParent(offset, limit, iPostPassword,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedAndGuid(offset, limit, iPostPassword,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedAndMenuOrder(offset, limit, iPostPassword,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedAndPostType(offset, limit, iPostPassword,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedAndPostMimeType(offset, limit, iPostPassword,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedAndCommentCount(offset, limit, iPostPassword,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPostPassword,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedGmtAndPostParent(offset, limit, iPostPassword,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedGmtAndGuid(offset, limit, iPostPassword,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedGmtAndMenuOrder(offset, limit, iPostPassword,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedGmtAndPostType(offset, limit, iPostPassword,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedGmtAndPostMimeType(offset, limit, iPostPassword,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedGmtAndCommentCount(offset, limit, iPostPassword,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostContentFilteredAndPostParent(offset, limit, iPostPassword,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostContentFilteredAndGuid(offset, limit, iPostPassword,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostContentFilteredAndMenuOrder(offset, limit, iPostPassword,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostContentFilteredAndPostType(offset, limit, iPostPassword,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostContentFilteredAndPostMimeType(offset, limit, iPostPassword,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostContentFilteredAndCommentCount(offset, limit, iPostPassword,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostParentAndGuid(offset, limit, iPostPassword,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostParentAndMenuOrder(offset, limit, iPostPassword,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostParentAndPostType(offset, limit, iPostPassword,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostParentAndPostMimeType(offset, limit, iPostPassword,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostParentAndCommentCount(offset, limit, iPostPassword,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndGuidAndMenuOrder(offset, limit, iPostPassword,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndGuidAndPostType(offset, limit, iPostPassword,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndGuidAndPostMimeType(offset, limit, iPostPassword,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndGuidAndCommentCount(offset, limit, iPostPassword,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndMenuOrderAndPostType(offset, limit, iPostPassword,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndMenuOrderAndPostMimeType(offset, limit, iPostPassword,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndMenuOrderAndCommentCount(offset, limit, iPostPassword,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostTypeAndPostMimeType(offset, limit, iPostPassword,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostTypeAndCommentCount(offset, limit, iPostPassword,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostMimeTypeAndCommentCount(offset, limit, iPostPassword,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPingAndPinged(offset, limit, iPostName,iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPingAndPostModified(offset, limit, iPostName,iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPingAndPostModifiedGmt(offset, limit, iPostName,iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPingAndPostContentFiltered(offset, limit, iPostName,iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPingAndPostParent(offset, limit, iPostName,iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPingAndGuid(offset, limit, iPostName,iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPingAndMenuOrder(offset, limit, iPostName,iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPingAndPostType(offset, limit, iPostName,iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPingAndPostMimeType(offset, limit, iPostName,iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPingAndCommentCount(offset, limit, iPostName,iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPingedAndPostModified(offset, limit, iPostName,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPingedAndPostModifiedGmt(offset, limit, iPostName,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPingedAndPostContentFiltered(offset, limit, iPostName,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPingedAndPostParent(offset, limit, iPostName,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPingedAndGuid(offset, limit, iPostName,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPingedAndMenuOrder(offset, limit, iPostName,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPingedAndPostType(offset, limit, iPostName,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPingedAndPostMimeType(offset, limit, iPostName,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPingedAndCommentCount(offset, limit, iPostName,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedAndPostModifiedGmt(offset, limit, iPostName,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedAndPostContentFiltered(offset, limit, iPostName,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedAndPostParent(offset, limit, iPostName,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedAndGuid(offset, limit, iPostName,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedAndMenuOrder(offset, limit, iPostName,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedAndPostType(offset, limit, iPostName,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedAndPostMimeType(offset, limit, iPostName,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedAndCommentCount(offset, limit, iPostName,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPostName,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedGmtAndPostParent(offset, limit, iPostName,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedGmtAndGuid(offset, limit, iPostName,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedGmtAndMenuOrder(offset, limit, iPostName,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedGmtAndPostType(offset, limit, iPostName,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedGmtAndPostMimeType(offset, limit, iPostName,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedGmtAndCommentCount(offset, limit, iPostName,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostContentFilteredAndPostParent(offset, limit, iPostName,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostContentFilteredAndGuid(offset, limit, iPostName,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostContentFilteredAndMenuOrder(offset, limit, iPostName,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostContentFilteredAndPostType(offset, limit, iPostName,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostContentFilteredAndPostMimeType(offset, limit, iPostName,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostContentFilteredAndCommentCount(offset, limit, iPostName,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostParentAndGuid(offset, limit, iPostName,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostParentAndMenuOrder(offset, limit, iPostName,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostParentAndPostType(offset, limit, iPostName,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostParentAndPostMimeType(offset, limit, iPostName,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostParentAndCommentCount(offset, limit, iPostName,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndGuidAndMenuOrder(offset, limit, iPostName,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndGuidAndPostType(offset, limit, iPostName,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndGuidAndPostMimeType(offset, limit, iPostName,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndGuidAndCommentCount(offset, limit, iPostName,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndMenuOrderAndPostType(offset, limit, iPostName,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndMenuOrderAndPostMimeType(offset, limit, iPostName,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndMenuOrderAndCommentCount(offset, limit, iPostName,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostTypeAndPostMimeType(offset, limit, iPostName,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostTypeAndCommentCount(offset, limit, iPostName,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostMimeTypeAndCommentCount(offset, limit, iPostName,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPingedAndPostModified(offset, limit, iToPing,iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPingedAndPostModifiedGmt(offset, limit, iToPing,iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPingedAndPostContentFiltered(offset, limit, iToPing,iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPingedAndPostParent(offset, limit, iToPing,iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPingedAndGuid(offset, limit, iToPing,iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPingedAndMenuOrder(offset, limit, iToPing,iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPingedAndPostType(offset, limit, iToPing,iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPingedAndPostMimeType(offset, limit, iToPing,iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPingedAndCommentCount(offset, limit, iToPing,iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedAndPostModifiedGmt(offset, limit, iToPing,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedAndPostContentFiltered(offset, limit, iToPing,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedAndPostParent(offset, limit, iToPing,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedAndGuid(offset, limit, iToPing,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedAndMenuOrder(offset, limit, iToPing,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedAndPostType(offset, limit, iToPing,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedAndPostMimeType(offset, limit, iToPing,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedAndCommentCount(offset, limit, iToPing,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedGmtAndPostContentFiltered(offset, limit, iToPing,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedGmtAndPostParent(offset, limit, iToPing,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedGmtAndGuid(offset, limit, iToPing,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedGmtAndMenuOrder(offset, limit, iToPing,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedGmtAndPostType(offset, limit, iToPing,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedGmtAndPostMimeType(offset, limit, iToPing,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedGmtAndCommentCount(offset, limit, iToPing,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostContentFilteredAndPostParent(offset, limit, iToPing,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostContentFilteredAndGuid(offset, limit, iToPing,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostContentFilteredAndMenuOrder(offset, limit, iToPing,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostContentFilteredAndPostType(offset, limit, iToPing,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostContentFilteredAndPostMimeType(offset, limit, iToPing,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostContentFilteredAndCommentCount(offset, limit, iToPing,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostParentAndGuid(offset, limit, iToPing,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostParentAndMenuOrder(offset, limit, iToPing,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostParentAndPostType(offset, limit, iToPing,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostParentAndPostMimeType(offset, limit, iToPing,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostParentAndCommentCount(offset, limit, iToPing,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndGuidAndMenuOrder(offset, limit, iToPing,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndGuidAndPostType(offset, limit, iToPing,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndGuidAndPostMimeType(offset, limit, iToPing,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndGuidAndCommentCount(offset, limit, iToPing,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndMenuOrderAndPostType(offset, limit, iToPing,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndMenuOrderAndPostMimeType(offset, limit, iToPing,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndMenuOrderAndCommentCount(offset, limit, iToPing,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostTypeAndPostMimeType(offset, limit, iToPing,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostTypeAndCommentCount(offset, limit, iToPing,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostMimeTypeAndCommentCount(offset, limit, iToPing,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedAndPostModifiedGmt(offset, limit, iPinged,iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedAndPostContentFiltered(offset, limit, iPinged,iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedAndPostParent(offset, limit, iPinged,iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedAndGuid(offset, limit, iPinged,iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedAndMenuOrder(offset, limit, iPinged,iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedAndPostType(offset, limit, iPinged,iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedAndPostMimeType(offset, limit, iPinged,iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedAndCommentCount(offset, limit, iPinged,iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPinged,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedGmtAndPostParent(offset, limit, iPinged,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedGmtAndGuid(offset, limit, iPinged,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedGmtAndMenuOrder(offset, limit, iPinged,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedGmtAndPostType(offset, limit, iPinged,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedGmtAndPostMimeType(offset, limit, iPinged,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedGmtAndCommentCount(offset, limit, iPinged,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostContentFilteredAndPostParent(offset, limit, iPinged,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostContentFilteredAndGuid(offset, limit, iPinged,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostContentFilteredAndMenuOrder(offset, limit, iPinged,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostContentFilteredAndPostType(offset, limit, iPinged,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostContentFilteredAndPostMimeType(offset, limit, iPinged,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostContentFilteredAndCommentCount(offset, limit, iPinged,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostParentAndGuid(offset, limit, iPinged,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostParentAndMenuOrder(offset, limit, iPinged,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostParentAndPostType(offset, limit, iPinged,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostParentAndPostMimeType(offset, limit, iPinged,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostParentAndCommentCount(offset, limit, iPinged,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndGuidAndMenuOrder(offset, limit, iPinged,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndGuidAndPostType(offset, limit, iPinged,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndGuidAndPostMimeType(offset, limit, iPinged,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndGuidAndCommentCount(offset, limit, iPinged,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndMenuOrderAndPostType(offset, limit, iPinged,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndMenuOrderAndPostMimeType(offset, limit, iPinged,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndMenuOrderAndCommentCount(offset, limit, iPinged,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostTypeAndPostMimeType(offset, limit, iPinged,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostTypeAndCommentCount(offset, limit, iPinged,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostMimeTypeAndCommentCount(offset, limit, iPinged,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostModifiedGmtAndPostContentFiltered(offset, limit, iPostModified,iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostModifiedGmtAndPostParent(offset, limit, iPostModified,iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostModifiedGmtAndGuid(offset, limit, iPostModified,iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostModifiedGmtAndMenuOrder(offset, limit, iPostModified,iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostModifiedGmtAndPostType(offset, limit, iPostModified,iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostModifiedGmtAndPostMimeType(offset, limit, iPostModified,iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostModifiedGmtAndCommentCount(offset, limit, iPostModified,iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostContentFilteredAndPostParent(offset, limit, iPostModified,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostContentFilteredAndGuid(offset, limit, iPostModified,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostContentFilteredAndMenuOrder(offset, limit, iPostModified,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostContentFilteredAndPostType(offset, limit, iPostModified,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostContentFilteredAndPostMimeType(offset, limit, iPostModified,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostContentFilteredAndCommentCount(offset, limit, iPostModified,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostParentAndGuid(offset, limit, iPostModified,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostParentAndMenuOrder(offset, limit, iPostModified,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostParentAndPostType(offset, limit, iPostModified,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostParentAndPostMimeType(offset, limit, iPostModified,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostParentAndCommentCount(offset, limit, iPostModified,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndGuidAndMenuOrder(offset, limit, iPostModified,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndGuidAndPostType(offset, limit, iPostModified,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndGuidAndPostMimeType(offset, limit, iPostModified,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndGuidAndCommentCount(offset, limit, iPostModified,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndMenuOrderAndPostType(offset, limit, iPostModified,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndMenuOrderAndPostMimeType(offset, limit, iPostModified,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndMenuOrderAndCommentCount(offset, limit, iPostModified,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostTypeAndPostMimeType(offset, limit, iPostModified,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostTypeAndCommentCount(offset, limit, iPostModified,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostMimeTypeAndCommentCount(offset, limit, iPostModified,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostParent(offset, limit, iPostModifiedGmt,iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostContentFilteredAndGuid(offset, limit, iPostModifiedGmt,iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostContentFilteredAndMenuOrder(offset, limit, iPostModifiedGmt,iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostType(offset, limit, iPostModifiedGmt,iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostMimeType(offset, limit, iPostModifiedGmt,iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostContentFilteredAndCommentCount(offset, limit, iPostModifiedGmt,iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostParentAndGuid(offset, limit, iPostModifiedGmt,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostParentAndMenuOrder(offset, limit, iPostModifiedGmt,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostParentAndPostType(offset, limit, iPostModifiedGmt,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostParentAndPostMimeType(offset, limit, iPostModifiedGmt,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostParentAndCommentCount(offset, limit, iPostModifiedGmt,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndGuidAndMenuOrder(offset, limit, iPostModifiedGmt,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndGuidAndPostType(offset, limit, iPostModifiedGmt,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndGuidAndPostMimeType(offset, limit, iPostModifiedGmt,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndGuidAndCommentCount(offset, limit, iPostModifiedGmt,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndMenuOrderAndPostType(offset, limit, iPostModifiedGmt,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndMenuOrderAndPostMimeType(offset, limit, iPostModifiedGmt,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndMenuOrderAndCommentCount(offset, limit, iPostModifiedGmt,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostTypeAndPostMimeType(offset, limit, iPostModifiedGmt,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostTypeAndCommentCount(offset, limit, iPostModifiedGmt,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostMimeTypeAndCommentCount(offset, limit, iPostModifiedGmt,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostParentAndGuid(offset, limit, iPostContentFiltered,iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostParentAndMenuOrder(offset, limit, iPostContentFiltered,iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostParentAndPostType(offset, limit, iPostContentFiltered,iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostParentAndPostMimeType(offset, limit, iPostContentFiltered,iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostParentAndCommentCount(offset, limit, iPostContentFiltered,iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndGuidAndMenuOrder(offset, limit, iPostContentFiltered,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndGuidAndPostType(offset, limit, iPostContentFiltered,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndGuidAndPostMimeType(offset, limit, iPostContentFiltered,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndGuidAndCommentCount(offset, limit, iPostContentFiltered,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndMenuOrderAndPostType(offset, limit, iPostContentFiltered,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndMenuOrderAndPostMimeType(offset, limit, iPostContentFiltered,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndMenuOrderAndCommentCount(offset, limit, iPostContentFiltered,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostTypeAndPostMimeType(offset, limit, iPostContentFiltered,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostTypeAndCommentCount(offset, limit, iPostContentFiltered,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostMimeTypeAndCommentCount(offset, limit, iPostContentFiltered,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndGuidAndMenuOrder(offset, limit, iPostParent,iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndGuidAndPostType(offset, limit, iPostParent,iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndGuidAndPostMimeType(offset, limit, iPostParent,iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndGuidAndCommentCount(offset, limit, iPostParent,iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndMenuOrderAndPostType(offset, limit, iPostParent,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndMenuOrderAndPostMimeType(offset, limit, iPostParent,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndMenuOrderAndCommentCount(offset, limit, iPostParent,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndPostTypeAndPostMimeType(offset, limit, iPostParent,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndPostTypeAndCommentCount(offset, limit, iPostParent,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndPostMimeTypeAndCommentCount(offset, limit, iPostParent,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidAndMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuidAndMenuOrderAndPostType(offset, limit, iGuid,iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuidAndMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidAndMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuidAndMenuOrderAndPostMimeType(offset, limit, iGuid,iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuidAndMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidAndMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuidAndMenuOrderAndCommentCount(offset, limit, iGuid,iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuidAndMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuidAndPostTypeAndPostMimeType(offset, limit, iGuid,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuidAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuidAndPostTypeAndCommentCount(offset, limit, iGuid,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuidAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuidAndPostMimeTypeAndCommentCount(offset, limit, iGuid,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuidAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByMenuOrderAndPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iMenuOrder) {
		_Posts, _error := model.GetPostsesByMenuOrderAndPostTypeAndPostMimeType(offset, limit, iMenuOrder,iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByMenuOrderAndPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByMenuOrderAndPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iMenuOrder) {
		_Posts, _error := model.GetPostsesByMenuOrderAndPostTypeAndCommentCount(offset, limit, iMenuOrder,iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByMenuOrderAndPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByMenuOrderAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iMenuOrder) {
		_Posts, _error := model.GetPostsesByMenuOrderAndPostMimeTypeAndCommentCount(offset, limit, iMenuOrder,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByMenuOrderAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTypeAndPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostType) {
		_Posts, _error := model.GetPostsesByPostTypeAndPostMimeTypeAndCommentCount(offset, limit, iPostType,iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTypeAndPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostAuthorHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostAuthor := self.Args("post_author").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostAuthor(offset, limit, iId,iPostAuthor)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostAuthor's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDate := self.Args("post_date").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDate(offset, limit, iId,iPostDate)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDate's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostDateGmt(offset, limit, iId,iPostDateGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostDateGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContent := self.Args("post_content").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContent(offset, limit, iId,iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostTitle(offset, limit, iId,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostExcerpt(offset, limit, iId,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostStatus(offset, limit, iId,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentStatus(offset, limit, iId,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPingStatus(offset, limit, iId,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostPassword(offset, limit, iId,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostName(offset, limit, iId,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndToPing(offset, limit, iId,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPinged(offset, limit, iId,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModified(offset, limit, iId,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostModifiedGmt(offset, limit, iId,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostContentFiltered(offset, limit, iId,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostParent(offset, limit, iId,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndGuid(offset, limit, iId,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndMenuOrder(offset, limit, iId,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostType(offset, limit, iId,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndPostMimeType(offset, limit, iId,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByIdAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsesByIdAndCommentCount(offset, limit, iId,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByIdAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDate := self.Args("post_date").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDate(offset, limit, iPostAuthor,iPostDate)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDate's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostDateGmt := self.Args("post_date_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostDateGmt(offset, limit, iPostAuthor,iPostDateGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostDateGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContent := self.Args("post_content").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContent(offset, limit, iPostAuthor,iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostTitle(offset, limit, iPostAuthor,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostExcerpt(offset, limit, iPostAuthor,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostStatus(offset, limit, iPostAuthor,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentStatus(offset, limit, iPostAuthor,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPingStatus(offset, limit, iPostAuthor,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostPassword(offset, limit, iPostAuthor,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostName(offset, limit, iPostAuthor,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndToPing(offset, limit, iPostAuthor,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPinged(offset, limit, iPostAuthor,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModified(offset, limit, iPostAuthor,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostModifiedGmt(offset, limit, iPostAuthor,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostContentFiltered(offset, limit, iPostAuthor,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostParent(offset, limit, iPostAuthor,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndGuid(offset, limit, iPostAuthor,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndMenuOrder(offset, limit, iPostAuthor,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostType(offset, limit, iPostAuthor,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndPostMimeType(offset, limit, iPostAuthor,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostAuthorAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostAuthor := self.Args("post_author").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsesByPostAuthorAndCommentCount(offset, limit, iPostAuthor,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostAuthorAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostDateGmt := self.Args("post_date_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostDateGmt(offset, limit, iPostDate,iPostDateGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostDateGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContent := self.Args("post_content").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContent(offset, limit, iPostDate,iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostTitle(offset, limit, iPostDate,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostExcerpt(offset, limit, iPostDate,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostStatus(offset, limit, iPostDate,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentStatus(offset, limit, iPostDate,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPingStatus(offset, limit, iPostDate,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostPassword(offset, limit, iPostDate,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostName(offset, limit, iPostDate,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndToPing(offset, limit, iPostDate,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPinged(offset, limit, iPostDate,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModified(offset, limit, iPostDate,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostModifiedGmt(offset, limit, iPostDate,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostContentFiltered(offset, limit, iPostDate,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostParent(offset, limit, iPostDate,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndGuid(offset, limit, iPostDate,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndMenuOrder(offset, limit, iPostDate,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostType(offset, limit, iPostDate,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndPostMimeType(offset, limit, iPostDate,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDate := self.Args("post_date").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsesByPostDateAndCommentCount(offset, limit, iPostDate,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContent := self.Args("post_content").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContent(offset, limit, iPostDateGmt,iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostTitle(offset, limit, iPostDateGmt,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostExcerpt(offset, limit, iPostDateGmt,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostStatus(offset, limit, iPostDateGmt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentStatus(offset, limit, iPostDateGmt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPingStatus(offset, limit, iPostDateGmt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostPassword(offset, limit, iPostDateGmt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostName(offset, limit, iPostDateGmt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndToPing(offset, limit, iPostDateGmt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPinged(offset, limit, iPostDateGmt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModified(offset, limit, iPostDateGmt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostModifiedGmt(offset, limit, iPostDateGmt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostContentFiltered(offset, limit, iPostDateGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostParent(offset, limit, iPostDateGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndGuid(offset, limit, iPostDateGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndMenuOrder(offset, limit, iPostDateGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostType(offset, limit, iPostDateGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndPostMimeType(offset, limit, iPostDateGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostDateGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostDateGmt := self.Args("post_date_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsesByPostDateGmtAndCommentCount(offset, limit, iPostDateGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostDateGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostTitle := self.Args("post_title").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostTitle(offset, limit, iPostContent,iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostExcerpt(offset, limit, iPostContent,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostStatus(offset, limit, iPostContent,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentStatus(offset, limit, iPostContent,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPingStatus(offset, limit, iPostContent,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostPassword(offset, limit, iPostContent,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostName(offset, limit, iPostContent,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndToPing(offset, limit, iPostContent,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPinged(offset, limit, iPostContent,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModified(offset, limit, iPostContent,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostModifiedGmt(offset, limit, iPostContent,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostContentFiltered(offset, limit, iPostContent,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostParent(offset, limit, iPostContent,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndGuid(offset, limit, iPostContent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndMenuOrder(offset, limit, iPostContent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostType(offset, limit, iPostContent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndPostMimeType(offset, limit, iPostContent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContent := self.Args("post_content").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsesByPostContentAndCommentCount(offset, limit, iPostContent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostExcerpt := self.Args("post_excerpt").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostExcerpt(offset, limit, iPostTitle,iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostStatus(offset, limit, iPostTitle,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentStatus(offset, limit, iPostTitle,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPingStatus(offset, limit, iPostTitle,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostPassword(offset, limit, iPostTitle,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostName(offset, limit, iPostTitle,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndToPing(offset, limit, iPostTitle,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPinged(offset, limit, iPostTitle,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModified(offset, limit, iPostTitle,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostModifiedGmt(offset, limit, iPostTitle,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostContentFiltered(offset, limit, iPostTitle,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostParent(offset, limit, iPostTitle,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndGuid(offset, limit, iPostTitle,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndMenuOrder(offset, limit, iPostTitle,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostType(offset, limit, iPostTitle,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndPostMimeType(offset, limit, iPostTitle,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTitleAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostTitle := self.Args("post_title").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsesByPostTitleAndCommentCount(offset, limit, iPostTitle,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTitleAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostStatus := self.Args("post_status").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostStatus(offset, limit, iPostExcerpt,iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentStatus(offset, limit, iPostExcerpt,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPingStatus(offset, limit, iPostExcerpt,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostPassword(offset, limit, iPostExcerpt,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostName(offset, limit, iPostExcerpt,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndToPing(offset, limit, iPostExcerpt,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPinged(offset, limit, iPostExcerpt,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModified(offset, limit, iPostExcerpt,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostModifiedGmt(offset, limit, iPostExcerpt,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostContentFiltered(offset, limit, iPostExcerpt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostParent(offset, limit, iPostExcerpt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndGuid(offset, limit, iPostExcerpt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndMenuOrder(offset, limit, iPostExcerpt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostType(offset, limit, iPostExcerpt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndPostMimeType(offset, limit, iPostExcerpt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostExcerptAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostExcerpt := self.Args("post_excerpt").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsesByPostExcerptAndCommentCount(offset, limit, iPostExcerpt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostExcerptAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentStatus := self.Args("comment_status").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentStatus(offset, limit, iPostStatus,iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPingStatus(offset, limit, iPostStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostPassword(offset, limit, iPostStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostName(offset, limit, iPostStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndToPing(offset, limit, iPostStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPinged(offset, limit, iPostStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModified(offset, limit, iPostStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostModifiedGmt(offset, limit, iPostStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostContentFiltered(offset, limit, iPostStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostParent(offset, limit, iPostStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndGuid(offset, limit, iPostStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndMenuOrder(offset, limit, iPostStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostType(offset, limit, iPostStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndPostMimeType(offset, limit, iPostStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostStatus := self.Args("post_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsesByPostStatusAndCommentCount(offset, limit, iPostStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPingStatus := self.Args("ping_status").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPingStatus(offset, limit, iCommentStatus,iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostPassword(offset, limit, iCommentStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostName(offset, limit, iCommentStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndToPing(offset, limit, iCommentStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPinged(offset, limit, iCommentStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModified(offset, limit, iCommentStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostModifiedGmt(offset, limit, iCommentStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostContentFiltered(offset, limit, iCommentStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostParent(offset, limit, iCommentStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndGuid(offset, limit, iCommentStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndMenuOrder(offset, limit, iCommentStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostType(offset, limit, iCommentStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndPostMimeType(offset, limit, iCommentStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByCommentStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iCommentStatus := self.Args("comment_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsesByCommentStatusAndCommentCount(offset, limit, iCommentStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByCommentStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostPassword := self.Args("post_password").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostPassword(offset, limit, iPingStatus,iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostName(offset, limit, iPingStatus,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndToPing(offset, limit, iPingStatus,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPinged(offset, limit, iPingStatus,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModified(offset, limit, iPingStatus,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostModifiedGmt(offset, limit, iPingStatus,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostContentFiltered(offset, limit, iPingStatus,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostParent(offset, limit, iPingStatus,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndGuid(offset, limit, iPingStatus,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndMenuOrder(offset, limit, iPingStatus,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostType(offset, limit, iPingStatus,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndPostMimeType(offset, limit, iPingStatus,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingStatusAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPingStatus := self.Args("ping_status").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsesByPingStatusAndCommentCount(offset, limit, iPingStatus,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingStatusAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostName := self.Args("post_name").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostName(offset, limit, iPostPassword,iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndToPing(offset, limit, iPostPassword,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPinged(offset, limit, iPostPassword,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModified(offset, limit, iPostPassword,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostModifiedGmt(offset, limit, iPostPassword,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostContentFiltered(offset, limit, iPostPassword,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostParent(offset, limit, iPostPassword,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndGuid(offset, limit, iPostPassword,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndMenuOrder(offset, limit, iPostPassword,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostType(offset, limit, iPostPassword,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndPostMimeType(offset, limit, iPostPassword,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostPasswordAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostPassword := self.Args("post_password").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsesByPostPasswordAndCommentCount(offset, limit, iPostPassword,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostPasswordAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iToPing := self.Args("to_ping").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndToPing(offset, limit, iPostName,iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPinged(offset, limit, iPostName,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModified(offset, limit, iPostName,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostModifiedGmt(offset, limit, iPostName,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostContentFiltered(offset, limit, iPostName,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostParent(offset, limit, iPostName,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndGuid(offset, limit, iPostName,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndMenuOrder(offset, limit, iPostName,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostType(offset, limit, iPostName,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndPostMimeType(offset, limit, iPostName,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostNameAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostName := self.Args("post_name").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsesByPostNameAndCommentCount(offset, limit, iPostName,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostNameAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPinged := self.Args("pinged").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPinged(offset, limit, iToPing,iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModified(offset, limit, iToPing,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostModifiedGmt(offset, limit, iToPing,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostContentFiltered(offset, limit, iToPing,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostParent(offset, limit, iToPing,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndGuid(offset, limit, iToPing,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndMenuOrder(offset, limit, iToPing,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostType(offset, limit, iToPing,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndPostMimeType(offset, limit, iToPing,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByToPingAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iToPing := self.Args("to_ping").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsesByToPingAndCommentCount(offset, limit, iToPing,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByToPingAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModified := self.Args("post_modified").Time()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModified(offset, limit, iPinged,iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostModifiedGmt(offset, limit, iPinged,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostContentFiltered(offset, limit, iPinged,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostParent(offset, limit, iPinged,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndGuid(offset, limit, iPinged,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndMenuOrder(offset, limit, iPinged,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostType(offset, limit, iPinged,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndPostMimeType(offset, limit, iPinged,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPingedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPinged := self.Args("pinged").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsesByPingedAndCommentCount(offset, limit, iPinged,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPingedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostModifiedGmt(offset, limit, iPostModified,iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostContentFiltered(offset, limit, iPostModified,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostParent(offset, limit, iPostModified,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndGuid(offset, limit, iPostModified,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndMenuOrder(offset, limit, iPostModified,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostType(offset, limit, iPostModified,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndPostMimeType(offset, limit, iPostModified,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModified := self.Args("post_modified").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsesByPostModifiedAndCommentCount(offset, limit, iPostModified,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostContentFiltered := self.Args("post_content_filtered").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostContentFiltered(offset, limit, iPostModifiedGmt,iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostParent(offset, limit, iPostModifiedGmt,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndGuid(offset, limit, iPostModifiedGmt,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndMenuOrder(offset, limit, iPostModifiedGmt,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostType(offset, limit, iPostModifiedGmt,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndPostMimeType(offset, limit, iPostModifiedGmt,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostModifiedGmtAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsesByPostModifiedGmtAndCommentCount(offset, limit, iPostModifiedGmt,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostModifiedGmtAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostParent := self.Args("post_parent").MustInt64()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostParent(offset, limit, iPostContentFiltered,iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndGuid(offset, limit, iPostContentFiltered,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndMenuOrder(offset, limit, iPostContentFiltered,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostType(offset, limit, iPostContentFiltered,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndPostMimeType(offset, limit, iPostContentFiltered,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostContentFilteredAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostContentFiltered := self.Args("post_content_filtered").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsesByPostContentFilteredAndCommentCount(offset, limit, iPostContentFiltered,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostContentFilteredAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iGuid := self.Args("guid").String()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndGuid(offset, limit, iPostParent,iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndMenuOrder(offset, limit, iPostParent,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndPostType(offset, limit, iPostParent,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndPostMimeType(offset, limit, iPostParent,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostParentAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostParent := self.Args("post_parent").MustInt64()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsesByPostParentAndCommentCount(offset, limit, iPostParent,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostParentAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidAndMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iGuid := self.Args("guid").String()
	iMenuOrder := self.Args("menu_order").MustInt()

	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuidAndMenuOrder(offset, limit, iGuid,iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuidAndMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iGuid := self.Args("guid").String()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuidAndPostType(offset, limit, iGuid,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuidAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iGuid := self.Args("guid").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuidAndPostMimeType(offset, limit, iGuid,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuidAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByGuidAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iGuid := self.Args("guid").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsesByGuidAndCommentCount(offset, limit, iGuid,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByGuidAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByMenuOrderAndPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostType := self.Args("post_type").String()

	if helper.IsHas(iMenuOrder) {
		_Posts, _error := model.GetPostsesByMenuOrderAndPostType(offset, limit, iMenuOrder,iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByMenuOrderAndPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByMenuOrderAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuOrder := self.Args("menu_order").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iMenuOrder) {
		_Posts, _error := model.GetPostsesByMenuOrderAndPostMimeType(offset, limit, iMenuOrder,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByMenuOrderAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByMenuOrderAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuOrder := self.Args("menu_order").MustInt()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iMenuOrder) {
		_Posts, _error := model.GetPostsesByMenuOrderAndCommentCount(offset, limit, iMenuOrder,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByMenuOrderAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTypeAndPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostType := self.Args("post_type").String()
	iPostMimeType := self.Args("post_mime_type").String()

	if helper.IsHas(iPostType) {
		_Posts, _error := model.GetPostsesByPostTypeAndPostMimeType(offset, limit, iPostType,iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTypeAndPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostType := self.Args("post_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostType) {
		_Posts, _error := model.GetPostsesByPostTypeAndCommentCount(offset, limit, iPostType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesByPostMimeTypeAndCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iPostMimeType := self.Args("post_mime_type").String()
	iCommentCount := self.Args("comment_count").MustInt64()

	if helper.IsHas(iPostMimeType) {
		_Posts, _error := model.GetPostsesByPostMimeTypeAndCommentCount(offset, limit, iPostMimeType,iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsesByPostMimeTypeAndCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsesHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	if (offset > 0) && (len(field) > 0) {
		_Posts, _error := model.GetPostses(offset, limit, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostses' args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iId := self.Args("ID").MustInt64()
	if helper.IsHas(iId) {
		_Posts := model.HasPostsById(iId)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsById's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostAuthorHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostAuthor := self.Args("post_author").MustInt64()
	if helper.IsHas(iPostAuthor) {
		_Posts := model.HasPostsByPostAuthor(iPostAuthor)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostAuthor's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostDateHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostDate := self.Args("post_date").Time()
	if helper.IsHas(iPostDate) {
		_Posts := model.HasPostsByPostDate(iPostDate)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostDate's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostDateGmt := self.Args("post_date_gmt").Time()
	if helper.IsHas(iPostDateGmt) {
		_Posts := model.HasPostsByPostDateGmt(iPostDateGmt)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostDateGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostContent := self.Args("post_content").String()
	if helper.IsHas(iPostContent) {
		_Posts := model.HasPostsByPostContent(iPostContent)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostTitle := self.Args("post_title").String()
	if helper.IsHas(iPostTitle) {
		_Posts := model.HasPostsByPostTitle(iPostTitle)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostExcerpt := self.Args("post_excerpt").String()
	if helper.IsHas(iPostExcerpt) {
		_Posts := model.HasPostsByPostExcerpt(iPostExcerpt)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostStatus := self.Args("post_status").String()
	if helper.IsHas(iPostStatus) {
		_Posts := model.HasPostsByPostStatus(iPostStatus)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iCommentStatus := self.Args("comment_status").String()
	if helper.IsHas(iCommentStatus) {
		_Posts := model.HasPostsByCommentStatus(iCommentStatus)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPingStatus := self.Args("ping_status").String()
	if helper.IsHas(iPingStatus) {
		_Posts := model.HasPostsByPingStatus(iPingStatus)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostPassword := self.Args("post_password").String()
	if helper.IsHas(iPostPassword) {
		_Posts := model.HasPostsByPostPassword(iPostPassword)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostName := self.Args("post_name").String()
	if helper.IsHas(iPostName) {
		_Posts := model.HasPostsByPostName(iPostName)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iToPing := self.Args("to_ping").String()
	if helper.IsHas(iToPing) {
		_Posts := model.HasPostsByToPing(iToPing)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPinged := self.Args("pinged").String()
	if helper.IsHas(iPinged) {
		_Posts := model.HasPostsByPinged(iPinged)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostModified := self.Args("post_modified").Time()
	if helper.IsHas(iPostModified) {
		_Posts := model.HasPostsByPostModified(iPostModified)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	if helper.IsHas(iPostModifiedGmt) {
		_Posts := model.HasPostsByPostModifiedGmt(iPostModifiedGmt)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostContentFiltered := self.Args("post_content_filtered").String()
	if helper.IsHas(iPostContentFiltered) {
		_Posts := model.HasPostsByPostContentFiltered(iPostContentFiltered)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostParent := self.Args("post_parent").MustInt64()
	if helper.IsHas(iPostParent) {
		_Posts := model.HasPostsByPostParent(iPostParent)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iGuid := self.Args("guid").String()
	if helper.IsHas(iGuid) {
		_Posts := model.HasPostsByGuid(iGuid)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iMenuOrder := self.Args("menu_order").MustInt()
	if helper.IsHas(iMenuOrder) {
		_Posts := model.HasPostsByMenuOrder(iMenuOrder)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostType := self.Args("post_type").String()
	if helper.IsHas(iPostType) {
		_Posts := model.HasPostsByPostType(iPostType)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostMimeType := self.Args("post_mime_type").String()
	if helper.IsHas(iPostMimeType) {
		_Posts := model.HasPostsByPostMimeType(iPostMimeType)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasPostsByCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iCommentCount := self.Args("comment_count").MustInt64()
	if helper.IsHas(iCommentCount) {
		_Posts := model.HasPostsByCommentCount(iCommentCount)
		var m = map[string]interface{}{}
		m["posts"] = _Posts
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasPostsByCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iId := self.Args("ID").MustInt64()
	if helper.IsHas(iId) {
		_Posts, _error := model.GetPostsById(iId)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsById's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostAuthorHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostAuthor := self.Args("post_author").MustInt64()
	if helper.IsHas(iPostAuthor) {
		_Posts, _error := model.GetPostsByPostAuthor(iPostAuthor)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostAuthor's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostDateHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostDate := self.Args("post_date").Time()
	if helper.IsHas(iPostDate) {
		_Posts, _error := model.GetPostsByPostDate(iPostDate)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostDate's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostDateGmt := self.Args("post_date_gmt").Time()
	if helper.IsHas(iPostDateGmt) {
		_Posts, _error := model.GetPostsByPostDateGmt(iPostDateGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostDateGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostContent := self.Args("post_content").String()
	if helper.IsHas(iPostContent) {
		_Posts, _error := model.GetPostsByPostContent(iPostContent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostTitle := self.Args("post_title").String()
	if helper.IsHas(iPostTitle) {
		_Posts, _error := model.GetPostsByPostTitle(iPostTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostExcerpt := self.Args("post_excerpt").String()
	if helper.IsHas(iPostExcerpt) {
		_Posts, _error := model.GetPostsByPostExcerpt(iPostExcerpt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostStatus := self.Args("post_status").String()
	if helper.IsHas(iPostStatus) {
		_Posts, _error := model.GetPostsByPostStatus(iPostStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iCommentStatus := self.Args("comment_status").String()
	if helper.IsHas(iCommentStatus) {
		_Posts, _error := model.GetPostsByCommentStatus(iCommentStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPingStatus := self.Args("ping_status").String()
	if helper.IsHas(iPingStatus) {
		_Posts, _error := model.GetPostsByPingStatus(iPingStatus)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostPassword := self.Args("post_password").String()
	if helper.IsHas(iPostPassword) {
		_Posts, _error := model.GetPostsByPostPassword(iPostPassword)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostName := self.Args("post_name").String()
	if helper.IsHas(iPostName) {
		_Posts, _error := model.GetPostsByPostName(iPostName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iToPing := self.Args("to_ping").String()
	if helper.IsHas(iToPing) {
		_Posts, _error := model.GetPostsByToPing(iToPing)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPinged := self.Args("pinged").String()
	if helper.IsHas(iPinged) {
		_Posts, _error := model.GetPostsByPinged(iPinged)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostModified := self.Args("post_modified").Time()
	if helper.IsHas(iPostModified) {
		_Posts, _error := model.GetPostsByPostModified(iPostModified)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostModifiedGmt := self.Args("post_modified_gmt").Time()
	if helper.IsHas(iPostModifiedGmt) {
		_Posts, _error := model.GetPostsByPostModifiedGmt(iPostModifiedGmt)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostContentFiltered := self.Args("post_content_filtered").String()
	if helper.IsHas(iPostContentFiltered) {
		_Posts, _error := model.GetPostsByPostContentFiltered(iPostContentFiltered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostParent := self.Args("post_parent").MustInt64()
	if helper.IsHas(iPostParent) {
		_Posts, _error := model.GetPostsByPostParent(iPostParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iGuid := self.Args("guid").String()
	if helper.IsHas(iGuid) {
		_Posts, _error := model.GetPostsByGuid(iGuid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iMenuOrder := self.Args("menu_order").MustInt()
	if helper.IsHas(iMenuOrder) {
		_Posts, _error := model.GetPostsByMenuOrder(iMenuOrder)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostType := self.Args("post_type").String()
	if helper.IsHas(iPostType) {
		_Posts, _error := model.GetPostsByPostType(iPostType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iPostMimeType := self.Args("post_mime_type").String()
	if helper.IsHas(iPostMimeType) {
		_Posts, _error := model.GetPostsByPostMimeType(iPostMimeType)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetPostsByCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iCommentCount := self.Args("comment_count").MustInt64()
	if helper.IsHas(iCommentCount) {
		_Posts, _error := model.GetPostsByCommentCount(iCommentCount)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the GetPostsByCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Id_ := self.Args("ID").MustInt64()
	if helper.IsHas(Id_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsById(Id_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsById's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostAuthorHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostAuthor_ := self.Args("post_author").MustInt64()
	if helper.IsHas(PostAuthor_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostAuthor(PostAuthor_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostAuthor's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostDateHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostDate_ := self.Args("post_date").Time()
	if helper.IsHas(PostDate_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostDate(PostDate_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostDate's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostDateGmt_ := self.Args("post_date_gmt").Time()
	if helper.IsHas(PostDateGmt_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostDateGmt(PostDateGmt_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostDateGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostContent_ := self.Args("post_content").String()
	if helper.IsHas(PostContent_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostContent(PostContent_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostContent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostTitle_ := self.Args("post_title").String()
	if helper.IsHas(PostTitle_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostTitle(PostTitle_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostExcerpt_ := self.Args("post_excerpt").String()
	if helper.IsHas(PostExcerpt_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostExcerpt(PostExcerpt_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostExcerpt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostStatus_ := self.Args("post_status").String()
	if helper.IsHas(PostStatus_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostStatus(PostStatus_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	CommentStatus_ := self.Args("comment_status").String()
	if helper.IsHas(CommentStatus_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByCommentStatus(CommentStatus_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByCommentStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PingStatus_ := self.Args("ping_status").String()
	if helper.IsHas(PingStatus_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPingStatus(PingStatus_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPingStatus's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostPassword_ := self.Args("post_password").String()
	if helper.IsHas(PostPassword_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostPassword(PostPassword_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostPassword's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostName_ := self.Args("post_name").String()
	if helper.IsHas(PostName_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostName(PostName_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	ToPing_ := self.Args("to_ping").String()
	if helper.IsHas(ToPing_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByToPing(ToPing_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByToPing's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Pinged_ := self.Args("pinged").String()
	if helper.IsHas(Pinged_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPinged(Pinged_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPinged's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostModified_ := self.Args("post_modified").Time()
	if helper.IsHas(PostModified_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostModified(PostModified_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostModified's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostModifiedGmt_ := self.Args("post_modified_gmt").Time()
	if helper.IsHas(PostModifiedGmt_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostModifiedGmt(PostModifiedGmt_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostModifiedGmt's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostContentFiltered_ := self.Args("post_content_filtered").String()
	if helper.IsHas(PostContentFiltered_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostContentFiltered(PostContentFiltered_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostContentFiltered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostParent_ := self.Args("post_parent").MustInt64()
	if helper.IsHas(PostParent_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostParent(PostParent_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Guid_ := self.Args("guid").String()
	if helper.IsHas(Guid_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByGuid(Guid_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByGuid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	MenuOrder_ := self.Args("menu_order").MustInt()
	if helper.IsHas(MenuOrder_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByMenuOrder(MenuOrder_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByMenuOrder's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostType_ := self.Args("post_type").String()
	if helper.IsHas(PostType_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostType(PostType_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostMimeType_ := self.Args("post_mime_type").String()
	if helper.IsHas(PostMimeType_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByPostMimeType(PostMimeType_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByPostMimeType's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetPostsByCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	CommentCount_ := self.Args("comment_count").MustInt64()
	if helper.IsHas(CommentCount_) {
		var iPosts model.Posts
		self.Bind(&iPosts)
		_Posts, _error := model.SetPostsByCommentCount(CommentCount_, &iPosts)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_Posts)
	}
	herr.Message = "Can't get to the SetPostsByCommentCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostAddPostsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Id_ := self.Args("ID").MustInt64()
	PostAuthor_ := self.Args("post_author").MustInt64()
	PostDate_ := self.Args("post_date").Time()
	PostDateGmt_ := self.Args("post_date_gmt").Time()
	PostContent_ := self.Args("post_content").String()
	PostTitle_ := self.Args("post_title").String()
	PostExcerpt_ := self.Args("post_excerpt").String()
	PostStatus_ := self.Args("post_status").String()
	CommentStatus_ := self.Args("comment_status").String()
	PingStatus_ := self.Args("ping_status").String()
	PostPassword_ := self.Args("post_password").String()
	PostName_ := self.Args("post_name").String()
	ToPing_ := self.Args("to_ping").String()
	Pinged_ := self.Args("pinged").String()
	PostModified_ := self.Args("post_modified").Time()
	PostModifiedGmt_ := self.Args("post_modified_gmt").Time()
	PostContentFiltered_ := self.Args("post_content_filtered").String()
	PostParent_ := self.Args("post_parent").MustInt64()
	Guid_ := self.Args("guid").String()
	MenuOrder_ := self.Args("menu_order").MustInt()
	PostType_ := self.Args("post_type").String()
	PostMimeType_ := self.Args("post_mime_type").String()
	CommentCount_ := self.Args("comment_count").MustInt64()

	if helper.IsHas(Id_) {
		_error := model.AddPosts(Id_,PostAuthor_,PostDate_,PostDateGmt_,PostContent_,PostTitle_,PostExcerpt_,PostStatus_,CommentStatus_,PingStatus_,PostPassword_,PostName_,ToPing_,Pinged_,PostModified_,PostModifiedGmt_,PostContentFiltered_,PostParent_,Guid_,MenuOrder_,PostType_,PostMimeType_,CommentCount_)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		herr.Message = "StatusOK"
		herr.Status = macross.StatusOK
		return self.JSON(herr)
	}
	herr.Message = "Can't get to the AddPosts's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostPostsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PostPosts(&iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	} else {
		var m = map[string]interface{}{}
		m["created"] = _int64
		return self.JSON(m, macross.StatusCreated)
	}
	return self.JSON(herr)
}

func PutPostsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPosts(&iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	} else {
		var m = map[string]interface{}{}
		m["updated"] = _int64
		return self.JSON(m)
	}
	return self.JSON(herr)
}

func PutPostsByIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Id_ := self.Args("ID").MustInt64()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsById(Id_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostAuthorHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostAuthor_ := self.Args("post_author").MustInt64()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostAuthor(PostAuthor_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostDateHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostDate_ := self.Args("post_date").Time()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostDate(PostDate_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostDateGmt_ := self.Args("post_date_gmt").Time()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostDateGmt(PostDateGmt_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostContent_ := self.Args("post_content").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostContent(PostContent_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostTitle_ := self.Args("post_title").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostTitle(PostTitle_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostExcerpt_ := self.Args("post_excerpt").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostExcerpt(PostExcerpt_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostStatus_ := self.Args("post_status").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostStatus(PostStatus_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	CommentStatus_ := self.Args("comment_status").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByCommentStatus(CommentStatus_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PingStatus_ := self.Args("ping_status").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPingStatus(PingStatus_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostPassword_ := self.Args("post_password").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostPassword(PostPassword_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostName_ := self.Args("post_name").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostName(PostName_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	ToPing_ := self.Args("to_ping").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByToPing(ToPing_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Pinged_ := self.Args("pinged").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPinged(Pinged_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostModified_ := self.Args("post_modified").Time()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostModified(PostModified_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostModifiedGmt_ := self.Args("post_modified_gmt").Time()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostModifiedGmt(PostModifiedGmt_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostContentFiltered_ := self.Args("post_content_filtered").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostContentFiltered(PostContentFiltered_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostParent_ := self.Args("post_parent").MustInt64()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostParent(PostParent_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Guid_ := self.Args("guid").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByGuid(Guid_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	MenuOrder_ := self.Args("menu_order").MustInt()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByMenuOrder(MenuOrder_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostType_ := self.Args("post_type").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostType(PostType_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostMimeType_ := self.Args("post_mime_type").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByPostMimeType(PostMimeType_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutPostsByCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	CommentCount_ := self.Args("comment_count").MustInt64()
	var iPosts model.Posts
	self.Bind(&iPosts)
	_int64, _error := model.PutPostsByCommentCount(CommentCount_, &iPosts)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Id_ := self.Args("ID").MustInt64()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsById(Id_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostAuthorHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostAuthor_ := self.Args("post_author").MustInt64()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostAuthor(PostAuthor_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostDateHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostDate_ := self.Args("post_date").Time()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostDate(PostDate_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostDateGmt_ := self.Args("post_date_gmt").Time()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostDateGmt(PostDateGmt_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostContent_ := self.Args("post_content").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostContent(PostContent_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostTitle_ := self.Args("post_title").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostTitle(PostTitle_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostExcerpt_ := self.Args("post_excerpt").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostExcerpt(PostExcerpt_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostStatus_ := self.Args("post_status").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostStatus(PostStatus_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	CommentStatus_ := self.Args("comment_status").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByCommentStatus(CommentStatus_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PingStatus_ := self.Args("ping_status").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPingStatus(PingStatus_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostPassword_ := self.Args("post_password").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostPassword(PostPassword_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostName_ := self.Args("post_name").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostName(PostName_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	ToPing_ := self.Args("to_ping").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByToPing(ToPing_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Pinged_ := self.Args("pinged").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPinged(Pinged_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostModified_ := self.Args("post_modified").Time()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostModified(PostModified_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostModifiedGmt_ := self.Args("post_modified_gmt").Time()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostModifiedGmt(PostModifiedGmt_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostContentFiltered_ := self.Args("post_content_filtered").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostContentFiltered(PostContentFiltered_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostParent_ := self.Args("post_parent").MustInt64()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostParent(PostParent_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Guid_ := self.Args("guid").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByGuid(Guid_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	MenuOrder_ := self.Args("menu_order").MustInt()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByMenuOrder(MenuOrder_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostType_ := self.Args("post_type").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostType(PostType_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostMimeType_ := self.Args("post_mime_type").String()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByPostMimeType(PostMimeType_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdatePostsByCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	CommentCount_ := self.Args("comment_count").MustInt64()
	var iPosts model.Posts
	self.Bind(&iPosts)
	var iMap = helper.StructToMap(iPosts)
	_error := model.UpdatePostsByCommentCount(CommentCount_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Id_ := self.Args("ID").MustInt64()
	_int64, _error := model.DeletePosts(Id_)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	} else {
		var m = map[string]interface{}{}
		m["deleted"] = _int64
		return self.JSON(m)
	}
	return self.JSON(herr)
}

func DeletePostsByIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Id_ := self.Args("ID").MustInt64()
	_error := model.DeletePostsById(Id_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostAuthorHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostAuthor_ := self.Args("post_author").MustInt64()
	_error := model.DeletePostsByPostAuthor(PostAuthor_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostDateHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostDate_ := self.Args("post_date").Time()
	_error := model.DeletePostsByPostDate(PostDate_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostDateGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostDateGmt_ := self.Args("post_date_gmt").Time()
	_error := model.DeletePostsByPostDateGmt(PostDateGmt_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostContentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostContent_ := self.Args("post_content").String()
	_error := model.DeletePostsByPostContent(PostContent_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostTitle_ := self.Args("post_title").String()
	_error := model.DeletePostsByPostTitle(PostTitle_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostExcerptHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostExcerpt_ := self.Args("post_excerpt").String()
	_error := model.DeletePostsByPostExcerpt(PostExcerpt_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostStatus_ := self.Args("post_status").String()
	_error := model.DeletePostsByPostStatus(PostStatus_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByCommentStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	CommentStatus_ := self.Args("comment_status").String()
	_error := model.DeletePostsByCommentStatus(CommentStatus_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPingStatusHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PingStatus_ := self.Args("ping_status").String()
	_error := model.DeletePostsByPingStatus(PingStatus_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostPasswordHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostPassword_ := self.Args("post_password").String()
	_error := model.DeletePostsByPostPassword(PostPassword_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostName_ := self.Args("post_name").String()
	_error := model.DeletePostsByPostName(PostName_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByToPingHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	ToPing_ := self.Args("to_ping").String()
	_error := model.DeletePostsByToPing(ToPing_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPingedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Pinged_ := self.Args("pinged").String()
	_error := model.DeletePostsByPinged(Pinged_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostModifiedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostModified_ := self.Args("post_modified").Time()
	_error := model.DeletePostsByPostModified(PostModified_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostModifiedGmtHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostModifiedGmt_ := self.Args("post_modified_gmt").Time()
	_error := model.DeletePostsByPostModifiedGmt(PostModifiedGmt_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostContentFilteredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostContentFiltered_ := self.Args("post_content_filtered").String()
	_error := model.DeletePostsByPostContentFiltered(PostContentFiltered_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostParent_ := self.Args("post_parent").MustInt64()
	_error := model.DeletePostsByPostParent(PostParent_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByGuidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Guid_ := self.Args("guid").String()
	_error := model.DeletePostsByGuid(Guid_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByMenuOrderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	MenuOrder_ := self.Args("menu_order").MustInt()
	_error := model.DeletePostsByMenuOrder(MenuOrder_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostType_ := self.Args("post_type").String()
	_error := model.DeletePostsByPostType(PostType_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByPostMimeTypeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	PostMimeType_ := self.Args("post_mime_type").String()
	_error := model.DeletePostsByPostMimeType(PostMimeType_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeletePostsByCommentCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	CommentCount_ := self.Args("comment_count").MustInt64()
	_error := model.DeletePostsByCommentCount(CommentCount_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}
